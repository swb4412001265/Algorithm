170. Rotate List
中文English
Given a list, rotate the list to the right by k places, where k is non-negative.

Example
Example 1:

Input:1->2->3->4->5  k = 2
Output:4->5->1->2->3
Example 2:

Input:3->2->1  k = 1
Output:1->3->2

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: the List
    @param k: rotate to the right k places
    @return: the list after rotation
    """
    def rotateRight(self, head, k):
        # write your code here
        if not head:
            return None
        
        count = 1
        dummy = ListNode(-1)
        dummy2 = ListNode(-1)
        dummy.next = head
        tmp = head
        while head.next != None:
            count += 1
            head = head.next
        k %= count
        
        # Need to consider this corner case
        if k == 0:
            return dummy.next
        # Need to consider this corner case
        if count == 1:
            return dummy.next
        for _ in range(count - k - 1):
            tmp = tmp.next
        dummy2.next = tmp.next
        tmp.next = None
        head.next = dummy.next
        return dummy2.next
        
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: the List
    @param k: rotate to the right k places
    @return: the list after rotation
    """
    def rotateRight(self, head, k):
        # write your code here
        if not head:
            return head
        tmp = head
        # dummy = ListNode(-1)
        # dummy.next = head
        # head = dummy
        tmpNode = []
        while head != None:
            tmpNode.append(head)
            head = head.next
        if len(tmpNode) == 1:
            return tmp
        k %= len(tmpNode)
        if k == 0:
            return tmp
        tmpNode[-k - 1].next = None
        tmpNode[-1].next = tmp
        return tmpNode[-k]
