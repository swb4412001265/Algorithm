1272. Kth Smallest Element in a Sorted Matrix
中文English
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example
Example1

Input:
[[ 1,  5,  9],[10, 11, 13],[12, 13, 15]]
8
Output: 13
Example2

Input:
[[-5]]
1
Output: -5
Challenge
If k << n^2, what's the best algorithm?
How about k ~ n^2?

Notice
You may assume k is always valid, 1 ≤ k ≤ n^2.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param matrix: List[List[int]]
    @param k: a integer
    @return: return a integer
    """
    def kthSmallest(self, matrix, k):
        # write your code here
        import heapq
        if not matrix:
            return 
        m = len(matrix)
        n = len(matrix[0])
        dx = [0, 1]
        dy = [1, 0]
        h = []
        visited = [[False for _ in range(n)] for _ in range(m)]
        heapq.heappush(h, (matrix[0][0], 0, 0))
        visited[0][0] = True
        for _ in range(k - 1):
            val, x, y = heapq.heappop(h)
            for i in range(2):
                tmp_x = x + dx[i]
                tmp_y = y + dy[i]
                if tmp_x < n and tmp_y < m and visited[tmp_x][tmp_y] == False:
                    heapq.heappush(h, (matrix[tmp_x][tmp_y], tmp_x, tmp_y))
                    visited[tmp_x][tmp_y] = True
        return heapq.heappop(h)[0]
