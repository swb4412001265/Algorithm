911. Maximum Size Subarray Sum Equals k
中文English
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Example
Example1

Input:  nums = [1, -1, 5, -2, 3], k = 3
Output: 4
Explanation:
because the subarray [1, -1, 5, -2] sums to 3 and is the longest.
Example2

Input: nums = [-2, -1, 2, 1], k = 1
Output: 2
Explanation:
because the subarray [-1, 2] sums to 1 and is the longest.
Challenge
Can you do it in O(n) time?

Notice
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an array
    @param k: a target value
    @return: the maximum length of a subarray that sums to k
    """
    def maxSubArrayLen(self, nums, k):
        # Write your code here
        if not nums:
            return 0
            
        preSum = 0
        res = 0
        tmpDict = {0: -1}
        tmp = 0
        for i in range(len(nums)):
            preSum += nums[i]
            if preSum - k in tmpDict:
                tmp = i - tmpDict[preSum - k]
                res = max(res, tmp)
            if preSum not in tmpDict:
                tmpDict[preSum] = i
        return res
