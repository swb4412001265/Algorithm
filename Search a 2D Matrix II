38. Search a 2D Matrix II
中文English
Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.

This matrix has the following properties:

Integers in each row are sorted from left to right.
Integers in each column are sorted from up to bottom.
No duplicate integers in each row or column.
Example
Example 1:

Input:
	[[3,4]]
	target=3
Output:1
Example 2:

Input:
    [
      [1, 3, 5, 7],
      [2, 4, 7, 8],
      [3, 5, 9, 10]
    ]
    target = 3
Output:2
Challenge
O(m+n) time and O(1) extra space

//////////////////////////////////////////////////////////////BFS///////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param matrix: A list of lists of integers
    @param target: An integer you want to search in matrix
    @return: An integer indicate the total occurrence of target in the given matrix
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if not matrix or len(matrix[0]) == 0:
            return 0
        if matrix[0][0] > target:
            return 0
        if matrix[0][0] == target:
            return 1
        res = 0
        dx = [0, 1]
        dy = [1, 0]
        x = len(matrix)
        y = len(matrix[0])
        visited = [[False for _ in range(y)] for _ in range(x)]
        from queue import Queue
        q = Queue()
        q.put((0, 0))
        visited[0][0] = True
        
        while not q.empty():
            tmp_x, tmp_y = q.get()
            if matrix[tmp_x][tmp_y] == target:
                res += 1
            for i in range(2):
                _x = dx[i] + tmp_x
                _y = dy[i] + tmp_y
                if _x < x and _y < y and visited[_x][_y] == False and \
                matrix[_x][_y] <= target:
                    q.put((_x, _y))
                    visited[_x][_y] = True
        return res

/////////////////////////////////////////////////////////////////O(m + n)////////////////////////////////////////////////////////////////
class Solution:
    """
    @param matrix: A list of lists of integers
    @param target: An integer you want to search in matrix
    @return: An integer indicate the total occurrence of target in the given matrix
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if not matrix or len(matrix[0]) == 0:
            return 0
        if matrix[0][0] > target:
            return 0
        if matrix[0][0] == target:
            return 1
        res = 0
        # Traverse from bottom left to right corner
        # Since that is the place element can move either smaller and bigger and 
        # save steps. if from left up or right down corner, you need to move more
        # steps
        i = len(matrix) - 1
        j = 0
        
        while i >= 0 and j < len(matrix[0]):
            if matrix[i][j] == target:
                i -= 1
                j += 1
                res += 1
            elif matrix[i][j] < target:
                j += 1
            else:
                i -= 1
        return res
