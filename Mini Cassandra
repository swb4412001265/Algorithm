"""
Definition of Column:
class Column:
    def __init__(self, key, value):
        self.key = key
        self.value = value
"""
from collections import OrderedDict

class MiniCassandra:
    
    def __init__(self):
        # do intialization if necessary
        self.result = {}
    """
    @param: raw_key: a string
    @param: column_key: An integer
    @param: column_value: a string
    @return: nothing
    """
    def insert(self, raw_key, column_key, column_value):
        # write your code here
        if raw_key not in self.result.keys():
            self.result[raw_key] = {}
        self.result[raw_key][column_key] = column_value
        
    """
    @param: raw_key: a string
    @param: column_start: An integer
    @param: column_end: An integer
    @return: a list of Columns
    """
    def query(self, raw_key, column_start, column_end):
        # write your code here
        tmp = []
        if raw_key not in self.result:
            return tmp
        self.result[raw_key] = OrderedDict(sorted(self.result[raw_key].items()))
        for key, value in self.result[raw_key].items():
                if key >= column_start and key <= column_end:
                    tmp.append(Column(key, value))
        return tmp
