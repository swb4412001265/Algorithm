
376. Binary Tree Path Sum
Given a binary tree, find all paths that sum of the nodes in the path equals to a given number target.

A valid path is from root node to any of the leaf nodes.

Example
Given a binary tree, and target = 5:

     1
    / \
   2   4
  / \
 2   3
return

[
  [1, 2, 2],
  [1, 4]
]

//////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    vector<int> resultPart;
    vector<vector<int> > result;
    int sum = 0;
    void help(TreeNode* root, int target){
        //vector<int> res;
        if(root == NULL){
            return;
        }
        resultPart.push_back(root->val);
        sum += root->val;
        if(root->left == NULL && root->right == NULL && sum == target)
            result.push_back(resultPart);
        help(root->left, target);
        help(root->right, target);
        sum-=root->val;     //节点的值和节点 vector 里边的值 要清空 及 回到上一个节点 继续往下走
        resultPart.pop_back();
    }
    vector<vector<int>> binaryTreePathSum(TreeNode *root, int target) {
        // Write your code here
        //vector<vector<int> > result;
        if(root == NULL){
            return result;
        }
        help(root,target);
        return result;
    }
};

//////////////////////////////////////
//version 2 put resultPart and sum into parameter and there is no need to remove int and minus val in sum
/////////////////////////////////////

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    //vector<int> resultPart;
    vector<vector<int> > result;
    //int sum = 0;
    void help(TreeNode* root, int target, vector<int> resultPart, int sum){
        //vector<int> res;
        if(root == NULL){
            return;
        }
        resultPart.push_back(root->val);
        sum += root->val;
        if(root->left == NULL && root->right == NULL && sum == target)
            result.push_back(resultPart);
        help(root->left, target, resultPart, sum);
        help(root->right, target,resultPart, sum);
        //sum-=root->val;
        //resultPart.pop_back();
    }
    vector<vector<int>> binaryTreePathSum(TreeNode *root, int target) {
        // Write your code here
        //vector<vector<int> > result;
        if(root == NULL){
            return result;
        }
        vector<int> resultPart;
        help(root, target, resultPart, 0);
        return result;
    }
};


####################################################################################################################################
Version 3 put everything as parameters of help function
################################################################################################################################
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
     /*
     int sum = 0;
     vector<vector<int>> result;
     vector<int> part;
     */
    void Tree(TreeNode *root, int sum, vector<int> part, vector<vector<int>> &result, int target) {
        if(root == NULL) {
            return;
        }
        part.push_back(root->val);
        sum += root->val;
        if(root->left == NULL && root->right == NULL && sum == target) {
            result.push_back(part);    
        }
        Tree(root->left, sum, part, result, target);
        Tree(root->right, sum, part, result, target);
        //sum -= root->val;
        //part.pop_back();
        
    }
    vector<vector<int>> binaryTreePathSum(TreeNode *root, int target) {
        // Write your code here
        vector<vector<int>> result;
        if(root == NULL) {
            return result;
        }
        vector<int> part;
        Tree(root, 0, part, result, target);
        return result;
        
    }
};



////////////////////////////////////////////////////Python/////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @param: target: An integer
    @return: all valid paths
    """
    def binaryTreePathSum(self, root, target):
        # write your code here
        if root == None:
            return []
        self.res = []
        self.helper(root, [], target, 0)
        return self.res
        
    def helper(self, root, tmp, target, cur):
        if root == None:
            return
        
        cur += root.val
        tmp.append(root.val)
        
        if target == cur and root.left == None and root.right == None:
            self.res.append(tmp[:])
    
        
        self.helper(root.left, tmp, target, cur)
        self.helper(root.right, tmp, target, cur)
        print(tmp)
        cur -= root.val     # Need to remove cur and pop tmp
        tmp.pop()
        
        
