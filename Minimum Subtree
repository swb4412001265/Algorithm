Lint596. Minimum Subtree

Description
Given a binary tree, find the subtree with minimum sum. Return the root of the subtree.

Example 1:

Input:
     1
   /   \
 -5     2
 / \   /  \
0   2 -4  -5
Output:1

Example 2:

1
2
Input:
   1
Output:1


Thoughts
Since it is a tree type problem, we can use BFS or DFS to solve it. Since it is looking for sum of subtree, 
hence, DFS is more appropriated. Lets use divide and conquer approch and recursive dfs to solve it first.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @return the root of the minimum subtree
     */
    int sum = INT_MAX;
    TreeNode* subTree = NULL;
    // return value is the subtree's sum
    int helper(TreeNode* root){
        if(root == NULL){
            return 0;
        }
        int tmp = helper(root->left) + helper(root->right) + root->val;
        //sum += left->val;
        if(tmp < sum){
            sum = tmp;
            subTree = root;
        }
        return tmp;
        
    }
    TreeNode* findSubtree(TreeNode* root) {
        // Write your code here
        if(root == NULL){
            return root;
        }
        helper(root);
        return subTree;
    }
    
};



/////////////////////////////////////////////////Python/////////////////////////////////////////////////////////////////////////////////
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @return: the root of the minimum subtree
    """
    import sys
    min = sys.maxint
    node = None
    
    def findSubtree(self, root):
        # write your code here
        if root is None:
            return root
        self.helper(root)
        return self.node
        
    def helper(self, root):
        if root is None:
            return 0
            
        left = self.helper(root.left)
        right = self.helper(root.right)
        sum = left + right + root.val
        if self.min >= sum:
            self.min = sum
            self.node = root
        return sum
        
//////////////////////////////////////////////////////////////////Maximum Subtree/////////////////////////////////////////////////////
628. Maximum Subtree
中文English
Given a binary tree, find the subtree with maximum sum. Return the root of the subtree.

Example
Example 1:

Input:
{1,-5,2,0,3,-4,-5}
Output:3
Explanation:
The tree is look like this:
     1
   /   \
 -5     2
 / \   /  \
0   3 -4  -5
The sum of subtree 3 (only one node) is the maximum. So we return 3.
Example 2:

Input:
{1}
Output:1
Explanation:
The tree is look like this:
   1
There is one and only one subtree in the tree. So we return 1.
Notice
LintCode will print the subtree which root is your return node.
It's guaranteed that there is only one subtree with maximum sum and the given binary tree is not an empty tree.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of binary tree
    @return: the maximum weight node
    """
    import sys
    def findSubtree(self, root):
        # write your code here
        
        self.max = -sys.maxsize
        self.node = None
        self.helper(root)
        return self.node
        
    def helper(self, root):
        if not root:
            return 0
        
        left = self.helper(root.left)
        right = self.helper(root.right)
        sum = left + right + root.val
        if sum > self.max:
            self.max = sum
            self.node = root
        return sum
            
