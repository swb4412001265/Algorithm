460. Find K Closest Elements

Given target, a non-negative integer k and an integer array A sorted in ascending order, 
find the k closest numbers to target in A, sorted in ascending order by the difference between the number and target. 
Otherwise, sorted in ascending order by number if the difference is same.

Example
Example 1:

Input: A = [1, 2, 3], target = 2, k = 3
Output: [2, 1, 3]
Example 2:

Input: A = [1, 4, 6, 8], target = 3, k = 3
Output: [4, 1, 6]
Challenge
O(logn + k) time

Notice
The value k is a non-negative integer and will always be smaller than the length of the sorted array.
Length of the given array is positive and will not exceed 10^410

Absolute value of elements in the array will not exceed 10^410

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A an integer array
     * @param target an integer
     * @param k a non-negative integer
     * @return an integer array
     */
    vector<int> kClosestNumbers(vector<int>& A, int target, int k) {
        // Write your code here
        vector<int> result;
        int m = A.size();
        if(m == 0){
            return result;
        }
        int start = 0;
        int end = m-1;
        while(start + 1 < end){
            int mid = (end - start)/2 + start;
            if(A[mid] < target){
                start = mid;
            }else if (A[mid] > target){
                end = mid;
            }else {
                end = mid;
            }
        }
        for(int i = 0;i<k;i++){
            if(end > m - 1){
                result.push_back(A[start]);
                start = start - 1;
            } else if(start < 0){
                result.push_back(A[end]);
                end = end + 1;
            } else {
                if(abs(A[start] - target) > abs(A[end] - target)){
                    result.push_back(A[end]);
                    end = end + 1;
                }else{
                    result.push_back(A[start]);
                    start = start - 1;
                }
            }
        }
        return result;    
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param A: an integer array
    @param target: An integer
    @param k: An integer
    @return: an integer array
    """
    def kClosestNumbers(self, A, target, k):
        # write your code here
        if not A:
            return []
        if k == 0:
            return []
        res = []
        diff = sys.maxsize
        start = 0
        end = len(A) - 1
        index = 0
        while start + 1 < end:
            mid = (start + end) // 2
            if A[mid] > target:
                end = mid
            else:
                start = mid
        
        if abs(A[start] - target) <= abs(A[end] - target):
            res.append(A[start])
            index = start
        else:
            res.append(A[end])
            index = end
            
        left = index - 1
        right = index + 1
        
        for i in range(k - 1):
            if left < 0:
                res.append(A[right])
                right += 1
            elif right > len(A) - 1:
                res.append(A[left])
                left -= 1
            elif abs(A[left] - target) <= abs(A[right] - target):
                res.append(A[left])
                left -= 1
            else:
                res.append(A[right])
                right += 1
        return res
        
            
        
            
