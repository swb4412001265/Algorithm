92. Backpack
Given n items with size Ai, an integer m denotes the size of a backpack. How full you can fill this backpack?

Example
If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select [2, 3, 5], so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.

You function should return the max size we can fill in the given backpack.

Challenge
O(n x m) time and O(m) memory.

O(n x m) memory is also acceptable if you do not know how to optimize memory.

Notice
You can not divide any item into small pieces.


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution:
    """
    @param m: An integer m denotes the size of a backpack
    @param A: Given n items with size A[i]
    @return: The maximum size
    """
    def backPack(self, m, A):
        # write your code here
        if not A:
            return 0
        n = len(A)
        f = [[False for i in range(m + 1)] for j in range(n + 1) ]    
        
        # f[i][j] defines that if first i items can define j, if yes return True 
        
        # f[0][0] = True
        for i in range(n+1):
            f[i][0] = True
        for i in range(1, n + 1):
            for j in range(m + 1):
            #if the previous i-1 items are able to create j or previous i-1 item can create j - A[i-1]
                if f[i - 1][j] is True or (j >= A[i-1] and f[i-1][j-A[i-1]] is True):
                    f[i][j] = True
        for i in range(m, -1, -1):
            if f[n][i] is True:
                return i
        return 0


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param m: An integer m denotes the size of a backpack
    @param A: Given n items with size A[i]
    @return: The maximum size
    """
    def backPack(self, m, A):
        # write your code here
        #define bp[i][j] as when there is i items the max size of itmes can put into backpack which volumn is j
        if not A:
            return 0
        n = len(A)
        bp = [[0 for i in range(m+1)] for i in range(n+1)]
        #intialization
        #bp[0][m] means no item and put into m size backpack so bp[0][m] should be 0
        #bp[n][0] also should be 0 since the backpack's size is 0
        #bp[i][j] should be considered as twp cases:
        #1. we do not need ith pick, so it should be bp[i][j] = bp[i-1][j]
        #2. we do need ith pick, so bp[i][j] = bp[i-1][j-A[i-1]] + A[i-1] here also j should be greater than A[i-1]
        #we need to pick the max(bp[i-1][j], bp[i-1][j-A[i-1]] + A[i-1])
        
        for i in range(1, n+1):
            for j in range(1, m+1):
                bp[i][j] = bp[i-1][j]
                if (j >= A[i-1]):
                    bp[i][j] = max(bp[i-1][j], bp[i-1][j-A[i-1]] + A[i-1])
        return bp[n][m]
        
