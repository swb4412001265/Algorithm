116. Jump Game

Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

Example
Example 1

Input : [2,3,1,1,4]
Output : true
Example 2

Input : [3,2,1,0,4]
Output : false
Notice
This problem have two method which is Greedy and Dynamic Programming.

The time complexity of Greedy method is O(n).

The time complexity of Dynamic Programming method is O(n^2).

We manually set the small data set to allow you pass the test in both ways. 
This is just to let you learn how to use this problem in dynamic programming ways. 
If you finish it in dynamic programming ways, you can try greedy method to make it accept again.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    bool canJump(vector<int> A) {
        // write you code here
        // define f[i] as if you are able to reach the index i from index 0
        int m = A.size();
        if (m == 0) {
            return false;
        }
        vector<bool> f(m);
        // the first step is true
        f[0] = true;
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < i; ++j) {
            // before f[i] which is f[j]:f[j] has to be true and A[j] has to be equal or greater than distance between i and j which is j -1
                if (f[j] == true && A[j] >= i - j) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[m-1];
    }
};


//////////////////////////////////////////////////////python////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param A: A list of integers
    @return: A boolean
    """
    def canJump(self, A):
        # write your code here
        # define f[x] as if able to move to index x
        if A == None or len(A) == 0:
            return False
        f = [False] * len(A)
        f[0] = True
        for i in range(len(A)):
            for j in range(i):
                if f[j] and j + A[j] >= i:
                    f[i] = True
                    break
        return f[-1]
        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param A: A list of integers
    @return: A boolean
    """
    def canJump(self, A):
        # write your code here
        # define dp[i] as it can or not reach index i
        if not A:
            return False
        dp = [False for _ in range(len(A))]
        dp[0] = True
        
        for i in range(len(A)):
            # make sure it can reach index i first
            if not dp[i]:
                continue
            for j in range(A[i] + 1):
                if i + j < len(A):
                    dp[i + j] = True
            
        return dp[-1]


/////////////////////////////////////////////////////II execeed time/////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param A: A list of integers
    @return: An integer
    """
    def jump(self, A):
        # write your code here
        
        if not A:
            return None
        dp = [sys.maxsize for _ in range(len(A))]
        dp[0] = 0
        for i in range(1, len(A)):
            for j in range(i):
                if dp[j] != sys.maxsize and j + A[j] >= i:
                    dp[i] = min(dp[i], dp[j] + 1)
                    break
        return dp[-1]
