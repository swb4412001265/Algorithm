/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param node a list node in the list
     * @param x an integer
     * @return the inserted new list node
     */
    ListNode* insert(ListNode* node, int x) {
        // Write your code here
        if(node == NULL) {
            ListNode * newNode = new ListNode(x);
            newNode->next = newNode;
            return newNode;
        }
        ListNode *curt = node;
        ListNode *prev = NULL;
        bool flag = false;
        do {
            prev = curt;
            curt = curt->next;
            if(prev->val < curt->val) {
                if(x >= prev->val && x <= curt->val) {
                    insertNode(prev, x);
                    flag = true;
                    break;
                }
            }else if(prev->val > curt->val) {
                if(x >= prev->val || x <= curt->val) {
                    insertNode(prev, x);
                    flag = true;
                    break;
                }
            }else {
                if(prev->val == x) {
                    insertNode(prev, x);
                    flag = true;
                    break;
                }
            }
        }while(curt != node);
        if(flag == false) {
            insertNode(node, x);
        }
        return node;
            
    }
    void insertNode(ListNode *node, int x) {
        ListNode *newNode = new ListNode(x);
        newNode->next = node->next;
        node->next = newNode;
    }
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */


class Solution {
public:
    /*
     * @param node: a list node in the list
     * @param x: An integer
     * @return: the inserted new list node
     */
    ListNode * insert(ListNode * node, int x) {
        // write your code here
        ListNode *tmp = new ListNode(x);
        ListNode *dummy = node;
        ListNode *prev = NULL;
        ListNode *later = NULL;
        if (node == NULL) {
            tmp->next = tmp;
            return tmp;
        }
        if (node->next == node) {
            node->next = tmp;
            tmp->next = node;
            return node;
        }
        
        do {
            if (node->val <= x && x <= node->next->val) {
                prev = node;
                later = node->next;
                break;
            } 
            else {
                node = node -> next;
            }
        } while (dummy != node);
        if(dummy == node) {
            tmp->next = node->next;
            node->next = tmp;
        } else {
            prev->next = tmp;
            tmp->next = later;
        }
        return dummy;
    }
};


/////////////////////////////////////////////////////////////Python///////////////////////////////////////////////////////////////////

"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""


class Solution:
    """
    @param: node: a list node in the list
    @param: x: An integer
    @return: the inserted new list node
    """
    def insert(self, node, x):
        # write your code here
        if node is None:
            tmpNode = ListNode(x)
            tmpNode.next = tmpNode
            return tmpNode
        
        if node.next is node:
            tmpNode = ListNode(x, node)
            node.next = tmpNode
            return tmpNode
        
        curt = node
        prev = None
        
        while True:
            prev = curt
            curt = curt.next
            # This condition is for x in the middle of prev and curt
            if prev.val <= x and curt.val >= x:
                break
            # This condition is for x is either the biggest or smallest
            # and should insert x into middle of prev and curt
            if (prev.val > curt.val) and (prev.val <= x or curt.val >= x):
                break
            # This is for all the nodes are the same like 2->2->2
            if curt is node:
                break
            
            
        tmpNode = ListNode(x)
        tmpNode.next = curt
        prev.next = tmpNode
        
        return tmpNode
