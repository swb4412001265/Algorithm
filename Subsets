17. Subsets
中文English
Given a set of distinct integers, return all possible subsets.

Example
Example 1:

Input: [0]
Output:
[
  [],
  [0]
]
Example 2:

Input: [1,2,3]
Output:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
Challenge
Can you do it in both recursively and iteratively?

Notice
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution:
    """
    @param nums: A set of numbers
    @return: A list of lists
    """
    def subsets(self, nums):
        # write your code here
        if len(nums) == 0:
            return [nums]
            
        self.res = []
        self.helper(sorted(nums), [], 0)
        return self.res
        
    def helper(self, nums, tmp, index):
        # if len(tmp) == 0:
        #     return
        self.res.append(tmp[:])
        for i in range(index, len(nums)):
            tmp.append(nums[i])
            self.helper(nums, tmp, i + 1)
            tmp.pop()
            
////////////////////////////Subset II////////////////////////////
class Solution:
    """
    @param nums: A set of numbers.
    @return: A list of lists. All valid subsets.
    """
    def subsetsWithDup(self, nums):
        # write your code here
        if len(nums) == 0:
            return [nums]
            
        self.res = []
        self.helper(sorted(nums), [], 0)
        return self.res
        
    
    def helper(self, nums, tmp, index):
        
        self.res.append(tmp[:])
        
        for i in range(index, len(nums)):
            if i != index and nums[i] == nums[i - 1]:
                continue
            tmp.append(nums[i])
            self.helper(nums, tmp, i + 1)
            tmp.pop()
