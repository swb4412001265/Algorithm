class Solution {
public:
    /*
     * @param n an integer
     * @return the nth prime number as description.
     */
    int nthUglyNumber(int n) {
        // write your code here
        vector<int> uglyArray;
        if(n <= 0) {
            return -1;
        }
        uglyArray.push_back(1);
        int i = 0;
        int j = 0;
        int z = 0;
        int minNum = 1;
        while(uglyArray.size() < n) {
            int m2 = uglyArray[i]*2;
            int m3 = uglyArray[j]*3;
            int m5 = uglyArray[z]*5;
            //everytime find the smallest num and put into vector, pick num from vector and calculate again
            minNum = min(min(m2, m3), m5);
            uglyArray.push_back(minNum);
            if(minNum == m2) {
                i++;
            }
            if(minNum == m3) {
                j++;
            }
            if(minNum == m5) {
                z++;
            }
        }
        return minNum;
    }
};



///////////////////////////////////////////////////nlogn solution/////////////////////////////////////////////////////////////////////
class Solution {
public:
    /*
     * @param n an integer
     * @return the nth prime number as description.
     */
    int nthUglyNumber(int n) {
        // write your code here
        set<int> uglyArray;
        priority_queue<int, vector<int>, greater<int>> queue;
        if(n <= 0) {
            return -1;
        }
        uglyArray.insert(1);
        queue.push(1);
        int result = 1;
        while(uglyArray.size() < n) {
            int tmp = queue.top();
            queue.pop();
            uglyArray.insert(tmp);
            result = tmp;
            queue.push(2*tmp);
            queue.push(3*tmp);
            queue.push(5*tmp);
        }
        /*
        int i = 0;
        set<int>::iterator it = uglyArray.begin();
        int result = 1;
        while(i < n) {
            result = *it;
            ++i;
            ++it;
        }
        */
        return result;
    }
};


/////////////////////////////////////////////////////python/////////////////////////////////////////////////////
class Solution:
    """
    @param n: An integer
    @return: the nth prime number as description.
    """
    def nthUglyNumber(self, n):
        # write your code here
        if n == 0:
            return 0
        if n == 1:
            return 1
        import heapq
        tmpSet = {1}
        tmp = [1]
        while len(tmpSet) < n:
            tmpVal = heapq.heappop(tmp)
            for i in [2, 3, 5]:
                heapq.heappush(tmp, tmpVal * i)
            tmpSet.add(tmpVal)
        return tmpVal
