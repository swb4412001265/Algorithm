945. Task Scheduler
中文English
Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

Example
Example1

Input: tasks = ['A','A','A','B','B','B'], n = 2
Output: 8
Explanation:
A -> B -> idle -> A -> B -> idle -> A -> B.
Example2

Input: tasks = ['A','A','A','B','B','B'], n = 1
Output: 6
Explanation:
A -> B -> A -> B -> A -> B.
Notice
The number of tasks is in the range [1, 10000].
The integer n is in the range [0, 100].
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param tasks: the given char array representing tasks CPU need to do
    @param n: the non-negative cooling interval
    @return: the least number of intervals the CPU will take to finish all the given tasks
    """
    def leastInterval(self, tasks, n):
        # write your code here
        if not tasks:
            return 0
        if n == 0:
            return len(tasks)
        tmpDict = {}
        tmpMax = 0
        for i in tasks:
            if i not in tmpDict:
                tmpDict[i] = 1
            else:
                tmpDict[i] += 1
            tmpMax = max(tmpMax, tmpDict[i])
        count = 0
        for i in tmpDict.values():
            if i == int(tmpMax):
                count += 1
        
        # tmp = collections.Counter(tasks)
        # countList = list(tmp.values())
        # longest = max(countList)
        # count = countList.count(longest)
        
        return max(n * tmpMax + count, len(tasks))
