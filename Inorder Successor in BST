448. Inorder Successor in BST

Given a binary search tree (See Definition) and a node in it, find the in-order successor of that node in the BST.

If the given node has no in-order successor in the tree, return null.

Example
Example 1:

Input: {1,#,2}, node with value 1
Output: 2
Explanation:
  1
   \
    2
Example 2:

Input: {2,1,3}, node with value 1
Output: 2
Explanation: 
    2
   / \
  1   3
Binary Tree Representation

Challenge
O(h), where h is the height of the BST.

Notice
It's guaranteed p is one node in the given tree. (You can directly compare the memory address to find p)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
        // write your code here
        TreeNode *successor = NULL;
        //return root which is equal 
        while((root != NULL) && (root->val != p->val)){
            if(root->val > p->val){
                successor = root;
                root = root->left;
            } else {
                root = root -> right;
            }
        }
        //case 1, no p
        if(root == NULL){
            return root;
        }
        //case 2, root does not have right subtree
        if(root->right == NULL){
            return successor;
        }
        //case3, root has right subtree and return the most left node of subtree
        root = root->right;
        while( root->left!=NULL ){
            root = root->left;
        }
        return root;
    }
};
