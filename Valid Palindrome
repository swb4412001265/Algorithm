415. Valid Palindrome

Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Example
Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama"
Example 2:

Input: "race a car"
Output: false
Explanation: "raceacar"
Challenge
O(n) time without extra memory.

Notice
Have you consider that the string might be empty? This is a good question to ask during an interview.

For the purpose of this problem, we define empty string as valid palindrome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param s A string
     * @return Whether the string is a valid palindrome
     */
    bool isPalindrome(string& s) {
        // Write your code here
        if(s.size() == 0) {
            return true;
        }
        bool mark = false;
        string tmp = s;
        for(int i = 0; i < tmp.size(); ++i) {
            if(!isalnum(tmp[i])) {
                tmp.erase(tmp.begin() + i);
                i--;
            } else {
                tmp[i] = tolower(tmp[i]);
            }
        }
        int start = 0;
        int end = tmp.size() - 1;
        bool flag = true;
        while(start < end) {
            if(tmp[start] != tmp[end]) {
                flag = false;
                break;
            }
            start++;
            end--;
        }
        return flag;
    }
};


///////////////////////////////////////////////Python////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: A string
    @return: Whether the string is a valid palindrome
    """
    def isPalindrome(self, s):
        # write your code here
        # if len(s) == 0 or len(s) == 1:
        #     return True
        start = 0
        end = len(s) - 1
        while start < end:
            while start < end and s[start].isalnum() == False:
                start = start + 1
            while start < end and s[end].isalnum() == False:
                end = end - 1
            if start < end and s[start].lower() != s[end].lower():
                return False
            start = start + 1
            end = end - 1
        return True
    
