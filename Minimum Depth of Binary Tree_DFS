/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: An integer
     */
    int tmp = INT_MAX;
    int minDepth(TreeNode *root) {
        // write your code here
        if (root == NULL) {
            return 0;
        }
    //    start from 1 since if only root is also 1 depth
        helper(root, 1);
        return tmp;
    }
    void helper(TreeNode *root, int depth) {
        if (root == NULL) {
            return;
        }
        if (root->left == NULL && root->right == NULL) {
            tmp = min(depth, tmp);
            depth = 0;
        }
        helper(root->left, depth + 1);
        helper(root->right, depth + 1);
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: An integer
     */
    int tmp = INT_MIN;
    int maxDepth(TreeNode *root) {
        // write your code here
        if (root == NULL) {
            return 0;
        }
    //    start from 1 since if only root is also 1 depth
        helper(root, 1);
        return tmp;
    }
    void helper(TreeNode *root, int depth) {
        if (root == NULL) {
            return;
        }
        if (root->left == NULL && root->right == NULL) {
            tmp = max(depth, tmp);
        }
        helper(root->left, depth + 1);
        helper(root->right, depth + 1);
    }
};


///////////////////////////////minimum Depth Python///////////////////////////////////////////
155. Minimum Depth of Binary Tree
Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Example
Given a binary tree as follow:

  1
 / \ 
2   3
   / \
  4   5  
The minimum depth is 2.



"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: The root of binary tree
    @return: An integer
    """
    def minDepth(self, root):
        # write your code here
        if root == None:
            return 0
        left = self.minDepth(root.left)
        right = self.minDepth(root.right)
        if root.left and root.right:
            return min(left, right) + 1
        else:
            return max(left, right) + 1
        
        
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: The root of binary tree
    @return: An integer
    """
    def minDepth(self, root):
        # write your code here
        if not root:
            return 0
        self.res = sys.maxsize
        self.helper(root, 1)
        return self.res
        
        
    def helper(self, root, depth):
        if not root:
            return
        if not root.left and not root.right:
            self.res = min(self.res, depth)
        self.helper(root.left, depth + 1)
        self.helper(root.right, depth + 1)
