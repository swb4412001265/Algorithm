637. Valid Word Abbreviation

Given a non-empty string word and an abbreviation abbr, return whether the string matches with the given abbreviation.

A string such as "word" contains only the following valid abbreviations:

["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Example
Example 1:

Input : s = "internationalization", abbr = "i12iz4n"
Output : true
Example 2:

Input : s = "apple", abbr = "a2e"
Output : false
Notice
Notice that only the above abbreviations are valid abbreviations of the string word. Any other string is not a valid abbreviation of word.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param word: a non-empty string
    @param abbr: an abbreviation
    @return: true if string matches with the given abbr or false
    """
    def validWordAbbreviation(self, word, abbr):
        # write your code here
        if word == None or abbr == None:
            return False
        i = 0
        j = 0
        s = len(word)
        d = len(abbr)
        
        while i < s and j < d:
            if abbr[j] == str(0):
                return False
            if abbr[j].isdigit():
                tmp = ""
                while j < d and abbr[j].isdigit():
                    tmp += abbr[j]
                    j += 1
                i += int(tmp)
            else:
                if word[i] != abbr[j]:
                    return False
                else:
                    i += 1
                    j += 1
        return i == s and j == d
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param word: a non-empty string
    @param abbr: an abbreviation
    @return: true if string matches with the given abbr or false
    """
    def validWordAbbreviation(self, word, abbr):
        # write your code here
        if len(word) < len(abbr):
            return False
        i = 0
        j = 0
        while i < len(word) and j < len(abbr):
            if abbr[j].isalpha() and abbr[j] == word[i]:
                i += 1
                j += 1
            elif abbr[j].isdigit():
                tmp_string = ""
                while j < len(abbr) and abbr[j].isdigit():
                    tmp_string += abbr[j]
                    j += 1
                i += int(tmp_string)
            else:
                return False
        
        if i == len(word) and j == len(abbr):
            return True
        return False
