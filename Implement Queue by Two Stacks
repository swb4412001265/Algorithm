40. Implement Queue by Two Stacks
中文English
As the title described, you should only use two stacks to implement a queue's actions.

The queue should support push(element), pop() and top() where pop is pop the first(a.k.a front) element in the queue.

Both pop and top methods should return the value of first element.

Example
Example 1:

Input:
    push(1)
    pop()    
    push(2)
    push(3)
    top()    
    pop()     
Output:
    1
    2
    2
Example 2:

Input:
    push(1)
    push(2)
    push(2)
    push(3)
    push(4)
    push(5)
    push(6)
    push(7)
    push(1)
Output:
[]
Challenge
implement it by two stacks, do not use any other data structure and push, pop and top should be O(1) by AVERAGE.

Notice
Suppose the queue is not empty when the pop() function is called.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MyQueue:
    
    def __init__(self):
        # do intialization if necessary
        self.stack1 = []
        self.stack2 = []

    """
    @param: element: An integer
    @return: nothing
    """
    def adjust(self):
        if len(self.stack2) == 0:
            while len(self.stack1) != 0:
                self.stack2.append(self.stack1.pop())
                
    def push(self, element):
        # write your code here
        self.stack1.append(element)

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        self.adjust()
        return self.stack2.pop()
    """
    @return: An integer
    """
    def top(self):
        # write your code here
        self.adjust()
        return self.stack2[-1]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MyQueue:
    
    def __init__(self):
        # do intialization if necessary
        self.stack1 = []
        self.stack2 = []

    """
    @param: element: An integer
    @return: nothing
    """
    def push(self, element):
        # write your code here
        self.stack1.append(element)

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        return self.stack1.pop(0)
    """
    @return: An integer
    """
    def top(self):
        # write your code here
        return self.stack1[0]

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MyQueue:
    
    def __init__(self):
        # do intialization if necessary
        self.stack1 = []
        self.stack2 = []
        self.tmp = None
    """
    @param: element: An integer
    @return: nothing
    """
    def push(self, element):
        # write your code here
        if len(self.stack1) == 0:
            self.tmp = element    
        self.stack1.append(element)
        

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        if len(self.stack2) != 0:
            return self.stack2.pop()
        else:
            while len(self.stack1) > 1:
                self.tmp = self.stack1.pop()
                self.stack2.append(self.tmp)
            tmp = self.stack1.pop()
            # self.stack1, self.stack2 = self.stack2, self.stack1
            return tmp
            
    """
    @return: An integer
    """
    def top(self):
        # write your code here
        if len(self.stack2) != 0:
            return self.stack2[-1]
        else:
            return self.tmp

///////////////////////////////////////////python///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MyQueue:
    def __init__(self, ):
        # do intialization if necessary
        self.stack1 = []
        self.stack2 = []

    """
    @param: element: An integer
    @return: nothing
    """
    def push(self, element):
        # write your code here
        self.stack1.append(element)

    """
    @return: An integer
    """
    def pop(self, ):
        # write your code here
        self.top()
        return self.stack2.pop()
        

    """
    @return: An integer
    """
    def top(self, ):
        # write your code here
        if not self.stack2:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        
        return self.stack2[-1]
