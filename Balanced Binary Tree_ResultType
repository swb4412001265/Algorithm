/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class resultType {
    public:
        bool isBT;
        int heightBT;
        resultType(bool isBT, int heightBT) {
            this->isBT = isBT;
            this->heightBT = heightBT;
        }
};
class Solution {
public:
    /**
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    bool isBalanced(TreeNode *root) {
        // write your code here
        if (root == NULL) {
            return true;
        }
        return helper(root).isBT;
        
    }
    resultType helper(TreeNode *root) {
        resultType tmp(false, 0);
        if (root == NULL) {
            tmp.isBT = true;
            tmp.heightBT = 0;
            return tmp;
        }
        resultType left = helper(root->left);
        resultType right = helper(root->right);
        
        if(left.isBT == false || right.isBT == false || abs(left.heightBT - right.heightBT) > 1) {
            tmp.isBT = false;
            tmp.heightBT = 0;
            return tmp;
        } else {
            tmp.isBT = true;
            tmp.heightBT = max(left.heightBT, right.heightBT) + 1;
            return tmp;
        }
    }
};

//////////////////////////////////////////////////////////////
