139. Subarray Sum Closest
Given an integer array, find a subarray with sum closest to zero. Return the indexes of the first number and last number.

Example
Given [-3, 1, 1, -3, 5], return [0, 2], [1, 3], [1, 1], [2, 2] or [0, 4].

Challenge
O(nlogn) time


/////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    vector<int> subarraySumClosest(vector<int> nums){
        // write your code here
        vector<pair<int, int> > hash;
        vector<int> result;
        hash.push_back(make_pair(0,-1));
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            hash.push_back(make_pair(sum,i));
        }
        sort(hash.begin(),hash.end());
        int tmpIndex1;
        int tmpIndex2;
        int MIN = INT_MAX;
        for(int i = 1; i<hash.size(); i++){
            int tmp;
            tmp = abs(hash[i].first - hash[i-1].first);
            if(tmp <= MIN){
                MIN = tmp;
                tmpIndex1 = hash[i-1].second;
                tmpIndex2 = hash[i].second;
            }
        }
        result.push_back(min(tmpIndex1, tmpIndex2) + 1);
        result.push_back(max(tmpIndex1, tmpIndex2));
        return result;   
    }
};

////////////////////////////////////////////python///////////////////////////////////////////////////////
class Solution:
    """
    @param: nums: A list of integers
    @return: A list of integers includes the index of the first number and the index of the last number
    """
    def subarraySumClosest(self, nums):
        # write your code here
        if nums == None:
            return None
        if len(nums) == 0:
            return 0, 0
        
        prefixSum = 0
        tmpList = [(0, -1)]
        for i in range(len(nums)):
            prefixSum += nums[i]
            tmpList.append((prefixSum, i))
        
        tmpList.sort()    
        print(tmpList)
        tmpMin = sys.maxsize
        
        for i in range(1, len(tmpList)):
            if tmpMin > tmpList[i][0] - tmpList[i - 1][0]:
                tmpMin = tmpList[i][0] - tmpList[i - 1][0]
                resI = min(tmpList[i][1], tmpList[i - 1][1]) + 1
                resJ = max(tmpList[i][1], tmpList[i - 1][1])
        return resI, resJ
        


///////////////////////////////////////To be continued//////////////////////////////////////////////////
class Solution:
    """
    @param: nums: A list of integers
    @return: A list of integers includes the index of the first number and the index of the last number
    """
    def subarraySumClosest(self, nums):
        # write your code here
        if nums == None:
            return None
        if len(nums) == 0:
            return 0, 0
        
        prefixSum = 0
        tmpDict = {0: -1}
        for i in range(len(nums)):
            prefixSum += nums[i]
            tmpDict[prefixSum] = i
            
        tmpDict = dict(sorted(tmpDict.items(), key = lambda kv: kv[0]))
        tmpKey = list(tmpDict.keys())
        
        tmpMin = sys.maxsize
        resI = 0
        resJ = 0
        resTmp = []
        for i in range(1, len(tmpKey)):
            if tmpMin >= tmpKey[i] - tmpKey[i - 1]:
                tmpMin = tmpKey[i] - tmpKey[i - 1]
                resI = min(tmpDict[tmpKey[i]], tmpDict[tmpKey[i - 1]]) + 1
                resJ = max(tmpDict[tmpKey[i]], tmpDict[tmpKey[i - 1]])
                resTmp.append((resI, resJ))
        for i in range(len(resTmp) - 1, -1, -1):
            if resTmp[i][0] != resTmp[i][1]:
                return resTmp[i][0], resTmp[i][1]
        
