https://leetcode.com/problems/implement-stack-using-queues/
225. Implement Stack using Queues
Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Example:

MyStack stack = new MyStack();

stack.push(1);
stack.push(2);  
stack.top();   // returns 2
stack.pop();   // returns 2
stack.empty(); // returns false
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        from queue import Queue
        self.q1 = Queue()
        self.q2 = Queue()
        
    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.q1.put(x)
        

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        while self.q1.qsize() > 1:
            tmp = self.q1.get()
            self.q2.put(tmp)
        tmp = self.q1.get()
        self.q1, self.q2 = self.q2, self.q1
        return tmp

    def top(self) -> int:
        """
        Get the top element.
        """
        while self.q1.qsize() > 0:
            tmp = self.q1.get()
            self.q2.put(tmp)
        self.q1, self.q2 = self.q2, self.q1
        return tmp

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        if self.q1.empty():
            return True
        return False


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()
