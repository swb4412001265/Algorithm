423. Valid Parentheses

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.

Example
Example 1:

Input: "([)]"
Output: False
Example 2:

Input: "()[]{}"
Output: True
Challenge
Use O(n) time, n is the number of parentheses.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: s: A string
    @return: whether the string is a valid parentheses
    """
    def isValidParentheses(self, s):
        # write your code here
        stack = []
        for c in s:
            if c in ['(', '{', '[']:
                stack.append(c)
                continue
            if len(stack) == 0:
                return False
            if c == ')' and stack[-1] != '(':
                return False
            if c == ']' and stack[-1] != '[':
                return False
            if c == '}' and stack[-1] != '{':
                return False
            stack.pop(len(stack) - 1)
        
        if len(stack) == 0:
            return True
        else:
            return False


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: A string
    @return: whether the string is a valid parentheses
    """
    def isValidParentheses(self, s):
        # write your code here
        tmp = []
        for i in s:
            if i == ']':
                if len(tmp) == 0 or tmp[-1] != '[':
                    return False
                else:
                    tmp.pop()
                    continue
            if i == ')':
                if len(tmp) == 0 or tmp[-1] != '(':
                    return False
                else:
                    tmp.pop()
                    continue
            if i == '}':
                if len(tmp) == 0 or tmp[-1] != '{':
                    return False
                else:
                    tmp.pop()
                    continue
            tmp.append(i)
        print(tmp)
        if len(tmp) != 0:
            return False
        return True
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: A string
    @return: whether the string is a valid parentheses
    """
    def isValidParentheses(self, s):
        # write your code here
        if not s:
            return True
        if len(s) == 1:
            return False
        stack = []
        for i in s:
            if not stack and (i == "}" or i == ")" or i == "]"):
                return False
            if i == ")" and stack[-1] != "(":
                return False
            if i == "]" and stack[-1] != "[":
                return False
            if i == "}" and stack[-1] != "{":
                return False
            if i == "}" or i == ")" or i == "]":
                stack.pop()
            else:
                stack.append(i)
        if not stack:
            return True
        else:
            return False
