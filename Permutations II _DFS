16. Permutations II
中文English
Given a list of numbers with duplicate number in it. Find all unique permutations.

Example
Example 1:

Input: [1,1]
Output:
[
  [1,1]
]
Example 2:

Input: [1,2,2]
Output:
[
  [1,2,2],
  [2,1,2],
  [2,2,1]
]
Challenge
Using recursion to do it is acceptable. If you can do it without recursion, that would be great!
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        int n_size = nums.size();
        vector<vector<int> > result;
        vector<int> tmp;
        if(n_size == 0) {
            result.push_back(tmp);
            return result;
        }
        vector<int> visited(n_size, false);
        DFS(result, tmp, visited, nums);
        return result;
    }
    void DFS(vector<vector<int>> &result, vector<int> tmp, vector<int> visited, vector<int> nums) {
        int n_size = nums.size();
        if(tmp.size() == n_size){
            result.push_back(tmp);
        }
        for(int i = 0; i < n_size; ++i) {
            if(visited[i] == true) {
                continue;
            }
            if(i != 0 && nums[i] == nums[i - 1] && visited[i - 1] == false) {
                continue;
            }
            tmp.push_back(nums[i]);
            visited[i] = true;
            DFS(result, tmp, visited, nums);
            visited[i] = false;
            tmp.pop_back();
        }
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: :  A list of integers
    @return: A list of unique permutations
    """

    def permuteUnique(self, nums):
        if not nums:
            return [[]]
        self.res = []
        visited = [False for _ in range(len(nums))]
        nums.sort()
        self.helper(nums, [], visited)
        return self.res
    
    def helper(self, nums, tmpList, visited):
        if len(tmpList) == len(nums):
            self.res.append(tmpList[:])
        
        for i in range(len(nums)):
            if i > 0 and nums[i] == nums[i - 1] and visited[i - 1] == False:
                continue
            if visited[i] == False:
                visited[i] = True
                tmpList.append(nums[i])
                self.helper(nums, tmpList,visited)
                tmpList.pop()
                visited[i] = False
        
