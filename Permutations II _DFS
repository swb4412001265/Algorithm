class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        int n_size = nums.size();
        vector<vector<int> > result;
        vector<int> tmp;
        if(n_size == 0) {
            result.push_back(tmp);
            return result;
        }
        vector<int> visited(n_size, false);
        DFS(result, tmp, visited, nums);
        return result;
    }
    void DFS(vector<vector<int>> &result, vector<int> tmp, vector<int> visited, vector<int> nums) {
        int n_size = nums.size();
        if(tmp.size() == n_size){
            result.push_back(tmp);
        }
        for(int i = 0; i < n_size; ++i) {
            if(visited[i] == true) {
                continue;
            }
            if(i != 0 && nums[i] == nums[i - 1] && visited[i - 1] == false) {
                continue;
            }
            tmp.push_back(nums[i]);
            visited[i] = true;
            DFS(result, tmp, visited, nums);
            visited[i] = false;
            tmp.pop_back();
        }
    }
};
