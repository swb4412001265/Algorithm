104. Merge K Sorted Lists
中文English
Merge k sorted linked lists and return it as one sorted list.

Analyze and describe its complexity.

Example
Example 1:
	Input:   [2->4->null,null,-1->null]
	Output:  -1->2->4->null

Example 2:
	Input: [2->6->null,5->null,7->null]
	Output:  2->5->6->7->null
/////////////////////////////////////////////////////O(nlogk)///////////////////////////////////////////////////////////////////////
/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
     
     ListNode *DC(vector<ListNode *>&lists ,int start, int end){
         if(start == end){
             return lists.at(start);
         }
         //start = 0;
         //end = size(lists) - 1;
         int mid = (end - start)/2 + start;
         ListNode *left = DC(lists, start, mid);
         ListNode *right = DC(lists, mid+1, end);
         merge(left, right);
     }
     
     ListNode *merge(ListNode *left, ListNode *right){
         ListNode *dummy = new ListNode(0);
         ListNode *tmp = dummy;
         while(left != NULL && right != NULL){
            if(left->val < right->val){
                tmp->next = left;
                left = left->next; 
            } else {
                tmp->next = right;
                right = right->next;
            }
            tmp = tmp->next;
         }
         if(left != NULL){
            tmp->next = left;
         } else {
            tmp->next = right;     
         }
         return dummy->next;
     }
     
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if(lists.size() == 0){
            return NULL;
        }
        return DC(lists, 0, lists.size()-1);
    }
};


////////////////////////////////////////////python//////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if not lists:
            return None
        tmpList = []
        for i in lists:
            while i != None:
                tmpList.append(i.val)
                i = i.next
        tmpList.sort()
        
        dummy = ListNode(-1)
        tmpNode = dummy
        
        
        for i in tmpList:
            tmpNode.next = ListNode(i)
            tmpNode = tmpNode.next
            
        return dummy.next
        

///////////////////////////////Using Heap////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
import heapq

class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if not lists:
            return None
        heap = []
        dummy = ListNode(-1)
        head = dummy
        
        for i in lists:
            while i:
                heapq.heappush(heap, i.val)
                i = i.next
                
        while len(heap) != 0:
	# while heap: is better
            head.next = ListNode(heapq.heappop(heap))
            head = head.next
            
        return dummy.next

///////////////////////////////////////////Heap/////O(nlogk)///////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
import heapq

# overwrite the compare function 
# so that we can directly put ListNode into heapq
ListNode.__lt__ = lambda x, y: (x.val < y.val)

class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if not lists:
            return None
        heap = []
        dummy = ListNode(-1)
        head = dummy
        
        for i in lists:
            if i:
                heapq.heappush(heap, i)
                
        while heap:
            tail = heapq.heappop(heap)
            head.next = tail
            head = head.next
            if tail.next:
                heapq.heappush(heap, tail.next)
        return dummy.next
            

            
////////////////////////////////////Divided Conquer//////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if not lists:
            return None
        return self.divideAndMerge(lists, 0, len(lists) - 1)
        
    
    def divideAndMerge(self, lists, start, end):
        if start == end:
            return lists[start]
        mid = (start + end) // 2
        left = self.divideAndMerge(lists, start, mid)
        right = self.divideAndMerge(lists, mid + 1, end)
        return self.mergeTwoSortedList(left, right)
    
    def mergeTwoSortedList(self, head1, head2):
        if not head1:
            return head2
        if not head2:
            return head1
        dummy = ListNode(-1)
        head = dummy
        while head1 and head2:
            if head1.val < head2.val:
                head.next = head1
                head = head.next
                head1 = head1.next
            else:
                head.next = head2
                head = head.next
                head2 = head2.next
                
        if head1:
            head.next = head1
        if head2:
            head.next = head2
            
        return dummy.next
        

///////////////////////////////////////////////Two two merge////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        if not lists:
            return None
        while len(lists) > 1:
            tmpList = []
            for i in range(0, len(lists), 2):
                if i + 1 < len(lists):
                    tmpList.append(self.mergeTwoSortedList(lists[i], lists[i + 1]))
                else:
                    tmpList.append(lists[-1])
            lists = tmpList
        return lists[0]       
    
    def mergeTwoSortedList(self, head1, head2):
        if not head1:
            return head2
        if not head2:
            return head1
        dummy = ListNode(-1)
        head = dummy
        while head1 and head2:
            if head1.val < head2.val:
                head.next = head1
                head = head.next
                head1 = head1.next
            else:
                head.next = head2
                head = head.next
                head2 = head2.next
                
        if head1:
            head.next = head1
        if head2:
            head.next = head2
            
        return dummy.next
        

