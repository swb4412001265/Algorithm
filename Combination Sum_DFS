35. Combination Sum
Given a set of candidtate numbers candidates and a target number target. 
Find all unique combinations in candidates where the numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Example
Example 1:

Input: candidates = [2, 3, 6, 7], target = 7
Output: [[7], [2, 2, 3]]
Example 2:

Input: candidates = [1], target = 3
Output: [[1, 1, 1]]
Notice
All numbers (including target) will be positive integers.
Numbers in a combination a1, a2, … , ak must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak)
Different combinations can be in any order.
The solution set must not contain duplicate combinations.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // write your code here
        vector<vector<int> > result;
        vector<int> tmp;
        if(candidates.size() == 0) {
            return result; 
        }
        removeAndSortNums(candidates);
        helper(result, candidates, tmp, 0, target);
        return result;
        
    }
    void removeAndSortNums(vector<int> &candidates) {
        sort(candidates.begin(),candidates.end());
        for(int i = 0; i < candidates.size() - 1; ++i) {
            if(candidates[i] == candidates[i + 1]) {
                candidates.erase(candidates.begin() + i);
                i--;
            }
        }
    }
    
    void helper(vector<vector<int> > &result, 
                vector<int> candidates,
                vector<int> &tmp,
                int startIndex,
                int restTarget) {
        if(restTarget == 0) {
            result.push_back(tmp);    
        }
        for(int i = startIndex; i < candidates.size(); ++i) {
            if(candidates[i] > restTarget) {
                break;
            }
            tmp.push_back(candidates[i]);
            helper(result, candidates, tmp, i, restTarget - candidates[i]);
            tmp.pop_back();
        }
    }
};
////////////////////////////////////////////python//////////////////////////////////////////////
class Solution:
    """
    @param candidates: A list of integers
    @param target: An integer
    @return: A list of lists of integers
    """
    def combinationSum(self, candidates, target):
        # write your code here
        if not candidates:
            return []
        self.res = []
        candidates = sorted(list(set(candidates)))
        self.helper(candidates, [], target, 0)
        return self.res
        
    def helper(self, candidates, tmp, target, index):
        if target < 0:
            return
        if not target:
            self.res.append(tmp[:])

        for i in range(index, len(candidates)):
            if candidates[i] > target:
                break
            tmp.append(candidates[i])
            self.helper(candidates, tmp, target - candidates[i], i)
            tmp.pop()


/////////////////////////////////////////////follow up /////////////////////////////////////////////////////////
class Solution {
public:
	/**
	 * @param num: Given the candidate numbers
	 * @param target: Given the target number
	 * @return: All the combinations that sum to target
	 */
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        // write your code here
        vector<vector<int> > result;
        vector<int> tmp;
        if(num.size() == 0) {
            return result; 
        }
        sort(num.begin(), num.end());
        helper(result, num, tmp, 0, target);
        return result;
    } 
    
    void helper(vector<vector<int> > &result, 
                vector<int> candidates,
                vector<int> &tmp,
                int startIndex,
                int restTarget) {
        if(restTarget == 0) {
            result.push_back(tmp);    
        }

        for(int i = startIndex; i < candidates.size(); ++i) {
            if(candidates[i] > restTarget) {
                break;
            }
            //没有循环到 i,而是跳到了下一个i， 并且前后相等
            if(i != startIndex && candidates[i] == candidates[i - 1]) {
                continue;
            }
            tmp.push_back(candidates[i]);
            helper(result, candidates, tmp, i + 1, restTarget - candidates[i]);
            tmp.pop_back();
        }
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param num: Given the candidate numbers
    @param target: Given the target number
    @return: All the combinations that sum to target
    """
    def combinationSum2(self, num, target):
        # write your code here
        if not num:
            return []
        self.res = []
        self.DFS(sorted(num), target, 0, [])
        return self.res

    
    def DFS(self, num, target, index, tmp):
        if target < 0:
            return
        if target == 0:
            self.res.append(tmp[:])
        for i in range(index, len(num)):
            if num[i] > target:
                break
            if index != i and num[i] == num[i - 1]:
                continue
            tmp.append(num[i])
            self.DFS(num, target - num[i], i + 1, tmp)
            tmp.pop()
