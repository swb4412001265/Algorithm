class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: An integer denotes the middle number of the array.
     */
    int median(vector<int> &nums) {
        // write your code here
        int k = (nums.size() + 1) / 2;
        priority_queue<int> que;
        int len = nums.size();
        for(int i = 0; i < len; i ++) {
            if(que.size() == k) {
                if(nums[i] < que.top()) {
                    que.pop();
                    que.push(nums[i]);
                }
            }else {
                que.push(nums[i]);
            }
        }
        return que.top();
    }
};

/////////////////////////////////////////////////////////python///////////////////////////////////
import queue as Q
class Solution:
    """
    @param nums: A list of integers
    @return: An integer denotes the middle number of the array
    """
    def median(self, nums):
        # write your code here
        if nums == None:
            return None
        size = len(nums)
        if size == 0:
            return None
        if size == 1:
            return nums[0]
            
        k = int((size + 1) / 2)
        pq = Q.PriorityQueue()
        for i in range(size):
            pq.put(nums[i])
        res = 0
        for _ in range(k):
            res = pq.get()
                    
        return res
        
//////////////////////////////////////////////////////////////////////////////
import queue as Q
class Solution:
    """
    @param nums: A list of integers
    @return: An integer denotes the middle number of the array
    """
    def median(self, nums):
        # write your code here
        if nums == None:
            return None
        size = len(nums)
        if size == 0:
            return None
        if size == 1:
            return nums[0]
            
        # For python, int(5/2) = 2.
        # When size is even the pick window should contain the previous number
        k = int((size + 2) / 2)
        pq = Q.PriorityQueue()
        for i in range(size):
            if pq.qsize() == k:
                tmp = pq.get()
                if nums[i] > tmp:
                    pq.put(nums[i])
                else:
                    pq.put(tmp)
            else:
                pq.put(nums[i])
        return pq.get()
                    
                   
  //////////////////////////////By using heapq///////////////////////////////////////////////////////////
  import heapq
class Solution:
    """
    @param nums: A list of integers
    @return: An integer denotes the middle number of the array
    """
    def median(self, nums):
        # write your code here
        if nums == None:
            return None
        size = len(nums)
        if size == 0:
            return None
        if size == 1:
            return nums[0]
            
        k = int((size + 1) / 2)
        tmp = heapq.nsmallest(k, nums)
        return tmp[-1]
                    
 //////////////////////////////////////////////////quick sort partition///////////////////////////////////////////////////////////////
 class Solution:
    """
    @param nums: A list of integers
    @return: An integer denotes the middle number of the array
    """
    def median(self, nums):
        # write your code here

        mid = (len(nums) + 1) // 2
        # here mid is the midth number in the array.
        # in the nums, it should be nums[mid - 1], so we have mid - 1.
        
        return self.helper(nums, 0, len(nums) - 1, mid - 1)
        
    
    def helper(self, nums, start, end, mid):
        if start == end:
            return nums[mid]
        
        left, right = start, end
        pivot = nums[(left + right) // 2]
        
        while left <= right:
            while left <= right and pivot > nums[left]:
                left += 1
            while left <= right and pivot < nums[right]:
                right -= 1
            if left <= right:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
                right -= 1
                
            if right >= mid:
                self.helper(nums, start, right, mid)
            if left <= mid:
                self.helper(nums, left, end, mid)
        return nums[mid]
