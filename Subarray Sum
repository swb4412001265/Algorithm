138. Subarray Sum
Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.

Example
Given [-3, 1, 2, -3, 4], return [0, 2] or [1, 3].

Notice
There is at least one subarray that it's sum equals to zero.

////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    vector<int> subarraySum(vector<int> nums){
        unordered_map<int, int> hash;
        //vector<int> result;
        int sum = 0;
        hash[0] = -1;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (hash.find(sum) != hash.end()) {
                vector<int> result;
                result.push_back(hash[sum] + 1);
                result.push_back(i);
                return result;
            }
            hash[sum] = i;
        }
        
        //vector<int> result;
        //return result;
    }
};


//Better solution

class Solution {
public:
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    vector<int> subarraySum(vector<int> nums){
        // write your code here
        //pair<int, int> node;
        vector<pair<int, int> > hash;
        vector<int> result;
        hash.push_back(make_pair(0,-1));
        int sum = 0;
        for(int i = 0; i < nums.size(); i++){
            sum += nums[i];
            hash.push_back(make_pair(sum,i));
        }
        sort(hash.begin(),hash.end());
        int tmpIndex1;
        int tmpIndex2;
        for(int i = 1; i<hash.size() ; i++){
            if(hash[i].first == hash[i-1].first){
                tmpIndex1 = min(hash[i].second,hash[i-1].second) + 1;
                tmpIndex2 = max(hash[i].second,hash[i-1].second);
            }
        }
        result.push_back(tmpIndex1);
        result.push_back(tmpIndex2);
        return result;
    }
};


/////////////////////////////////////////////////////////Python//////////////////////////////////////////
class Solution:
    """
    @param nums: A list of integers
    @return: A list of integers includes the index of the first number and the index of the last number
    """
    def subarraySum(self, nums):
        # write your code here
        if nums == None:
            return []
        if len(nums) == 0:
            return []
        prefixSum = 0
        # define tmp as hashmap to store prefixSum
        # if there is two prefixSum is the same, that means
        # there is subarraySum is equal 0
        # prefixSum(i ~ j) = prefixSum[j] - prefixSum[i - 1]
        tmp = {0:-1}
        for i in range(len(nums)):
            prefixSum += nums[i]
            if prefixSum in tmp.keys():
                return tmp[prefixSum] + 1, i
            tmp[prefixSum] = i
        return -1, -1
