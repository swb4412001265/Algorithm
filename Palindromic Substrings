837. Palindromic Substrings
中文
English
Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example
Example1

Input: "abc"
Output: 3
Explanation:
3 palindromic strings: "a", "b", "c".
Example2

Input: "aba"
Output: 4
Explanation:
4 palindromic strings: "a", "b", "a", "aba".
Notice
The input string length won't exceed 1000

Input test data (one parameter per line)
How to understand a testcase?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        if not str:
            return 0
        lenStr = len(str)
        res = 0
        for i in range(lenStr):
            for j in range(i + 1):
                if self.isPalindromic(str[j:i + 1]):
                    res += 1
        return res
            
    def isPalindromic(self, x):
        i = 0
        j = len(x) - 1
        while i < j:
            if x[i] != x[j]:
                return False
            i += 1
            j -= 1
        return True
        
//////////////////////////////////////////////////////////dp////////////////////////////////////////////////////////////
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        dp = [[0 for j in range(len(str))] for i in range(len(str))]
        ans = 0
        for i in range(len(str)):
            for j in range(i + 1):
                if(str[j] == str[i] and (i - j <= 2 or dp[j + 1][i - 1] == 1)):
                    dp[j][i] = 1
                ans += dp[j][i]
        return ans

/////////////////////////////////////////////////////////////DFS and there are extra "c"//////////////////////////////////////////////////////////////////////////
input: abc
['a', 'b', 'c', 'bc', 'ab', 'c', 'abc']
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        if not str:
            return
        self.tmpSet = []
        self.combination(str)
        return len(self.tmpSet)
        
    def combination(self, str):
        if len(str) == 0:
            return
        for i in range(1, len(str) + 1):
            preString = str[:i]
            # print(preString)
            # if self.isPalindrome(preString):
            self.tmpSet.append(preString[:])
            print(self.tmpSet)
            self.combination(str[i:])
                
    def isPalindrome(self, s):
        if not s:
            return False
        
        if len(s) == 1:
            return True
        i = 0
        j = len(s) - 1
        while i < j:
            if s[i] != s[j]:
                return False
            i += 1
            j -= 1
        return True
        
 ////////////////////////////////////////////////////////////two for 循环 找出所有 substring///////////////////////////////////////////////////////////////////////////
input : abc
stdout:
['a', 'ab', 'b', 'abc', 'bc', 'c']
 
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        if not str:
            return
        self.tmpSet = []
        count = 0
        
        for i in range(1, len(str) + 1):
            for j in range(i):
                # if self.isPalindrome(str[j:i]):
                #     count += 1
                self.tmpSet.append(str[j:i])
                print(self.tmpSet)
        return count
                
    def isPalindrome(self, s):
        if not s:
            return False
        
        if len(s) == 1:
            return True
        i = 0
        j = len(s) - 1
        while i < j:
            if s[i] != s[j]:
                return False
            i += 1
            j -= 1
        return True
        
///////////////////////////////////////////////////////////////////////////中心法//////////////////////////////////////////////////////////
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        if not str:
            return
        res = 0
        for i in range(len(str)):
            res += self.isP(str, i, i)
            res += self.isP(str, i, i + 1)
        return res
            
    
    def isP(self, str, left, right):
        count = 0
        while left >= 0 and right < len(str) and str[left] == str[right]:
            left -= 1
            right += 1
            count += 1
        return count
        
