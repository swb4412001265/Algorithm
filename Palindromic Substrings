837. Palindromic Substrings
中文
English
Given a string, your task is to count how many palindromic substrings in this string.
The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.

Example
Example1

Input: "abc"
Output: 3
Explanation:
3 palindromic strings: "a", "b", "c".
Example2

Input: "aba"
Output: 4
Explanation:
4 palindromic strings: "a", "b", "a", "aba".
Notice
The input string length won't exceed 1000

Input test data (one parameter per line)
How to understand a testcase?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        if not str:
            return 0
        lenStr = len(str)
        res = 0
        for i in range(lenStr):
            for j in range(i + 1):
                if self.isPalindromic(str[j:i + 1]):
                    res += 1
        return res
            
    def isPalindromic(self, x):
        i = 0
        j = len(x) - 1
        while i < j:
            if x[i] != x[j]:
                return False
            i += 1
            j -= 1
        return True
        
//////////////////////////////////////////////////////////dp////////////////////////////////////////////////////////////
class Solution:
    """
    @param str: s string
    @return: return an integer, denote the number of the palindromic substrings
    """
    def countPalindromicSubstrings(self, str):
        # write your code here
        dp = [[0 for j in range(len(str))] for i in range(len(str))]
        ans = 0
        for i in range(len(str)):
            for j in range(i + 1):
                if(str[j] == str[i] and (i - j <= 2 or dp[j + 1][i - 1] == 1)):
                    dp[j][i] = 1
                ans += dp[j][i]
        return ans
