1225. Island Perimeter
中文English
You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. 
Grid cells are connected horizontally/vertically (not diagonally). 
The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
The island doesn't have "lakes" (water inside that isn't connected to the water around the island).
One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. 
Determine the perimeter of the island.

Example
[[0,1,0,0],
 [1,1,1,0],
 [0,1,0,0],
 [1,1,0,0]]

Answer: 16

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param grid: a 2D array
    @return: the perimeter of the island
    """
    def islandPerimeter(self, grid):
        # Write your code here
        if not grid:
            return 0
        res = 0
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if grid[x][y] == 1:
                    print(self.perimeterNum(grid,x,y))
                    res += self.perimeterNum(grid, x, y)
        return res
                
    def perimeterNum(self, grid, x, y):
        returnNum = 4
        if x + 1 <= len(grid) - 1 and grid[x + 1][y] == 1:
            returnNum -= 1
        if x - 1 >= 0 and grid[x - 1][y] == 1:
            returnNum -= 1
        if y + 1 <= len(grid[0]) - 1 and grid[x][y + 1] == 1:
            returnNum -= 1
        if y - 1 >= 0 and grid[x][y - 1] == 1:
            returnNum -= 1    
        return returnNum        


//////////////////////////////////////////////////////////BFS to calculate area size////////////////////////////////////////////////////
class Solution:
    """
    @param grid: a 2D array
    @return: the perimeter of the island
    """
    def islandPerimeter(self, grid):
        # Write your code here
        if not grid:
            return 0
        from queue import Queue
        q = Queue()
        dx = [-1, 0, 0, 1]
        dy = [0, 1, -1, 0]
        count = 0
        X = len(grid)
        Y = len(grid[0])
        visited = [[0 for _ in range(Y)] for _ in range(X)]
        for i in range(X):
            if not q.empty():
                break
            for j in range(Y):
                if grid[i][j]:
                    q.put((i, j))
                    visited[i][j] = 1
                    break
        
        while not q.empty():
            newX, newY = q.get()
            count += 1
            for i in range(4):
                tmpX = dx[i] + newX
                tmpY = dy[i] + newY
                if tmpX >= 0 and tmpX < X and tmpY >= 0 and tmpY < Y \
                and visited[tmpX][tmpY] == 0 and grid[tmpX][tmpY] :
                    q.put((tmpX, tmpY))
                    visited[tmpX][tmpY] = 1
                    print(tmpX, tmpY)
        return count
