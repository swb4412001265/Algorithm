108. Palindrome Partitioning II
中文English
Given a string s, cut s into some substrings such that every substring is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example
Example 1:

Input: "a"
Output: 0
Explanation: "a" is already a palindrome, no need to split.
Example 2:

Input: "aab"
Output: 1
Explanation: Split "aab" once, into "aa" and "b", both palindrome.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param s a string
     * @return an integer
     */
    bool isPalindrome(string x){
        int m = x.length();
        for(int a = 0,b = m-1;a<b;a++,b--){
            if(x.at(a)!=x.at(b)){
                return false;
            }
        }
        return true;
    }
    
    int minCut(string s) {
        // write your code here
        
        
        //define f[i] from 0 to i, means minimum cut can create how many palindrome.
        
        int m = s.length();
        vector<int> f(m+1);
        //int f[m+1];
        for(int i = 0; i<m+1;++i){
            f[i] = i;
        }
        
        for(int i = 1; i<m+1;++i){
            for(int j = 0;j<i;j++){
                string temp;
                temp.assign(s.begin()+j,s.begin()+i);
                if(isPalindrome(temp)){
                    f[i] = min(f[i],f[j] + 1);
                }
            }
        }
        return f[m] - 1;
    }
};

/////////////////////////////////////////////python///////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: A string
    @return: An integer
    """
    def minCut(self, s):
        # write your code here
        # define f[m] as the lenth is m and minimal cuts can create how many Palindrome
        # cuts equals number of Palindromes - 1
        if not s:
            return 0
        # the maxium number of Palindromes is the lenth of strng
        # i.e each letter is a Palindromes
        f = [i for i in range(len(s) + 1)]
        for i in range(1, len(s) + 1):
            for j in range(i):
                # j starts from 0 and f[0] = 0
                # from j to i, if s[j:i] is Palindrome, ie the number of Palindrome
                # of s[i:j] is 1
                #f[i] = number of Palindrome of s[:j](f[j)) + number of Palindrome s[j:i]
                # the total number of Palindrome of f[i] should be f[j] + 1
                if self.isPalindrome(s[j:i]):
                    f[i] = min(f[i], f[j] + 1)
                    
        return f[len(s)] - 1
    
    def isPalindrome(self, s):
        if not s or len(s) == 1:
            return True
            
        i = 0
        j = len(s) - 1
        while i < j:
            if s[i] != s[j]:
                return False
            i += 1
            j -= 1
        return True
