class Solution:
    """
    @param: numCourses: a total of n courses
    @param: prerequisites: a list of prerequisite pairs
    @return: true if can finish all courses or false
    """
    def canFinish(self, numCourses, prerequisites):
        # write your code here
        count = 0
        import queue
        q = queue.Queue()
        self.inDegree(numCourses, prerequisites)
    
        for i in self.IN.keys():
            if self.IN[i] is 0:
                q.put(i)
                count += 1
                
        while q.empty() is False:
            tmp = q.get()
            for i in self.LIST[tmp]:
                self.IN[i] -= 1
                if self.IN[i] == 0:
                    q.put(i)
                    count += 1
        if count == numCourses:
            return True
        return False
            
    def inDegree(self, numCourses, prerequisites):
        self.IN = {i:0 for i in range(numCourses)}
        self.LIST = {i:[] for i in range(numCourses)}
        for x in prerequisites:
            self.IN[x[0]] += 1
            self.LIST[x[1]].append(x[0])
    
   ////////////////////////////////////////LintCode Version///////////////////////////////////////////////////////////////////
   class Solution:
    # @param {int} numCourses a total of n courses
    # @param {int[][]} prerequisites a list of prerequisite pairs
    # @return {boolean} true if can finish all courses or false
    def canFinish(self, numCourses, prerequisites):
        # Write your code here
        edges = {i: [] for i in xrange(numCourses)}
        degrees = [0 for i in xrange(numCourses)] 
        for i, j in prerequisites:
            edges[j].append(i)
            degrees[i] += 1
        import Queue
        queue, count = Queue.Queue(maxsize = numCourses), 0
        
        for i in xrange(numCourses):
            if degrees[i] == 0:
                queue.put(i)

        while not queue.empty():
            node = queue.get()
            count += 1

            for x in edges[node]:
                degrees[x] -= 1
                if degrees[x] == 0:
                    queue.put(x)

        return count == numCourses
