547. Intersection of Two Arrays
中文English
Given two arrays, write a function to compute their intersection.

Example
Example 1:

Input: nums1 = [1, 2, 2, 1], nums2 = [2, 2], 
Output: [2].
Example 2:

Input: nums1 = [1, 2], nums2 = [2], 
Output: [2].
Challenge
Can you implement it in three different algorithms?

Notice
Each element in the result must be unique.
The order of the results needs to be ascending
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param nums1 an integer array
     * @param nums2 an integer array
     * @return an integer array
     */
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        // Write your code here
        vector <int> result;
        vector <int> FinalResult;
        int length1 = nums1.size();
        int length2 = nums2.size();
        //int mid = lnegth1 / 2;
        
        for(int i = 0; i < length1; i++){
            for(int j = 0; j < length2; j++){
                if(nums1[i] == nums2[j])
                    result.push_back(nums1[i]);
            }
        }
        int i = 0;
        while(i < result.size()){
            int j = i + 1;
            while(j < result.size()){
                if(result[i] == result[j])
                    result.erase(result.begin() + j);
                else
                    j++;
            }
            i++;
        }
        return result;
    }
};


//////////////////////////////////////////////////////////O(n2) using set/////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums1: an integer array
    @param nums2: an integer array
    @return: an integer array
    """
    def intersection(self, nums1, nums2):
        # write your code here
        res = set()
        for i in nums1:
            if i in nums2:
                res.add(i)
        return list(res)
        
////////////////////////////////////////////////////////O(nlogn) 二分////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums1: an integer array
    @param nums2: an integer array
    @return: an integer array
    """
    def intersection(self, nums1, nums2):
        # write your code here
        if not nums1 or not nums2:
            return []
        nums1 = sorted(list(set(nums1)))
        nums2 = sorted(list(set(nums2)))
        res = []
        
        for i in nums2:
            start = 0
            end = len(nums1) - 1
            found = 0
            while start + 1 < end:
                mid = (start + end) // 2
                if i > nums1[mid]:
                    start = mid    
                elif i < nums1[mid]:
                    end = mid
                else:
                    res.append(i)
                    found = 1
                    break
            if found == 0:
                if nums1[start] == i:
                    res.append(i)
                elif nums1[end] == i:
                    res.append(i)
        return res
        
/////////////////////////////////////////////////////////////Two pointer//////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums1: an integer array
    @param nums2: an integer array
    @return: an integer array
    """
    def intersection(self, nums1, nums2):
        # write your code here
        nums1.sort()
        nums2.sort()
        res = []
        i = 0
        j = 0
        while i < len(nums1) and j < len(nums2):
            if nums1[i] == nums2[j]:
                res.append(nums2[j])
                i += 1
                j += 1
                while i < len(nums1) and nums1[i] == nums1[i - 1]:
                    i += 1
                while j < len(nums2) and nums2[j] == nums2[j - 1]:
                    j += 1
            elif nums1[i] > nums2[j]:
                j += 1
            else:
                i += 1
        return res
   

