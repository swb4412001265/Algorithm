//////////////////////////////////////////////////11ms answer/////////////////////////////////////////////////////////////////////////
class Solution {
public:    
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int> > threeSum(vector<int> &nums) {
        // write your code here
        vector<vector<int> > result;
        //vector<int> V;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; ++i) {
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            int target = -nums[i];
            int start = i + 1;
            int end = nums.size() - 1;
            while(start < end) {
                if(start > i + 1 && nums[start] == nums[start - 1]) {
                    start++;
                    continue;
                }
                if(nums[start] + nums[end] > target) {
                    end--;
                }
                else if(nums[start] + nums[end] < target) {
                    start++;
                }
                else {    
                    vector<int> V;
                    V.push_back(-target);
                    V.push_back(nums[start]);
                    V.push_back(nums[end]);
                    result.push_back(V);
                    //V.clear();
                    start++;
                }
            }
        }
        return result;
    }
};


///////////////////////////////////////////////////////version2////////////////////////////////////////////////////////////////////////
class Solution {
public:    
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int> > threeSum(vector<int> &nums) {
        // write your code here
        vector<vector<int> > result;
        vector<int> V;
        if(nums.size() == 0) {
            result.push_back(V);
            return result;
        }
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; ++i) {
            vector<int> tmp(nums);
             
            if(i > 0 && tmp[i] == tmp[i-1]) {
                continue;
            }
            int target = -tmp[i];
            tmp.erase(tmp.begin(), tmp.begin() + i + 1);
            int start = 0;
            int end = tmp.size() - 1;
            while(start < end) {
                if(start > 0 && tmp[start] == tmp[start - 1]) {
                    start++;
                    continue;
                }
                if(tmp[start] + tmp[end] > target) {
                    end--;
                }
                else if(tmp[start] + tmp[end] < target) {
                    start++;
                }
                else {
                    V.push_back(-target);
                    V.push_back(tmp[start]);
                    V.push_back(tmp[end]);
                    result.push_back(V);
                    V.clear();
                    start++;
                }
            }
        }
        return result;
    }
};

