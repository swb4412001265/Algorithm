57. 3Sum
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? 
Find all unique triplets in the array which gives the sum of zero.
Example
For example, given array S = {-1 0 1 2 -1 -4}, A solution set is:

(-1, 0, 1)
(-1, -1, 2)
Notice
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.

//////////////////////////////////////////////////11ms answer/////////////////////////////////////////////////////////////////////////
class Solution {
public:    
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int> > threeSum(vector<int> &nums) {
        // write your code here
        vector<vector<int> > result;
        //vector<int> V;
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; ++i) {
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            int target = -nums[i];
            int start = i + 1;
            int end = nums.size() - 1;
            while(start < end) {
                if(start > i + 1 && nums[start] == nums[start - 1]) {
                    start++;
                    continue;
                }
                if(nums[start] + nums[end] > target) {
                    end--;
                }
                else if(nums[start] + nums[end] < target) {
                    start++;
                }
                else {    
                    vector<int> V;
                    V.push_back(-target);
                    V.push_back(nums[start]);
                    V.push_back(nums[end]);
                    result.push_back(V);
                    //V.clear();
                    start++;
                }
            }
        }
        return result;
    }
};


///////////////////////////////////////////////////////version2////////////////////////////////////////////////////////////////////////
class Solution {
public:    
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    vector<vector<int> > threeSum(vector<int> &nums) {
        // write your code here
        vector<vector<int> > result;
        vector<int> V;
        if(nums.size() == 0) {
            result.push_back(V);
            return result;
        }
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; ++i) {
            vector<int> tmp(nums);
             
            if(i > 0 && tmp[i] == tmp[i-1]) {
                continue;
            }
            int target = -tmp[i];
            tmp.erase(tmp.begin(), tmp.begin() + i + 1);
            int start = 0;
            int end = tmp.size() - 1;
            while(start < end) {
                if(start > 0 && tmp[start] == tmp[start - 1]) {
                    start++;
                    continue;
                }
                if(tmp[start] + tmp[end] > target) {
                    end--;
                }
                else if(tmp[start] + tmp[end] < target) {
                    start++;
                }
                else {
                    V.push_back(-target);
                    V.push_back(tmp[start]);
                    V.push_back(tmp[end]);
                    result.push_back(V);
                    V.clear();
                    start++;
                }
            }
        }
        return result;
    }
};



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution:
    """
    @param numbers: Give an array numbers of n integer
    @return: Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, numbers):
        # # write your code here
        # hash = {}
        # res = []
        # # numbers.sort()
        # for i in range(len(numbers) - 1):
        #     if i > 0 and numbers[i] == numbers[i - 1]:
        #         continue
        #     for j in range(i + 1, len(numbers) - 1):
        #         if -numbers[i] - numbers[j] in hash:
        #             res.append(sorted([numbers[i], numbers[j], -numbers[i] - numbers[j]]))
        #         if j > i + 1 and numbers[j] == numbers[j - 1]:
        #             continue
        #         hash[j] = j
        # return res
        numbers.sort()
        res = []
        for i in range(len(numbers) - 2):
            if i > 0 and numbers[i] == numbers[i - 1]:
                continue
            start = i + 1
            end = len(numbers) - 1
            while start < end:
                if numbers[start] + numbers[end] == -numbers[i]:
                    res.append([numbers[i], numbers[start], numbers[end]])
                    start += 1
                    end -= 1
                    while start < end and numbers[start] == numbers[start - 1]:
                        start += 1
                    while start < end and numbers[end] == numbers[end + 1]:
                        end -= 1
                elif numbers[start] + numbers[end] + numbers[i] > 0:
                    end -= 1
                else:
                    start += 1
        return res


///////////////////////////////////////////////////////python////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param numbers: Give an array numbers of n integer
    @return: Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, nums):
        nums.sort()
        results = []
        length = len(nums)
        for i in range(0, length - 2):
            if i and nums[i] == nums[i - 1]:
                continue
            target = -nums[i]
            left, right = i + 1, length - 1
            while left < right:
                if nums[left] + nums[right] == target:
                    results.append([nums[i], nums[left], nums[right]])
                    right -= 1
                    left += 1
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1
                elif nums[left] + nums[right] > target:
                    right -= 1
                else:
                    left += 1
        return results


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param numbers: Give an array numbers of n integer
    @return: Find all unique triplets in the array which gives the sum of zero.
    """
    def threeSum(self, numbers):
        # write your code here
        if len(numbers) < 3:
            return []
        res = []
        numbers.sort()
        for i in range(2, len(numbers)):
            left = 0
            right = i - 1
            target = -numbers[i]
            while left < right:
                if numbers[left] + numbers[right] > target:
                    right -= 1
                elif numbers[left] + numbers[right] < target:
                    left += 1
                else:
                    if [numbers[left], numbers[right], -target] not in res:
                        res.append([numbers[left], numbers[right], -target])
                    left += 1
                    right -= 1
        return res
