604. Window Sum

Given an array of n integers, and a moving window(size k), move the window at each iteration from the start of the array, find the sum of the element inside the window at each moving.

Example
Example 1

Input：array = [1,2,7,8,5], k = 3
Output：[10,17,20]
Explanation：
1 + 2 + 7 = 10
2 + 7 + 8 = 17
7 + 8 + 5 = 20
///////////////////////////exceed time limit/////////////
class Solution:
    """
    @param nums: a list of integers.
    @param k: length of window.
    @return: the sum of the element inside the window at each moving.
    """
    def winSum(self, nums, k):
        # write your code here
        if not nums:
            return []
        if k == 0:
            return []
        res = []    
        start = 0
        end = k - 1
        while end < len(nums):
            tmp = 0
            for i in range(start, end + 1):
                tmp += nums[i]
            res.append(tmp)
            start += 1
            end += 1
        return res    
       
       
       
////////////////////////////////////////////////////PASS//////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: a list of integers.
    @param k: length of window.
    @return: the sum of the element inside the window at each moving.
    """
    def winSum(self, nums, k):
        # write your code here
        if not nums:
            return []
        if k == 0:
            return []
        res = []    
        start = 0
        end = k - 1
        tmp = 0
        if end < len(nums):
            
            for i in range(start, end + 1):
                tmp += nums[i]
            res.append(tmp)
            start += 1
            end += 1
        while end < len(nums):
            tmp = tmp + nums[end] - nums[start - 1]
            res.append(tmp)
            start += 1
            end += 1
        return res


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: a list of integers.
    @param k: length of window.
    @return: the sum of the element inside the window at each moving.
    """
    def winSum(self, nums, k):
        # write your code here
        if nums == []:
            return []
        res = []
        head = 0
        tail = k - 1
        tmp = 0
        for i in nums[head:tail + 1]:
            tmp += i
        res.append(tmp)
        
        while tail < len(nums) - 1:
            tmp -= nums[head]
            tmp += nums[tail + 1]
            res.append(tmp)
            tail += 1
            head += 1
        return res
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: a list of integers.
    @param k: length of window.
    @return: the sum of the element inside the window at each moving.
    """
    def winSum(self, nums, k):
        # write your code here
        if not nums:
            return []
        tmp = 0
        res = []
        for i in range(k):
            tmp += nums[i]
        res.append(tmp)
        
        for i in range(1, len(nums) - k + 1):
            tmp -= nums[i - 1]
            tmp += nums[i + k - 1]
            res.append(tmp)
        return res
        
