62. Search in Rotated Sorted Array
中文English
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Example
Example 1:

Input: [4, 5, 1, 2, 3] and target=1, 
Output: 2.
Example 2:

Input: [4, 5, 1, 2, 3] and target=0, 
Output: -1.
Challenge
O(logN) time

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
    /** 
     * param A : an integer ratated sorted array
     * param target :  an integer to be searched
     * return : an integer
     */
public:
    int search(vector<int> &A, int target) {
        // write your code here
        int m = A.size();
        if (m == 0) {
            return -1;
        }
        
        int index = 0;
        for(int i = 0; i < m; ++i) {
            if(A[0] > A[i]) {
                index = i;
                break;
            }
            index = i;
        }
        //cout<<index;
        if(A[0] > target) {
            int start = index;
            int end = m - 1;
            while(start + 1 < end) {
                int mid = start + (end - start) / 2;
                if(A[mid] == target) {
                    return mid;
                }else if (A[mid] < target) {
                    start = mid;
                }else {
                    end = mid;
                }
            }
            if(A[start] == target) {
                return start;
            }
            if(A[end] == target) {
                return end;
            }
            return -1;
        }else if (A[0] < target) {
            int start = 0;
            int end = index;
            while(start + 1 < end) {
                int mid = start + (end - start) / 2;
                if(A[mid] == target) {
                    return mid;
                }else if (A[mid] < target) {
                    start = mid;
                }else {
                    end = mid;
                }
            }
            if(A[start] == target) {
                return start;
            }
            if(A[end] == target) {
                return end;
            }
            return -1;
        } else {
            return 0;
        }
        
       
    }
};



//////////////////////////////////////////////////////////////python////////////////////////////////////////////////////////////////
#1. Use Binary Search two times,
# First time, find out the lowest element
# Based on target is greater or smaller than the lowest element
# Try to use binary search again to find the result integer.

#2. Only use binary search once.
# Mid point can be in upper hill or lower hill depends on greater or smaller than A[0]
# For upper hill senario, target will be A[start] <= target < A[mid] or (target > A[mid] or target > A[end])

class Solution:
    """
    @param A: an integer rotated sorted array
    @param target: an integer to be searched
    @return: an integer
    """
    def search(self, A, target):
        # write your code here
        if A == None or len(A) == 0:
            return -1
            
        start = 0
        end = len(A) - 1
        while start + 1 < end:
            mid = start + int((end - start) / 2)
            if A[mid] > A[0]:
                if A[mid] > target >= A[start]:
                    end = mid
                else:
                    start = mid
            else:
                if A[mid] < target <= A[end]:
                    start = mid
                else:
                    end = mid
        if A[start] == target:
            return start
        if A[end] == target:
            return end
        return -1
        
