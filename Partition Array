class Solution {
public:
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0) {
            return 0;
        }
        int start = 0;
        int end = nums.size() - 1;
        while(start < end) {
            while(start < end && nums[start] < k) {
                start++;
            }
            while(start < end && nums[end] >= k) {
                end--;
            }
            if(start < end) {
                int tmp = nums[start];
                nums[start] = nums[end];
                nums[end] = tmp;
                start++;
                end--;
            }
        }
        if(nums[start] < k) {
            return start + 1;
        }else {
            return start;
        }
        
    }
};


///////////////////////////////////////////////version 2///////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0) {
            return 0;
        }
        int start = 0;
        int end = nums.size() - 1;
        while(start <= end) {
            while(start <= end && nums[start] < k) {
                start++;
            }
            while(start <= end && nums[end] >= k) {
                end--;
            }
            if(start <= end) {
                int tmp = nums[start];
                nums[start] = nums[end];
                nums[end] = tmp;
                start++;
                end--;
            }
        }
        return start;
    }
};


//////////////////////////////////////////quick sort Java////////////////////////////////////////////////////////////////////////////////

public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers2(int[] A) {
        quickSort(A, 0, A.length - 1);
    }
    
    private void quickSort(int[] A, int start, int end) {
        if (start >= end) {
            return;
        }
        
        int left = start, right = end;
        // key point 1: pivot is the value, not the index
        int pivot = A[(start + end) / 2];

        // key point 2: every time you compare left & right, it should be 
        // left <= right not left < right
        while (left <= right) {
            // key point 3: A[left] < pivot not A[left] <= pivot
            while (left <= right && A[left] < pivot) {
                left++;
            }
            // key point 3: A[right] > pivot not A[right] >= pivot
            while (left <= right && A[right] > pivot) {
                right--;
            }
            if (left <= right) {
                int temp = A[left];
                A[left] = A[right];
                A[right] = temp;
                
                left++;
                right--;
            }
        }
        
        quickSort(A, start, right);
        quickSort(A, left, end);
    }
}
