31 Â· Partition Array
Description
Given an array nums of integers and an int k, partition the array (i.e move the elements in "nums") such that:

All elements < k are moved to the left
All elements >= k are moved to the right
Return the partitioning index, i.e the first index i nums[i] >= k.

You should do really partition in array nums instead of just counting the numbers of integers smaller than k.

If all elements in nums are smaller than k, then return nums.length
0 <= nums.length <= 20000<=nums.length<=2000

Example
Example 1:

Input:

nums = []
k = 9
Output:

0
Explanation:

Empty array, print 0.

Example 2:

Input:

nums = [3,2,2,1]
k = 2
Output:

1
Explanation:

the real array is[1,2,2,3].So return 1.

Challenge
Can you partition the array in-place and in O(n)O(n)?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0) {
            return 0;
        }
        int start = 0;
        int end = nums.size() - 1;
        while(start < end) {
            while(start < end && nums[start] < k) {
                start++;
            }
            while(start < end && nums[end] >= k) {
                end--;
            }
            if(start < end) {
                int tmp = nums[start];
                nums[start] = nums[end];
                nums[end] = tmp;
                start++;
                end--;
            }
        }
        if(nums[start] < k) {
            return start + 1;
        }else {
            return start;
        }
        
    }
};


///////////////////////////////////////////////version 2///////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int partitionArray(vector<int> &nums, int k) {
        // write your code here
        if(nums.size() == 0) {
            return 0;
        }
        int start = 0;
        int end = nums.size() - 1;
        while(start <= end) {
            while(start <= end && nums[start] < k) {
                start++;
            }
            while(start <= end && nums[end] >= k) {
                end--;
            }
            if(start <= end) {
                int tmp = nums[start];
                nums[start] = nums[end];
                nums[end] = tmp;
                start++;
                end--;
            }
        }
        return start;
    }
};


////////////////////////////////////python///////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: The integer array you should partition
    @param k: An integer
    @return: The index after partition
    """
    def partitionArray(self, nums, k):
        # write your code here
        if len(nums) == 0:
            return 0
        i = 0
        j = len(nums) - 1
        while i < j:
            while i < j and nums[i] < k:
                i += 1
            while i < j and nums[j] >= k:
                j -= 1
            if i < j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1
        if i == j: 
            if nums[j] >= k:
                return j
            else:
                return i + 1
        else:
            return i

//////////////////////////////////////////quick sort Java////////////////////////////////////////////////////////////////////////////////

public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers2(int[] A) {
        quickSort(A, 0, A.length - 1);
    }
    
    private void quickSort(int[] A, int start, int end) {
        if (start >= end) {
            return;
        }
        
        int left = start, right = end;
        // key point 1: pivot is the value, not the index
        int pivot = A[(start + end) / 2];

        // key point 2: every time you compare left & right, it should be 
        // left <= right not left < right
        while (left <= right) {
            // key point 3: A[left] < pivot not A[left] <= pivot
            while (left <= right && A[left] < pivot) {
                left++;
            }
            // key point 3: A[right] > pivot not A[right] >= pivot
            while (left <= right && A[right] > pivot) {
                right--;
            }
            if (left <= right) {
                int temp = A[left];
                A[left] = A[right];
                A[right] = temp;
                
                left++;
                right--;
            }
        }
        
        quickSort(A, start, right);
        quickSort(A, left, end);
    }
}
