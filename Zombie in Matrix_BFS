class ItemType {
public:    
    int PEOPLE;
    int ZOMBIE;
    int WALL;
    ItemType() {
        this->PEOPLE = 0;
        this->ZOMBIE = 1;
        this->WALL = 2;
    }
};
class Solution {
public:
    /**
     * @param grid  a 2D integer grid
     * @return an integer
     */
    int zombie(vector<vector<int>>& grid) {
        // Write your code here
        if(grid.empty() || grid[0].empty()) {
            return -1;
        }
        int day = 0;
        int peopleCount = 0;
        ItemType itemType;
        int directionX[] = {0, 1, 0, -1};
        int directionY[] = {-1, 0, 1, 0};
        queue<pair<int, int>> Q;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[0].size(); ++j) {
                if(grid[i][j] == itemType.PEOPLE) {
                    peopleCount++;
                }
                if(grid[i][j] == itemType.ZOMBIE) {
                    Q.push(make_pair(i, j));
                }
            }
        }
        while(!Q.empty()) {
            day++;
            int size = Q.size();
            for(int i = 0; i < size; ++i) {
                pair<int, int> head = Q.front();
                Q.pop();
                for(int j = 0; j < 4; ++j) {
                    pair<int, int> tmp;
                    tmp.first = head.first + directionX[j];
                    tmp.second = head.second + directionY[j];
                    if(tmp.first >= 0 && tmp.first < grid.size() && tmp.second >= 0 && tmp.second < grid[0].size() && grid[tmp.first][tmp.second] == itemType.PEOPLE) {
                        peopleCount--;
                        if(peopleCount == 0) {
                            return day;
                        }
                        grid[tmp.first][tmp.second] = itemType.ZOMBIE;
                        Q.push(make_pair(tmp.first, tmp.second));
                    }
                }
            }
            
        }
        return -1;
    }
    
};
