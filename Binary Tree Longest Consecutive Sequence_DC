595. Binary Tree Longest Consecutive Sequence
Given a binary tree, find the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).

Example
For example,

   1
    \
     3
    / \
   2   4
        \
         5
Longest consecutive sequence path is 3-4-5, so return 3.

   2
    \
     3
    / 
   2    
  / 
 1
Longest consecutive sequence path is 2-3,not3-2-1, so return 2.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @return the length of the longest consecutive sequence path
     */
     
    void help (TreeNode* root, int curVal, int &res){
        if(root->left != NULL){
            if(root->val + 1 == root->left->val){
                help(root->left, curVal + 1, res);
            }else{
                help(root->left, 1, res);
            }
        }
        if(root->right != NULL){
            if(root->val + 1 == root->right->val){
                help(root->right, curVal + 1, res);
            }else{
                help(root->right, 1, res);
            }
        }
        if(root == NULL){
            return;
        }
        res = max(res, curVal);
    }
    int longestConsecutive(TreeNode* root) {
        // Write your code here
        if(root == NULL){
            return 0;
        }
        int result = INT_MIN;
        help(root, 1, result);
        return result;
    }
};


///////////////////////////////////////////////////////////Python//////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param: root: the root of binary tree
    @return: the length of the longest consecutive sequence path
    """
    
    def longestConsecutive(self, root):
        self.longest = 0
        self.helper(root)
        return self.longest
        
    def helper(self, root):
        
        if root == None:
            return 0
        # define the length of the longest consecutive left subtree 
        left = self.helper(root.left)
        right = self.helper(root.right)
        # At least root is there and length should be 1
        subLongest = 1
        if root.left != None and root.val + 1 == root.left.val:
            subLongest = left + 1
        if root.right != None and root.val + 1 == root.right.val:
            subLongest = right + 1
        if subLongest > self.longest:
            self.longest = subLongest
            
        return subLongest
