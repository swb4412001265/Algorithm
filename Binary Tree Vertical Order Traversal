651. Binary Tree Vertical Order Traversal

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Example
Example1

Inpurt:  {3,9,20,#,#,15,7}
Output: [[9],[3,15],[20],[7]]
Explanation:
   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7
Example2

Input: {3,9,8,4,0,1,7}
Output: [[4],[9],[3,0,1],[8],[7]]
Explanation:
     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of tree
    @return: the vertical order traversal
    """
    def verticalOrder(self, root):
        # write your code here
        from queue import Queue
        if not root:
            return []
        q = Queue()
        q.put((root, 0))
        res = {}
        while not q.empty():
            root, tmp = q.get()
            if root:
                if tmp not in res:
                    res[tmp] = []
                res[tmp].append(root.val)
                q.put((root.left, tmp - 1))
                q.put((root.right, tmp + 1))
        resList = []
        for key in sorted(res.keys()):
            resList.append(res[key])
        return resList


/////////////////////////////////////////////DFS does not pass///////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of tree
    @return: the vertical order traversal
    """
    def verticalOrder(self, root):
        # write your code here
        if not root:
            return []
        self.dic = {}    
        self.helper(root, 0)
        # print(self.dic)
        res = []
        for i in sorted(self.dic):
            res.append(self.dic[i])
        return res
        
    def helper(self, root, level):
        if not root:
            return 
        if level not in self.dic:
            self.dic[level] = [root.val]
        else:
            self.dic[level].append(root.val)
        
        self.helper(root.left, level - 1)
        self.helper(root.right, level + 1)
        
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root of tree
    @return: the vertical order traversal
    """
    def verticalOrder(self, root):
        # write your code here
        if not root:
            return []
        from queue import Queue
        q= Queue()
        q.put((root, 0))
        tmpRes = {}
        while not q.empty():
            node, level = q.get()
            if level not in tmpRes:
                tmpRes[level] = [node.val]
            else:
                tmpRes[level].append(node.val)
                
            if node.left != None:
                q.put((node.left, level - 1))
            
            if node.right != None:
                q.put((node.right, level + 1))
        print(tmpRes)
        # print out a list with sorted keys
        print(sorted(tmpRes))    
        res = []
        for i in sorted(tmpRes):
            res.append(tmpRes[i])
        return res
######################################################################
Input
Show Difference
{3,9,20,#,#,15,7}
Your stdout
{0: [3, 15], -1: [9], 1: [20], 2: [7]}
[-1, 0, 1, 2]
Output
[[9],[3,15],[20],[7]]
Expected
[[9],[3,15],[20],[7]]
###################################################
