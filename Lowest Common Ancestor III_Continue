578. Lowest Common Ancestor III
中文English
Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.
The lowest common ancestor is the node with largest depth which is the ancestor of both nodes.
Return null if LCA does not exist.

Example
Example1

Input: 
{4, 3, 7, #, #, 5, 6}
3 5
5 6
6 7 
5 8
Output: 
4
7
7
null
Explanation:
  4
 / \
3   7
   / \
  5   6

LCA(3, 5) = 4
LCA(5, 6) = 7
LCA(6, 7) = 7
LCA(5, 8) = null

Example2

Input:
{1}
1 1
Output: 
1
Explanation:
The tree is just a node, whose value is 1.
Notice
node A or node B may not exist in tree.
Each node has a different value
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary tree.
     * @param A and B: two nodes
     * @return: Return the LCA of the two nodes.
     */
     bool A_exist = false;
     bool B_exist = false;
     TreeNode* node_A = NULL;
     TreeNode* node_B = NULL;
     int first;
    TreeNode *lowestCommonAncestor3(TreeNode* root, TreeNode* A, TreeNode* B) {
        // write your code here
        if(root == NULL){
            return NULL;
        }
        
        if(root == A){
            A_exist = true;
            first = 1;
            node_A = root;
        }
        if(root == B){
            B_exist = true;
            first = 2;
            node_B = root;
        }
        if((A_exist == true && B_exist == true) && (root == A || root == B) && first == 2){
            return node_A;
        }
        if((A_exist == true && B_exist == true) && (root == A || root == B) && first == 1){
            return node_B;
        }
        TreeNode* left = lowestCommonAncestor3(root->left, A, B);
        TreeNode* right = lowestCommonAncestor3(root->right, A, B);
        if(left != NULL && right != NULL){
            return root;
        }
        if((A_exist == true && B_exist == true) && (left != NULL)) {
            return left;
        }
        if((A_exist == true && B_exist == true) && (right != NULL)) {
            return right;
        }
        return NULL;
    }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param: root: The root of the binary tree.
    @param: A: A TreeNode
    @param: B: A TreeNode
    @return: Return the LCA of the two nodes.
    """
    def lowestCommonAncestor3(self, root, A, B):
        # write your code here
        if not root:
            return None
        if not A or not B:
            return None
        
        a, b, c = self.helper(root, A, B)    
        return c
            
    def helper(self, root, A, B):
        if not root:
            return  0, 0, None
        
        
        left_A, left_B, left_LCA = self.helper(root.left, A, B)
        right_A, right_B, right_LCA = self.helper(root.right, A, B)
        
        # this is for decide if A or B exists.
        a = left_A or right_A or root == A
        b = left_B or right_B or root == B
        
        if root == A:
            return a, b, A
        if root == B:
            return a, b, B
        
        
        if left_A and right_B or left_B and right_A:
            return a, b, root
        if left_A and left_B:
            return a, b, left_LCA
        if right_B and right_A:
            return a, b, right_LCA
    
        return a, b, None
            
