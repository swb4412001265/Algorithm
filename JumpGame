class Solution {
public:
    /**
     * @param A: A list of integers
     * @return: The boolean answer
     */
    bool canJump(vector<int> A) {
        // write you code here
        // define f[i] as if you are able to reach the index i from index 0
        int m = A.size();
        if (m == 0) {
            return false;
        }
        vector<bool> f(m);
        // the first step is true
        f[0] = true;
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < i; ++j) {
            // before f[i] which is f[j]:f[j] has to be true and A[j] has to be equal or greater than distance between i and j which is j -1
                if (f[j] == true && A[j] >= i - j) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[m-1];
    }
};


//////////////////////////////////////////////////////python////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param A: A list of integers
    @return: A boolean
    """
    def canJump(self, A):
        # write your code here
        # define f[x] as if able to move to index x
        if A == None or len(A) == 0:
            return False
        f = [False] * len(A)
        f[0] = True
        for i in range(len(A)):
            for j in range(i):
                if f[j] and j + A[j] >= i:
                    f[i] = True
                    break
        return f[-1]
