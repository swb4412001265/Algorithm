114. Unique Paths

A robot is located at the top-left corner of a m x n grid.

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid.

How many possible unique paths are there?

Example
Example 1:

Input: n = 1, m = 3
Output: 1	
Explanation: Only one path to target position.
Example 2:

Input:  n = 3, m = 3
Output: 6	
Explanation:
	D : Down
	R : Right
	1) DDRR
	2) DRDR
	3) DRRD
	4) RRDD
	5) RDRD
	6) RDDR
Notice
m and n will be at most 100.
The answer is guaranteed to be in the range of 32-bit integers


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param n, m: positive integer (1 <= n ,m <= 100)
     * @return an integer
     */
    int uniquePaths(int m, int n) {
        // wirte your code here
        //define from(0,0) to (m,n) there are p[m-1][n-1] possibilities
        //vector<vector<int> > p(m,vector<int>(n));
        int p[m][n];
        for(int i = 0; i<n; i++){
            p[0][i] = 1;
        }
        for(int i = 0; i<m; i++){
            p[i][0] = 1;
        }
        
        for(int i = 1; i<m; i++){
            for(int j = 1; j<n;j++){
                p[i][j] = p[i-1][j] + p[i][j-1];
            }
        }
        return p[m-1][n-1]; 
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param m: positive integer (1 <= m <= 100)
    @param n: positive integer (1 <= n <= 100)
    @return: An integer
    """
    def uniquePaths(self, m, n):
        # write your code here
        # define dp[i][j] as when reach (i, j), there are how many unique paths
        # dp[0][0] = 0
        dp = [[1 for _ in range(n)] for _ in range(m)] 
        for i in range(m):
            for j in range(n):
                if i == 0:
                    dp[i][j] = dp[i][j - 1]
                if j == 0:
                    dp[i][j] = dp[i - 1][j]
                if i != 0 and j != 0:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m - 1][n - 1]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
115. Unique Paths II
中文English
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example
Example 1:
	Input: [[0]]
	Output: 1


Example 2:
	Input:  [[0,0,0],[0,1,0],[0,0,0]]
	Output: 2
	
	Explanation:
	Only 2 different path.
	

Notice
m and n will be at most 100.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        if not obstacleGrid:
            return 0
        dp = [[1 for _ in range(len(obstacleGrid[0]))] for _ in range(len(obstacleGrid))]
        for i in range(len(obstacleGrid)):
            for j in range(len(obstacleGrid[0])):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                else:
                    if i == 0:
                        dp[i][j] = dp[i][j - 1]
                    if j == 0:
                        dp[i][j] = dp[i - 1][j]
                    if i != 0 and j != 0:
                        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[len(obstacleGrid) - 1][len(obstacleGrid[0]) - 1]
                
