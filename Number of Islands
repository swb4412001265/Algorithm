class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    void dfs(vector<vector<bool>> &grid, int x, int y) {
        if (x < 0 || x >= grid.size()) return;
        if (y < 0 || y >= grid[0].size()) return;
        if (grid[x][y] != true) return;
        grid[x][y] = false;
        dfs(grid, x + 1, y);
        dfs(grid, x - 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x, y - 1);
    }
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        if (grid.empty() || grid[0].empty()) return 0;
        int N = grid.size(), M = grid[0].size();
        int cnt = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (grid[i][j] == true) {
                    dfs(grid, i, j);
                    ++cnt;
                }
            }
        }
        return cnt;
    }
};

/////////////////////////////////////////////////////////Need More Debug/////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        int m = grid.size();
        int n = grid[0].size();
        if(m == 0 || n == 0) {
            return 0;
        }
        int count = 0;
        for(int i = 0; i < m; ++i) {
            for(int j = 0; j < n; ++j) {
                if(grid[i][j] == true) {
                    BFS(grid, i ,j);
                    count++;
                }
            }
        }
        return count;
    }
    void BFS(vector<vector<bool>>& grid, int i, int j) {
        grid[i][j] = false;
        int x[4] = {0,-1,0,1};
        int y[4] = {-1,0,1,0};
        for(int z = 0; z < 4; ++z) {
            i = x[z] + i;
            j = y[z] + j;
            if(i < 0 || j < 0 || i > grid.size() - 1|| j > grid[0].size() - 1) {
                continue;
            }
            if(grid[i][j] == true) {
                grid[i][j] = false;
                BFS(grid, i, j);
            }
        }
        //return;
    }
    
};
