/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode *root) {
        // write your code here
        ostringstream res;
        if (root == NULL) {
            return res.str();
        }
        queue<TreeNode*> Q;
        Q.push(root);
        while(!Q.empty()) {
            TreeNode *tmp = Q.front();
            Q.pop();
            if (tmp != NULL) {
                Q.push(tmp->left);
                Q.push(tmp->right);
                res << tmp->val <<' ';
            } else {
                res <<"# ";
            }
        }
        return res.str();
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode *deserialize(string data) {
        // write your code here
        if (data.size() == 0) {
            return NULL;
        }
        istringstream in(data);
        queue <TreeNode *> Q;
        string val;
        in >> val;
        TreeNode *res = new TreeNode(stoi(val));
        TreeNode * tmpNode = res;
        Q.push(tmpNode);
        while (!Q.empty()) {
            TreeNode *localNode = Q.front();
            Q.pop();
            if (!(in >> val)) {
                break;
            }
            if (val != "#") {
                tmpNode = new TreeNode(stoi(val));
                Q.push(tmpNode);
                localNode->left = tmpNode;
            }
            if (!(in >> val)) {
                break;
            }
            if (val != "#") {
                tmpNode = new TreeNode(stoi(val));
                Q.push(tmpNode);
                localNode->right = tmpNode;
            }
        }
        return res;
        
    }
};


////////////////////////////////////////////////////////DFS//////////////////////////////////////////////////////////////////

[Interview] Serialize and De-serialize a tree
A very frequent interview question. Suppose you have a tree, how could you serialize it to file and revert it back?


for example,

                                               1
                                         /               \
                                        2                 3
                                             \          /     
                                             4        5     
                                          /       \
                                         6        7

[Thoughts]
一个比较简单直接的做法是，通过前序遍历来做，把所有空节点当做“#”来标示。那么这棵树可以表示为

                                               1
                                         /               \
                                        2                 3
                                     /       \          /      \
                                  #         4        5       #
                                          /       \
                                         6        7
                                     /      \     /    \
                                    #      #    #     #

那么前序遍历的结果就是： {'1','2','#','4','6','#','#','7','#','#','3','5','#','#','#'}; 代码如下：


void Serialize(TreeNode * node, vector<char> &output)
{
       if(node == NULL)
       {
             output.push_back('#');
             return;
       }

       output.push_back(node->val + '0');
       Serialize(node->left, output);
       Serialize(node->right, output);
}

而反序列化的代码也就是：

TreeNode *Deserialize(vector<char> output, int &index)
{
       if(index > output.size() || output[index] == '#') return NULL;

       TreeNode *node = new TreeNode(output[index] -'0');
       index ++;
       node->left = Deserialize(output, index);
       index++;
       node->right = Deserialize(output, index);
       return node;
}
