7. Serialize and Deserialize Binary Tree

Design an algorithm and write code to serialize and deserialize a binary tree. Writing the tree to a file is called 'serialization' 
and reading back from the file to reconstruct the exact same binary tree is 'deserialization'.

Example
Example 1:

Input：{3,9,20,#,#,15,7}
Output：{3,9,20,#,#,15,7}
Explanation：
Binary tree {3,9,20,#,#,15,7},  denote the following structure:
	  3
	 / \
	9  20
	  /  \
	 15   7
it will be serialized {3,9,20,#,#,15,7}
Example 2:

Input：{1,2,3}
Output：{1,2,3}
Explanation：
Binary tree {1,2,3},  denote the following structure:
   1
  / \
 2   3
it will be serialized {1,2,3}
Our data serialization use BFS traversal. This is just for when you got Wrong Answer and want to debug the input.

You can use other method to do serializaiton and deserialization.

Notice
There is no limit of how you deserialize or serialize a binary tree, LintCode will take your output of serialize 
as the input of deserialize, it won't check the result of serialize.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode *root) {
        // write your code here
        ostringstream res;
        if (root == NULL) {
            return res.str();
        }
        queue<TreeNode*> Q;
        Q.push(root);
        while(!Q.empty()) {
            TreeNode *tmp = Q.front();
            Q.pop();
            if (tmp != NULL) {
                Q.push(tmp->left);
                Q.push(tmp->right);
                res << tmp->val <<' ';
            } else {
                res <<"# ";
            }
        }
        return res.str();
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode *deserialize(string data) {
        // write your code here
        if (data.size() == 0) {
            return NULL;
        }
        istringstream in(data);
        queue <TreeNode *> Q;
        string val;
        in >> val;
        TreeNode *res = new TreeNode(stoi(val));
        TreeNode * tmpNode = res;
        Q.push(tmpNode);
        while (!Q.empty()) {
            TreeNode *localNode = Q.front();
            Q.pop();
            if (!(in >> val)) {
                break;
            }
            if (val != "#") {
                tmpNode = new TreeNode(stoi(val));
                Q.push(tmpNode);
                localNode->left = tmpNode;
            }
            if (!(in >> val)) {
                break;
            }
            if (val != "#") {
                tmpNode = new TreeNode(stoi(val));
                Q.push(tmpNode);
                localNode->right = tmpNode;
            }
        }
        return res;
        
    }
};


////////////////////////////////////////////////////////DFS//////////////////////////////////////////////////////////////////

[Interview] Serialize and De-serialize a tree
A very frequent interview question. Suppose you have a tree, how could you serialize it to file and revert it back?


for example,

                                               1
                                         /               \
                                        2                 3
                                             \          /     
                                             4        5     
                                          /       \
                                         6        7

[Thoughts]
一个比较简单直接的做法是，通过前序遍历来做，把所有空节点当做“#”来标示。那么这棵树可以表示为

                                               1
                                         /               \
                                        2                 3
                                     /       \          /      \
                                  #         4        5       #
                                          /       \
                                         6        7
                                     /      \     /    \
                                    #      #    #     #

那么前序遍历的结果就是： {'1','2','#','4','6','#','#','7','#','#','3','5','#','#','#'}; 代码如下：


void Serialize(TreeNode * node, vector<char> &output)
{
       if(node == NULL)
       {
             output.push_back('#');
             return;
       }

       output.push_back(node->val + '0');
       Serialize(node->left, output);
       Serialize(node->right, output);
}

而反序列化的代码也就是：

TreeNode *Deserialize(vector<char> output, int &index)
{
       if(index > output.size() || output[index] == '#') return NULL;

       TreeNode *node = new TreeNode(output[index] -'0');
       index ++;
       node->left = Deserialize(output, index);
       index++;
       node->right = Deserialize(output, index);
       return node;
}


////////////////////////////////////////////////////////BFS////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param root: An object of TreeNode, denote the root of the binary tree.
    This method will be invoked first, you should design your own algorithm 
    to serialize a binary tree which denote by a root node to a string which
    can be easily deserialized by your own "deserialize" method later.
    """
    def serialize(self, root):
        # write your code here
        if not root:
            return []
        res = []
        from queue import Queue
        q = Queue()
        q.put(root)
        while not q.empty():
            tmp = q.get()
            if not tmp:
                res.append("#")
            else:
                res.append(str(tmp.val))
                q.put(tmp.left)
                q.put(tmp.right)
        print(" ".join(res))
        return " ".join(res)
    """
    @param data: A string serialized by your serialize method.
    This method will be invoked second, the argument data is what exactly
    you serialized at method "serialize", that means the data is not given by
    system, it's given by your own serialize method. So the format of data is
    designed by yourself, and deserialize it here as you serialize it in 
    "serialize" method.
    """
    def deserialize(self, data):
        # write your code here
        if not data:
            return None
        data = data.split(" ")
        print(data)
        from queue import Queue
        q = Queue()
        root = TreeNode(int(data[0]))
        q.put(root)
        index = 1
        while not q.empty():
            node = q.get()
            if data[index] != "#":
                node.left = TreeNode(int(data[index]))
                q.put(node.left)
            else:
                node.left = None
            index += 1
            if data[index] != "#":
                node.right = TreeNode(int(data[index]))
                q.put(node.right)
            else:
                node.right = None
            index += 1
        return root
        
