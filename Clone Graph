137. Clone Graph
Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.

How we serialize an undirected graph:

Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.

As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

   1
  / \
 /   \
0 --- 2
     / \
     \_/
Example
return a deep copied graph.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        // write your code here
        if(node == NULL){
            return NULL;
        }
        vector<UndirectedGraphNode *> nodes = findNode(node);
        unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> map = copyNode(nodes);
        connectNeighbors(map, nodes);
        return map[node];
    }
    
    vector<UndirectedGraphNode *> findNode(UndirectedGraphNode *node){
        queue<UndirectedGraphNode *> Q;
        set<UndirectedGraphNode *> S;
        vector<UndirectedGraphNode *> V;
        
        Q.push(node);
        S.insert(node);
        while(!Q.empty()){
            UndirectedGraphNode *tmp = Q.front();
            Q.pop();
            if(S.find(tmp) == S.end()){
                Q.push(tmp);
                S.insert(tmp);
                V.push_back(tmp);
            }
        }
        return V;
    }
    unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> copyNode(vector<UndirectedGraphNode *> node){
        unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> tmp;
        for(auto n : node){
            UndirectedGraphNode *newnode = new UndirectedGraphNode(n->label);
            tmp[n] = newnode;
        }
        return tmp;
    }
    
    void connectNeighbors(unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> &hash, vector<UndirectedGraphNode *> nodes){
        for(auto n : nodes){
            UndirectedGraphNode *newNode = hash[n];
            for(auto m : n->neighbors){
                UndirectedGraphNode *newNeighbor = hash[m];
                newNode->neighbors.push_back(newNeighbor);
            }
        }
    }
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//After Change
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {
        // write your code here
        if(node == NULL){
            return NULL;
        }
        set<UndirectedGraphNode *> nodes = findNode(node);
        unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> map = copyNode(nodes);
        connectNeighbors(map, nodes);
        return map[node];
    }
    
    set<UndirectedGraphNode *> findNode(UndirectedGraphNode *node){
        queue<UndirectedGraphNode *> Q;
        set<UndirectedGraphNode *> S;
//        vector<UndirectedGraphNode *> V;
        
        Q.push(node);
        S.insert(node);
//        V.push_back(node);
        while(!Q.empty()){
            UndirectedGraphNode *tmp = Q.front();
            Q.pop();
            for(auto n : tmp->neighbors){
                if(S.find(n) == S.end()){
                    Q.push(n);
                    S.insert(n);
//                    V.push_back(n);
                }
            }    
        }

        return S;
    }
    unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> copyNode(set<UndirectedGraphNode *> node){
        unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> tmp;
        for(auto n : node){
            UndirectedGraphNode *newnode = new UndirectedGraphNode(n->label);
            tmp[n] = newnode;
        }
        return tmp;
    }
    
    void connectNeighbors(unordered_map<UndirectedGraphNode *, UndirectedGraphNode *> &hash, set<UndirectedGraphNode *> &nodes){
        for(auto n : nodes){
            UndirectedGraphNode *newNode = hash[n];
            for(auto m : n->neighbors){
                UndirectedGraphNode *newNeighbor = hash[m];
                newNode->neighbors.push_back(newNeighbor);
            }
        }
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition for a undirected graph node
class UndirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: node: A undirected graph node
    @return: A undirected graph node
    """
    def cloneGraph(self, node):
        # write your code here
        root = node
        if node is None:
            return node
            
        from queue import Queue
        q = Queue()
        q.put(node)
        allOldNodes = set()
        allOldNodes.add(node)
        while not q.empty():
            tmp = q.get()
            for i in tmp.neighbors:
                if i not in allOldNodes:
                    # continue
                    q.put(i)
                    allOldNodes.add(i)
        print(len(allOldNodes))        
        mapping = {}
        for i in allOldNodes:
            mapping[i] = UndirectedGraphNode(i.label)
        for tmpnode in allOldNodes:
            newNode = mapping[tmpnode]
            for neighbor in tmpnode.neighbors:
                newNeighbor = mapping[neighbor]
                newNode.neighbors.append(newNeighbor)
                
        return mapping[root]

/////////////////////////////////////////////python///////////////////////////////////////////////////////////////////////////
"""
Definition for a undirected graph node
class UndirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: node: A undirected graph node
    @return: A undirected graph node
    """
    def cloneGraph(self, node):
        # write your code here
        if not node:
            return None
        nodes = self.findAllNode(node)
        newNodesMapping = self.copyNode(nodes)
        self.linkNode(newNodesMapping, nodes)
        return newNodesMapping[node]
        
    def findAllNode(self, node):
        from queue import Queue
        q = Queue()
        tmpList = []
        q.put(node)
        
        while not q.empty():
            tmp = q.get()
            if tmp not in tmpList:
                tmpList.append(tmp)
            for i in tmp.neighbors:
                if i in tmpList:
                    continue
                q.put(i)
        return tmpList
        
    def copyNode(self, node):
        hash = {}
        for i in node:
            hash[i] = UndirectedGraphNode(i.label)
        return hash            
        
    def linkNode(self, hash, nodes):
        for i in nodes:
            for j in i.neighbors:
                hash[i].neighbors.append(hash[j])
