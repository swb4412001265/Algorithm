807. Palindrome Number II

Determines whether a binary representation of a non-negative integer n is a palindrome

Example
Example1

Input: n = 0
Output: True
Explanation:
The binary representation of 0 is: 0
Example2

Input: n = 3
Output: True
Explanation:
The binary representation of 3 is: 11
Example3

Input: n = 4
Output: False
Explanation:
The binary representation of 4 is: 100
Example4

Input: n = 6
Output: False
Explanation:
The binary representation of 6 is: 110
Notice
0 <= n <= 2^32 - 1
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param n: non-negative integer n.
    @return: return whether a binary representation of a non-negative integer n is a palindrome.
    """
    def isPalindrome(self, n):
        # Write your code here
        tmp = []
        while n / 2 != 0:
            tmp.append(n % 2)
            n = n / 2
        tmp.append(n % 2)
        i = 0
        j = len(tmp) - 1
        while i < j:
            if tmp[i] != tmp[j]:
                return False
            i += 1
            j -= 1
        return True


/////////////////////////////////////////////////////////////////////////////////////////////////////////
def isPalindrome(self, n):
        # Write your code here
        tmp = []
        while n / 2 != 0:
            tmp.append(n % 2)
            n = n / 2
        tmp.append(n % 2)
        for i in range(int(len(tmp) / 2)):
            if tmp[i] != tmp[-i-1]:
                return False
        return True
