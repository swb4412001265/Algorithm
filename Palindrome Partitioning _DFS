136. Palindrome Partitioning
中文English
Given a string s. Partition s such that every substring in the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example
Example 1:

Input: "a"
Output: [["a"]]
Explanation: Only 1 char in the string, only 1 way to split it (itself).
Example 2:

Input: "aab"
Output: [["aa", "b"], ["a", "a", "b"]]
Explanation: There are 2 ways to split "aab".
    1. Split "aab" into "aa" and "b", both palindrome.
    2. Split "aab" into "a", "a", and "b", all palindrome.
Notice
Different partitionings can be in any order.
Each substring must be a continuous segment of s.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    vector<vector<string>> partition(string s) {
        // write your code here
        vector<vector<string>> result;
        if(s.size() == 0) {
            return result;
        }
        vector<string> tmp;
        DFS(result, tmp, s, 0);
        return result;
    }
    
    void DFS(vector<vector<string>> &result, vector<string> tmp, string input, int startIndex) {
        if(startIndex == input.size()) {
            result.push_back(tmp);
        }
        for(int i = startIndex; i < input.size(); ++i) {
            string subString = input.substr(startIndex, i + 1 - startIndex);
            if(isPalindrome(subString) == false) {
                continue;
            }
            tmp.push_back(subString);
            DFS(result, tmp, input, i + 1);
            tmp.pop_back();
        }    
    }
    
    bool isPalindrome(string s) {
        int start = 0;
        int end = s.size() - 1;
        bool flag = true;
        while(start < end) {
            if(s[start] != s[end]) {
                flag = false;
                break;
            }
            start++;
            end--;
        }
        return flag;
    }
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution:
    """
    @param: s: A string
    @return: A list of lists of string
    """
    def partition(self, s):
        # write your code here
        if not s:
            return [[]]
        self.res = []
        self.helper(s, [])
        return self.res
    def isPalindrome(self, s):
        if len(s) == 0 or len(s) == 1:
            return True
        start = 0
        end = len(s) - 1
        while start < end:
            if s[start] != s[end]:
                return False
            start += 1
            end -= 1
        return True
        #return s == s[::-1]
    
    def helper(self, s, tmpString):
        if len(s) == 0:
            self.res.append(tmpString[:])
            return
        for i in range(1, len(s) + 1):
            preString = s[:i]
            if self.isPalindrome(preString):
                tmpString.append(preString[:])
                self.helper(s[i:], tmpString)
                tmpString.pop()
               
