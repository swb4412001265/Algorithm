class Solution {
public:
    /**
     * @param s: A string
     * @return: A list of lists of string
     */
    vector<vector<string>> partition(string s) {
        // write your code here
        vector<vector<string>> result;
        if(s.size() == 0) {
            return result;
        }
        vector<string> tmp;
        DFS(result, tmp, s, 0);
        return result;
    }
    
    void DFS(vector<vector<string>> &result, vector<string> tmp, string input, int startIndex) {
        if(startIndex == input.size()) {
            result.push_back(tmp);
        }
        for(int i = startIndex; i < input.size(); ++i) {
            string subString = input.substr(startIndex, i + 1 - startIndex);
            if(isPalindrome(subString) == false) {
                continue;
            }
            tmp.push_back(subString);
            DFS(result, tmp, input, i + 1);
            tmp.pop_back();
        }    
    }
    
    bool isPalindrome(string s) {
        int start = 0;
        int end = s.size() - 1;
        bool flag = true;
        while(start < end) {
            if(s[start] != s[end]) {
                flag = false;
                break;
            }
            start++;
            end--;
        }
        return flag;
    }
};
