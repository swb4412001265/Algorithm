81. Find Median from Data Stream
中文English
Numbers keep coming, return the median of numbers at every time a new number added.

Example
Example 1

Input: [1,2,3,4,5]
Output: [1,1,2,2,3]
Explanation:
The medium of [1] and [1,2] is 1.
The medium of [1,2,3] and [1,2,3,4] is 2.
The medium of [1,2,3,4,5] is 3.
Example 2

Input: [4,5,1,3,2,6,0]
Output: [4,4,4,3,3,3,3]
Explanation:
The medium of [4], [4,5], [4,5,1] is 4.
The medium of [4,5,1,3], [4,5,1,3,2], [4,5,1,3,2,6] and [4,5,1,3,2,6,0] is 3.
Challenge
Total run time in O(nlogn).

Clarification
What's the definition of Median?

The median is not equal to median in math.
Median is the number that in the middle of a sorted array. If there are n numbers in a sorted array A, the median is A[(n - 1) / 2]A[(n−1)/2].
For example, if A=[1,2,3], median is 2. If A=[1,19], median is 1.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: A list of integers
    @return: the median of numbers
    """
    def medianII(self, nums):
        # write your code here
        import heapq
        if not nums:
            return []
        minHeap = []
        maxHeap = []
        res = []
        for i in range(len(nums)):
        # heap[0] is the smallest in the heap.
        # Create two heaps: maxHeap and minHeap. leftHeap is maxHeap and right heap is minHeap
        # If num[i] is equal or smaller than -maxHeap[0],then put into manHeap, otherwise put into minHeap
            if maxHeap and nums[i] <= -maxHeap[0]:
                heapq.heappush(maxHeap, -nums[i])
            else:
                heapq.heappush(minHeap, nums[i])
        # When ajust two heaps, there are 4 cases:
        # 1. len(maxHeap) == len(minHeap), then do not mvoe anything but append -maxHeap[0] into res
        # 2. len(maxHeap) > len(minHeap) only by one, then same as step 1 since we pick the smaller index when even number
        # 3. len(maxHeap) > len(minHeap) + 1, move maxHeap[0] to minHeap
        # 4. len(minHeap) > len(maxHeap), move minHeap[0] to maxHeap
            if len(maxHeap) > len(minHeap) + 1:
                heapq.heappush(minHeap, -heapq.heappop(maxHeap))
            elif len(minHeap) > len(maxHeap):
                heapq.heappush(maxHeap, -heapq.heappop(minHeap))
            res.append(-maxHeap[0])
        return res

//////////////////////////////////////////////////Exceed time limit////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: A list of integers
    @return: the median of numbers
    """
    def medianII(self, nums):
        # write your code here
        
        if not nums:
            return []
        tmp = [nums[0]]
        res = [nums[0]]
        for i in range(1, len(nums)):
            tmp.append(nums[i])
            tmp.sort()
            res.append(tmp[(len(tmp) - 1)// 2])
        return res
