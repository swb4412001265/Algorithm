876. Middle of the Linked List
LeetCode

Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:

Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).
Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.
Example 2:

Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Note:

The number of nodes in the given list will be between 1 and 100.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution{
public:
    /**
     * @param head: the head of linked list.
     * @return: a middle node of the linked list
     */
    ListNode *middleNode(ListNode *head) {
        // Write your code here
        map <int,ListNode *> mymap;
        //ListNode *dummy = new ListNode(0);
        //dummy->next = head;
        int i = 0;
        if(head == NULL){
            return head;
        }
        
        while(head != NULL){
            i++;
            mymap[i] = head;
            head = head->next;
        }
        if(i % 2 == 0){
            return mymap[i/2];
        }else {
            return mymap[i/2 + 1];
        }    
    }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        if not head:
            return None
        if not head.next:
            return head
        slow = head
        fast = head.next
        
        while fast != None and fast.next != None:
            slow = slow.next
            fast = fast.next.next
        if not fast:
            return slow
        return slow.next
