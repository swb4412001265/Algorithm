36. Reverse Linked List II
Reverse a linked list from position m to n.

Example
Given 1->2->3->4->5->NULL, m = 2 and n = 4, return 1->4->3->2->5->NULL.

Challenge
Reverse it in-place and in one-pass

Notice
Given m, n satisfy the following condition: 1 ≤ m ≤ n ≤ length of list.


/////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition of singly-linked-list:
 * 
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *        this->val = val;
 *        this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The head of linked list.
     * @param m: The start position need to reverse.
     * @param n: The end position need to reverse.
     * @return: The new head of partial reversed linked list.
     */
    ListNode *findPosition (ListNode *head, int m){
        //ListNode *prev = NULL;
        //ListNode *curt = head;
        //int i = 1;
        ListNode *temp = head;
        for (int i =0;i<m;i++){
            temp = temp->next;
            if(temp == NULL){
                return NULL;
            }
        }
        return temp;
    }
    
    void reverse(ListNode *head){
        ListNode *prev = NULL;
        ListNode *curt = head;
        while(curt != NULL) {
            ListNode *temp = curt->next;
            curt->next = prev;
            prev = curt;
            curt = temp;
        }
    }
    
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // write your code here
        if(m == 0 || n == 0 || m > n){
            return NULL;
        }
        ListNode *dummy = new ListNode;
        dummy->next = head;
        //dummy = head;
        ListNode *prevM = findPosition(dummy,m-1);
        ListNode *M = prevM->next;
        ListNode *N = findPosition(dummy,n);
        ListNode *afterN = N->next;
        N->next= NULL;
        reverse(M);
        prevM->next = N;
        M->next = afterN;
        //return head;
        return dummy->next;
        delete dummy;
    }
};


////////////////////////////////python simple Reverse linked list//////////////////
"""
Definition of ListNode

class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: n
    @return: The new head of reversed linked list.
    """
    def reverse(self, head):
        # write your code here
        curt = None
        while head != None:
            tmp = head.next
            head.next = curt
            curt = head
            head = tmp
        return curt
        
///////////////////////////Python/////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:

    def reverse(self, head):
        prev = None
        while head != None:
            next = head.next
            head.next = prev
            prev = head
            head = next
        return prev

    def findkth(self, head, k):
        for i in range(k):
            if head is None:
                return None
            head = head.next
        return head

    def reverseBetween(self, head, m, n):
        # dummy = head
        #dummy should be the previous of head, so dummy.next = head
        dummy = ListNode(-1)
        dummy.next = head
        #mark previous node so we have m - 1
        mth_prev = self.findkth(dummy, m - 1)
        mth = mth_prev.next
        nth = self.findkth(dummy, n)
        nth_next = nth.next
        #mark n.next = None, so revers function can run
        nth.next = None

        self.reverse(mth)
        
        #define after reverse, insert new reserved linked list into unchanged linked list
        mth_prev.next = nth
        mth.next = nth_next
        return dummy.next
        # return dummy



///////////////////////////////////////////////////////////////////Latest Version////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: ListNode head is the head of the linked list 
    @param m: An integer
    @param n: An integer
    @return: The head of the reversed ListNode
    """
    def reverseBetween(self, head, m, n):
        # write your code here
        # define head as the previous node of parameter head
        dummy = ListNode(0)
        dummy.next = head
        head = dummy
        # We totally need 4 nodes fot us to connect linkList
        # previous mth Node, mth Node, nth Node, after Nth Node
        # Find the previous node of mth node
        prevNode = self.findNode(head, m - 1)
        # Find the nth node
        afterNode = self.findNode(head, n)
        # Save the after node of nth node
        tmpAfter = afterNode.next
        # Change the afterNode as None, so it can work properly with function reverseNode
        afterNode.next = None
        # Save the mth Node
        tmpPrev = prevNode.next
        self.reverseNode(tmpPrev)
        # Connect the link: previus mth Node -> nth
        prevNode.next = afterNode
        # Connect the link: mth Node -> after nth
        tmpPrev.next = tmpAfter
        return dummy.next
        
    def findNode(self, head, val):
        for _ in range(val):
            if head == None:
                return None
            head = head.next
        return head
    
    def reverseNode(self, head):
        prev = None
        curt = head
        while curt != None:
            tmp = curt.next
            curt.next = prev
            prev = curt
            curt = tmp
        return prev
        
    
    
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    version of m, n stands for value instand mth and nth:
    
    """
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: ListNode head is the head of the linked list 
    @param m: An integer
    @param n: An integer
    @return: The head of the reversed ListNode
    """
    def reverseBetween(self, head, m, n):
        # write your code here
        if not head:
            return None
        dummy = ListNode(-1)
        dummy.next = head
        headCurt, headPrev = self.findHead(head, m)
        tailCurt, dummy = self.findHead(head, n)
        reversedHead, reversedTail = self.reverList(headCurt, tailCurt)
        headPrev.next = reversedHead
        reversedTail.next = tailCurt.next
        return dummy.next


    def reverList(self, head, tail):
        if not head:
            return None
        prev = None
        curt = head
        while curt != tail.next:
            tmp = curt.next
            curt.next = prev
            prev = curt
            curt = tmp
        return prev, head
    
    def findHead(self, head, m):
        dummy = ListNode(-1)
        dummy.next = head
        
        while head != None:
            if head.val = m:
                return head, dummy
            head = head.next
            dummy = dummy.next
            
        return None, None
        
    
