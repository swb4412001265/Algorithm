/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    /**
     * @param points a list of points
     * @param origin a point
     * @param k an integer
     * @return the k closest points
     */
    vector<Point> kClosest(vector<Point>& points, Point& origin, int k) {
        // Write your code here
        vector<Point> result;
        if(points.size() == 0) {
            return result;
        }
        BFS(result, points, origin, k);
        return result;
    }
    
    void BFS(vector<Point>& result, vector<Point> points, Point origin, int k) {
        multimap<int, Point> tmp = distance(points, origin);
        multimap<int, Point>::iterator it = tmp.begin();
        int i = 0;
        while(i < k) {
            result.push_back(it->second);
            ++it;
            ++i;
        }
        return;
    }
    
    multimap<int, Point> distance(vector<Point> points, Point origin) {
        multimap<int, Point> disMap;
        for(auto& n : points) {
            int tmp;
            tmp = pow(abs(n.x - origin.x), 2) + pow(abs(n.y - origin.y), 2);
            disMap.insert({tmp, n});
        }
        return disMap;
    }
};



////////////////////////////////Does not sort nodes with the same distance///////////////////////////////////////////////
"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""

class Solution:
    """
    @param points: a list of points
    @param origin: a point
    @param k: An integer
    @return: the k closest points
    """
    def kClosest(self, points, origin, k):
        # write your code here
        tmpDict = {}
        res = []
        for i in range(len(points)):
            tmpDict[i] = abs(points[i].x - origin.x)**2 + abs(points[i].y - origin.y)**2 
        # sorted dictionary by values will return a list.    
        tmpDict = sorted(tmpDict.items(), key = lambda x: x[1])
        print(tmpDict)
        
        for i in range(k):
            res.append(points[tmpDict[i][0]])
        return res
                
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import heapq

"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""

class Solution:
    """
    @param points: a list of points
    @param origin: a point
    @param k: An integer
    @return: the k closest points
    """
    def kClosest(self, points, origin, k):
        self.heap = []
        for point in points:
            dist = self.getDistance(point, origin)
            heapq.heappush(self.heap, [dist, [point.x, point.y]])

        self.heap = heapq.nsmallest(k, self.heap)
        print(self.heap)

        ret = []
        for i in self.heap:
            ret.append(i[1])
        return ret

    def getDistance(self, a, b):
        return (a.x - b.x) ** 2 + (a.y - b.y) ** 2
