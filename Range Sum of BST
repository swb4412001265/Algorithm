1704. Range Sum of BST

Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

Example
Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
Notice
The number of nodes in the tree is at most 10000.
The final answer is guaranteed to be less than 2^31.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root node
    @param L: an integer
    @param R: an integer
    @return: the sum
    """
    def rangeSumBST(self, root, L, R):
        # write your code here.
        if not root:
            return 0
        self.res = 0
        self.helper(root, L, R)
        return self.res
        
    def helper(self, root, L, R):
        if not root:
            return
        if L <= root.val <= R:
            self.res += root.val
        if L < root.val:
            self.helper(root.left, L, R)
        if root.val < R:
            self.helper(root.right, L, R)
