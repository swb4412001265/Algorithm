246. Binary Tree Path Sum II
Your are given a binary tree in which each node contains a value. Design an algorithm to get all paths which sum to a given value. 
The path does not need to start or end at the root or a leaf, but it must go in a straight line down.

Example
Example 1:

Input:
{1,2,3,4,#,2}
6
Output:
[[2, 4],[1, 3, 2]]
Explanation:
The binary tree is like this:
    1
   / \
  2   3
 /   /
4   2
for target 6, it is obvious 2 + 4 = 6 and 1 + 3 + 2 = 6.
Example 2:

Input:
{1,2,3,4}
10
Output:
[]
Explanation:
The binary tree is like this:
    1
   / \
  2   3
 /   
4   
for target 10, there is no way to reach it.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @param: target: An integer
    @return: all valid paths
    """
    def binaryTreePathSum2(self, root, target):
        # write your code here
        if not root:
            return []
        self.res = []
        self.helper(root, target, [], 0)
        return self.res
    def helper(self, root, target,tmp, level):
        if not root:
            return 
        tmp.append(root.val)
        tmpVal = target
        for i in range(level, -1, -1):
            tmpVal -= tmp[i]
            if tmpVal == 0:
                self.res.append(tmp[i:])
        level += 1
        self.helper(root.left, target, tmp, level)
        self.helper(root.right, target, tmp, level)
        level -= 1
        tmp.pop()
        
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 """
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @param: target: An integer
    @return: all valid paths
    """
    def binaryTreePathSum2(self, root, target):
        # write your code here
        if not root:
            return []
        self.res = []
        self.helper(root, target, [], 0)
        return self.res
    def helper(self, root, target,tmp, level):
        if not root:
            return 
        
        tmp.append(root.val)
        tmpVal = target
        for i in range(level, -1, -1):
            tmpVal -= tmp[i]
            if tmpVal == 0:
                self.res.append(tmp[i:])
            
        self.helper(root.left, target, tmp, level + 1)
        self.helper(root.right, target, tmp, level + 1)
    
        tmp.pop()
