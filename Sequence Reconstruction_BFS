605. Sequence Reconstruction
中文English
Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 10^4. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.

Example
Example 1:

Input:org = [1,2,3], seqs = [[1,2],[1,3]]
Output: false
Explanation:
[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.
Example 2:

Input: org = [1,2,3], seqs = [[1,2]]
Output: false
Explanation:
The reconstructed sequence can only be [1,2].
Example 3:

Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
Output: true
Explanation:
The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].
Example 4:

Input:org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
Output:true

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param org: a permutation of the integers from 1 to n
    @param seqs: a list of sequences
    @return: true if it can be reconstructed only one or false
    """
    def sequenceReconstruction(self, org, seqs):
        # write your code here
        # in case [1] []
        # if not seqs:
        #     return False
        # # in case [] [[]]    
        # if not org:
        #     return True
        
        from queue import Queue
        q = Queue()
        res = []
        hash, inDegree = self.convertToGraph(seqs)
        for i in inDegree:
            if not inDegree[i]:
                q.put(i)
        while not q.empty():
            if q.qsize() > 1:
                return False
            tmp = q.get()
            res.append(tmp)
            for i in hash[tmp]:
                inDegree[i] -= 1
                if not inDegree[i]:
                    q.put(i)
        if org == res:
            return True
        return False

    def convertToGraph(self, seqs):
    # Can not use the definition below since seqs does not map org
    # like [1,3,4] [[1,2],[100000]] 100000 is not part of org
        # hash = {i :[] for i in range(1, len(org) + 1)}
        # inDegree = {i : 0 for i in range(1, len(org) + 1)}

        hash = {}
        inDegree = {}
        for i in seqs:
            for j in i:
                if j not in hash:
                    hash[j] = []
                if j not in inDegree:
                    inDegree[j] = 0
        for i in seqs:
            for j in range(len(i) - 1):
                hash[i[j]].append(i[j + 1])
                inDegree[i[j + 1]] += 1
        return hash, inDegree

        
