838. Subarray Sum Equals K
中文English
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example
Example1

Input: nums = [1,1,1] and k = 2
Output: 2
Explanation:
subarray [0,1] and [1,2]
Example2

Input: nums = [2,1,-1,1,2] and k = 3
Output: 4
Explanation:
subarray [0,1], [1,4], [0,3] and [3,4]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
计算Prefix_sum的过程中，
用HashMap 记录当前prefix_sum出现的次数，
当prefix_sum - k 出现在HashMap中，叠加count
时间复杂度为O(n)

class Solution:
    """
    @param nums: a list of integer
    @param k: an integer
    @return: return an integer, denote the number of continuous subarrays whose sum equals to k
    """
    def subarraySumEqualsK(self, nums, k):
        # write your code here
        count = 0 
        prefix_sum = 0
        prefix_sum_to_times = {0: 1}
        
        for num in nums:
            
            prefix_sum += num 
            
            if prefix_sum - k in prefix_sum_to_times:
                
                count += prefix_sum_to_times[prefix_sum - k]
                
            if prefix_sum in prefix_sum_to_times:
                
                prefix_sum_to_times[prefix_sum] += 1 
                
            else:
                
                prefix_sum_to_times[prefix_sum] = 1 
            
        return count
