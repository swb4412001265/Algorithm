97. Interleaving String
https://leetcode.com/problems/interleaving-string/
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.
Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.

/////////////////////////////////////////////////////////////partially work/////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        s1_len = len(s1)
        s2_len = len(s2)
        s3_len = len(s3)
        if s1_len + s2_len != s3_len:
            return False
        i = 0
        j = 0
        z = 0
        while i < s1_len and j < s2_len:
            if s1[i] == s3[z]:
                i += 1
            elif s2[j] == s3[z]:
                j += 1
            else:
                return False
            z += 1
        print("s1: ", s1[i:])
        print("s2: ", s2[j:])
        print("s3: ", s3[z:])
        if i != s1_len:
            if s1[i:] == s3[z:]:
                return True
        if j != s2_len:
            if s2[j:] == s3[z:]:
                return True
        return False
        

/////////////////////////////////////////////////////////////////////////////DFS///////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        self.s1_len = len(s1)
        self.s2_len = len(s2)
        self.s3_len = len(s3)
        if self.s1_len + self.s2_len != self.s3_len:
            return False
        tmp = set()
        return self.helper(0, 0, tmp, s1, s2, s3)
    
    def helper(self, i1, i2, tmp, s1, s2, s3):
        if self.s1_len - 1 == i1 and self.s2_len - 1 == i2:
            return True
        if (i1, i2) in tmp:
            return False
        i3 = i1 + i2
        tmp.add((i1, i2))
        if i1 == self.s1_len:
            if s3[i3:] == s2[i2:]:
                return True
        elif i2 == self.s2_len:
            if s1[i1:] == s3[i3:]:
                return True
        elif s1[i1] == s3[i3] and self.helper(i1 + 1, i2, tmp, s1, s2, s3):
            return True
        elif s2[i2] == s3[i3] and self.helper(i1, i2 + 1, tmp, s1, s2, s3):
            return True
        tmp.remove((i1, i2))
        # tmp.add((i1, i2))
        return False
