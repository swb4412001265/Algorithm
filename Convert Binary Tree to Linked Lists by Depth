/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @return a lists of linked list
     */
    vector<ListNode*> binaryTreeToLists(TreeNode* root) {
        // Write your code here
        queue<TreeNode*> Q;
        vector<ListNode*> result;
        ListNode *tmp;
        if(root == NULL) {
            return result;
        }
        ListNode *tmpList = NULL;
        TreeNode *tmpTree = NULL;
        Q.push(root);
        while(!Q.empty()){
            ListNode *dummy = new ListNode(0);
            tmpList = dummy;
            int qsize = Q.size();
            for(int i = 0; i < qsize; ++i) {
                tmpTree = Q.front();
                Q.pop();
                tmpList->next = new ListNode(tmpTree->val);
                tmpList = tmpList->next;
                if(tmpTree->left != NULL) {
                    Q.push(tmpTree->left);
                }
                if(tmpTree->right != NULL) {
                    Q.push(tmpTree->right);
                }
            }
            result.push_back(dummy->next);
        }
    }
};

///////////////////////////////////////////Python///////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
"""
class Solution:
    # @param {TreeNode} root the root of binary tree
    # @return {ListNode[]} a lists of linked list
    def binaryTreeToLists(self, root):
        # Write your code here
        if not root:
            return []
        from queue import Queue
        q = Queue()
        q.put(root)
        tmpList = []
        while not q.empty():
            dummy = ListNode(0)
            tmpNode = dummy
            tmpSize = q.qsize()
            for i in range(q.qsize()):
                tmp = q.get()
                dummy.next = ListNode(tmp.val)
                dummy = dummy.next
                tmpSize -= 1
                if not tmpSize:
                    tmpList.append(tmpNode.next)
                if tmp.left:
                    q.put(tmp.left)
                if tmp.right:
                    q.put(tmp.right)
        return tmpList
        
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 """
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None
"""
class Solution:
    # @param {TreeNode} root the root of binary tree
    # @return {ListNode[]} a lists of linked list
    def binaryTreeToLists(self, root):
        # Write your code here
        if not root:
            return []
        from queue import Queue
        q = Queue()
        q.put(root)
        tmpList = []
        while not q.empty():
            dummy = ListNode(0)
            tmpNode = dummy
            for i in range(q.qsize()):
                tmp = q.get()
                dummy.next = ListNode(tmp.val)
                dummy = dummy.next
                if tmp.left:
                    q.put(tmp.left)
                if tmp.right:
                    q.put(tmp.right)
            tmpList.append(tmpNode.next)
        return tmpList
