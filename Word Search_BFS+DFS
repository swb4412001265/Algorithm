123. Word Search
中文English
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example
Example 1:

Input：["ABCE","SFCS","ADEE"]，"ABCCED"
Output：true
Explanation：
[    
     A B C E
     S F C S 
     A D E E
]
(0,0)A->(0,1)B->(0,2)C->(1,2)C->(2,2)E->(2,1)D
Example 2:

Input：["z"]，"z"
Output：true
Explanation：
[ z ]
(0,0)z

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# class TrieNode:
#     def __init__(self):
#         self.children = {}
#         self.is_word = False



class Solution:
    """
    @param board: A list of lists of character
    @param word: A string
    @return: A boolean
    """
    # def __init__(self):
    #     self.root = TrieNode()
    
    def exist(self, board, word):
        # write your code here
        if not board:
            return False
        m = len(board)
        n = len(board[0])
        if not n:
            return False
        q = []
        
        if m == 1 and board[0][0] == word:
            return True
            
        visited = [[False for i in range(n)] for j in range(m)]
        print(visited)
        for j in range(m):
            for k in range(n):
                if board[j][k] == word[0]:
                    q.append((j, k))
                    if self.dfs(board, word[1:], q, visited, m, n):
                        return True
        return False
                    
    def dfs(self, board, word, q, visited, m, n):    
        dx = [-1, 0, 0, 1]
        dy = [0, 1, -1, 0]
        if word == "":
            return True
        while len(q):
            x, y = q.pop()
            visited[x][y] = True
            for i in range(4):
                tmp_x = x + dx[i]
                tmp_y = y + dy[i]
                if tmp_x >= 0 and tmp_x < m and tmp_y >= 0 and tmp_y < n and visited[tmp_x][tmp_y] == False and word[0] == board[tmp_x][tmp_y]:
                    q.append((tmp_x, tmp_y))
                    visited[tmp_x][tmp_y] = True
                    if self.dfs(board, word[1:], q, visited, m, n):
                        return True
                    visited[tmp_x][tmp_y] = False
        return False
                        
                
        
    
