class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
         if(grid.empty() || grid[0].empty()) {
            return 0;
        }
        
        int result = 0;
        int row = grid.size();
        int colomn = grid[0].size();
       
        for(int i = 0; i < row; ++i) {
            for (int j = 0; j < colomn; ++j) {
                if(grid[i][j] == true) {
                    BFS(grid, i, j);
                    result++;
                }
            }
        }
        return result;
    }
    
    void BFS(vector<vector<bool> >& grid, int i, int j) {
        grid[i][j] = false;
        int x[4] = {0, -1, 0, 1};
        int y[4] = {-1, 0, 1, 0};
        queue<pair<int, int> > Q;
        Q.push(make_pair(i, j));
        while(!Q.empty()) {
            pair<int,int> head = Q.front();
            Q.pop();
            for(int z = 0; z < 4; ++z) {
                pair<int,int> tmp;
                tmp.first = head.first + x[z];
                tmp.second = head.second + y[z];
                //坐标的边界是 size() - 1 不是 size()
                if(tmp.first < 0 || tmp.first > grid.size() - 1 || tmp.second < 0 || tmp.second > grid[0].size() - 1) {
                    continue;
                }
                if(grid[tmp.first][tmp.second] == true) {
                    grid[tmp.first][tmp.second] = false;
                    Q.push(tmp);
                }
            }
        }
    }
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param grid: a boolean 2D matrix
    @return: an integer
    """
    def numIslands(self, grid):
        # write your code here
        islandCount = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    self.transferGrid(grid, i, j)
                    islandCount += 1
        return islandCount
                
    def transferGrid(self, grid, i, j):
        from queue import Queue
        q = Queue()
        q.put([i, j])
        x = [0, 1, 0, -1]
        y = [1, 0, -1, 0]
        x_max = len(grid[0])
        y_max = len(grid)
        while not q.empty():
            i, j = q.get()
            for i in range(4):
                tmp_x = i + x[i]
                tmp_y = j + y[i]
                if tmp_x >= 0 and tmp_x < x_max and tmp_y >= 0 and tmp_y < y_max:
                    if grid[tmp_x][tmp_y] == 1:
                        q.put([tmp_x, tmp_y])
                        grid[tmp_x][tmp_y] = 0
        
        
