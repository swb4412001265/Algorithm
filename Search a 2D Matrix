28. Search a 2D Matrix

Write an efficient algorithm that searches for a value in an m x n matrix.

This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example
Example 1:
	Input:  [[5]],2
	Output: false
	
	Explanation: 
	false if not included.
	
Example 2:
	Input:  [
    [1, 3, 5, 7],
    [10, 11, 16, 20],
    [23, 30, 34, 50]
],3
	Output: true
	
	Explanation: 
	return true if included.
Challenge
O(log(n) + log(m)) time

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: matrix: matrix, a list of lists of integers
    @param: target: An integer
    @return: a boolean, indicate whether matrix contains target
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if matrix is None or len(matrix) == 0 :
            return False
        tmpList = []
        for i in matrix:
            for j in i:
                tmpList.append(j)
        start = 0
        end = len(tmpList) - 1
        while start + 1 < end:
            mid = int(start + (end - start) / 2)
            if tmpList[mid] < target:
                start = mid
            if tmpList[mid] > target:
                end = mid
            if tmpList[mid] == target:
                return True
                
        if tmpList[start] == target or tmpList[end] == target:
            return True
        return False
            
            
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param matrix: matrix, a list of lists of integers
    @param target: An integer
    @return: a boolean, indicate whether matrix contains target
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if not matrix:
            return False
        
        y = len(matrix)
        x = len(matrix[0])
        start = 0
        end = x * y - 1
        while start + 1 < end:
            mid = int((start + end) / 2)
            if matrix[int(mid / x)][mid % x ] > target:
                end = mid
            if matrix[int(mid / x)][mid % x] < target:
                start = mid 
            if matrix[int(mid / x)][mid % x ] == target:
                return True
            
        if matrix[int(start / x)][start % x] == target \
            or matrix[int(end / x)][end % x] == target:
            return True
        return False
            
