98. Sort List
中文English
Sort a linked list in O(n log n) time using constant space complexity.

Example
Example 1:

Input:  1->3->2->null
Output:  1->2->3->null
Example 2:

Input: 1->7->2->6->null
Output: 1->2->6->7->null	
Challenge
Solve it by merge sort & quick sort separately.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {            
    private ListNode findMiddle(ListNode head) {
        ListNode slow = head, fast = head.next;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    }    

    private ListNode merge(ListNode head1, ListNode head2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        while (head1 != null && head2 != null) {
            if (head1.val < head2.val) {
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }
        if (head1 != null) {
            tail.next = head1;
        } else {
            tail.next = head2;
        }

        return dummy.next;
    }

    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode mid = findMiddle(head);

        ListNode right = sortList(mid.next);
        mid.next = null;
        ListNode left = sortList(head);

        return merge(left, right);
    }
}

//////////////////////////////////////////////////////Merge Sort/////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: The head of linked list.
    @return: You should return the head of the sorted linked list, using constant space complexity.
    """
    def sortList(self, head):
        # write your code here
        # there is a key that head,next == None not just head == None
        if head == None or head.next == None:
            return head
        
        mid = self.findMidNode(head)
        right = self.sortList(mid.next)
        mid.next = None
        left = self.sortList(head)
        return self.mergeSort(left, right)
    
    
    def findMidNode(self, head):
        slowNode = head
        fastNode = head.next
        while fastNode != None and fastNode.next != None:
            slowNode = slowNode.next
            fastNode = fastNode.next.next
        return slowNode

    def mergeSort(self, list1, list2):
        dummy = ListNode(-1)
        tmp = dummy  
        while list1 != None and list2 != None:
            if list1.val < list2.val:
                tmp.next = list1
                list1 = list1.next
            else:
                tmp.next = list2
                list2 = list2.next
            tmp = tmp.next
        if list1 != None:
            tmp.next = list1
        if list2 != None:
            tmp.next = list2
        return dummy.next
        
        
            
            
