388. Permutation Sequence

Given n and k, find the kth permutation of the dictionary order in the full permutation of n.

Example
Example 1:

Input: n = 3, k = 4
Output: "231"
Explanation:
For n = 3, all permutations are listed as follows:
"123", "132", "213", "231", "312", "321"
Example 2:

Input: n = 1, k = 1
Output: "1"
Challenge
O(n*k) in time complexity is easy, can you do it in O(n^2) or less?

Notice
1 ≤ n ≤ 9
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param n: n
    @param k: the k th permutation
    @return: return the k-th permutation
    """
    def getPermutation(self, n, k):
        # write your code here
        self.res = []
        visit = [False for _ in range(n)]
        self.DFS(n, "", visit)
        return self.res[k - 1]
        
        
    def DFS(self, n, tmp, visit):
        if len(tmp) == n:
            self.res.append(tmp)
        for i in range(1, n + 1):
            if visit[i - 1] == True:
                continue
            tmp += str(i)
            visit[i - 1] = True
            self.DFS(n, tmp, visit)
            tmp = tmp[:-1]
            visit[i - 1] = False
            
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param n: n
    @param k: the k th permutation
    @return: return the k-th permutation
    """
    def getPermutation(self, n, k):
        # write your code here
        tmpList = [str(i) for i in range(1, n + 1)]
        visited = [False for _ in range(n)]
        self.res = ""
        self.count = 0
        self.helper(tmpList, k, "", visited)
        return self.res
        
        
    def helper(self, n, k, tmpString, visited):
        if len(tmpString) == len(n):
            self.count += 1
            if self.count == k:
                self.res = tmpString    
    
        for i in range(len(n)):
            if visited[i]:
                continue
            
            visited[i] = True
            self.helper(n, k, tmpString + n[i], visited)
            visited[i] = False
            
        
