134. LRU Cache
中文English
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
Finally, you need to return the data from each get.

Example
Example1

Input:
LRUCache(2)
set(2, 1)
set(1, 1)
get(2)
set(4, 1)
get(1)
get(2)
Output: [1,-1,1]
Explanation：
cache cap is 2，set(2,1)，set(1, 1)，get(2) and return 1，set(4,1) and delete (1,1)，because （1,1）is the least use，get(1) and return -1，get(2) and return 1.
Example 2:

Input：
LRUCache(1)
set(2, 1)
get(2)
set(3, 2)
get(2)
get(3)
Output：[1,-1,2]
Explanation：
cache cap is 1，set(2,1)，get(2) and return 1，set(3,2) and delete (2,1)，get(2) and return -1，get(3) and return 2.

//////////////////////////////////////////////////////To be Continue/////////////////////////////////////////////////////////////////////
class LinkedList:
    def __init__(self, val = 0, next = None):
        self.val = val
        self.next = next



class LRUCache:
    """
    @param: capacity: An integer
    """
    def __init__(self, capacity):
        # do intialization if necessary
        self.capacity = capacity
        self.dummy = LinkedList(0)
        self.tail = dummy.next
        self.head = None
        self.hash = {}
        
    def moveToFront(self, key):
        tmp = self.hash[key].next
        self.hash[key].next = self.hash[key].next.next
        self.hash[key] = self.head
        self.head.next = tmp
        self.head = tmp
        
        
    """
    @param: key: An integer
    @return: An integer
    """
    def get(self, key):
        # write your code here
        if key in self.hash:
            self.moveToFront(key)
            
            return self.hash[key].next
        else:
            return -1

    def removeTail(self, key):
        self.dummy.next = self.dummy.next.next
        self.hash

    """
    @param: key: An integer
    @param: value: An integer
    @return: nothing
    """
    def set(self, key, value):
        # write your code here
        if not len(self.hash):
            self.head = LinkedList(value)
            self.dummy.next = self.head
            self.hash[key] = dummy
            
        elif len(self.hash) < self.capacity:
            self.head.next = LinkedList(value)
            self.hash[key].next = self.head.next
            self.head = self.hash[key].next
        else:
            del self.hash[]
            
            
