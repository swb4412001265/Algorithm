////////////////////////////////////////O(nlogn)////////////////////////////////////////////////////////////////

class TwoSum {
public:

    // Add the number to an internal data structure.
    vector<int> array;
    void add(int number) {
        // Write your code here
        array.push_back(number);
        return;
    }

    // Find if there exists any pair of numbers which sum is equal to the value.
    bool find(int value) {
        // Write your code here
        sort(array.begin(), array.end());
        int start = 0;
        int end = array.size() - 1;
        int flag = false;
        while(start < end) {
            if(array[start] + array[end] > value) {
                end--;
            } 
            if(array[start] + array[end] < value) {
                start++;
            }
            if(array[start] + array[end] == value) {
                flag = true;
                break;
            }
        }
        return flag;
    }
};

// Your TwoSum object will be instantiated and called as such:
// TwoSum twoSum;
// twoSum.add(number);
// twoSum.find(value);


////////////////////////////////////////////////////Time: O(n) + Space: O(n)///////////////////////////////////////////////////////
class TwoSum {
public:

    // Add the number to an internal data structure.
    vector<int> array;
    void add(int number) {
        // Write your code here
        array.push_back(number);
        return;
    }

    // Find if there exists any pair of numbers which sum is equal to the value.
    bool find(int value) {
        // Write your code here
        unordered_set<int> hash;
        for(int i = 0; i < array.size(); ++i) {
            if(hash.find(value - array[i]) == hash.end()) {
                hash.insert(array[i]);
            } else {
                return true;
            }
        }
        return false;
    }
};


//////////////////////////////////Python Exceed Time Limit//////////////////////////////////////////////

class TwoSum:
    """
    @param: number: An integer
    @return: nothing
    """
    x = []
    def add(self, number):
        # write your code here
        # self.x = []
        self.x.append(number)

    """
    @param: value: An integer
    @return: Find if there exists any pair of numbers which sum is equal to the value.
    """
    def find(self, value):
        # write your code here
        import copy
        for i in range(len(self.x)):
            tmp = copy.deepcopy(self.x)
            tmpVal = value - tmp[i]
            tmp.remove(tmp[i])
            # print tmp
            if tmpVal in tmp:
                return True
        return False



////////////////////////////////O(nlogn)/////////////////////////////////////////////////////


class TwoSum:
    """
    @param: number: An integer
    @return: nothing
    """
    def __init__(self):
        self.x = []
    def add(self, number):
        # write your code here
        self.x.append(number)
    """
    @param: value: An integer
    @return: Find if there exists any pair of numbers which sum is equal to the value.
    """
    def find(self, value):
        # write your code here
        self.x.sort()
        start = 0
        end = len(self.x) - 1
        while start < end:
            if self.x[start] + self.x[end] > value:
                end -= 1
            elif self.x[start] + self.x[end] < value:
                start += 1
            else: 
                self.x[start] + self.x[end] == value
                return True
        return False
        
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 class Solution:
    """
    @param numbers: An array of Integer
    @param target: target = numbers[index1] + numbers[index2]
    @return: [index1, index2] (index1 < index2)
    """
    def twoSum(self, numbers, target):
        # write your code here
        for i in range(len(numbers)):
            if target - numbers[i] in numbers[i+1:]:
                return [i, numbers[i + 1:].index(target - numbers[i]) + i + 1]
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 class Solution(object):
    def twoSum(self, nums, target):
        #hash用于建立数值到下标的映射
        hash = {}
        #循环nums数值，并添加映射
        for i in range(len(nums)):
            if target - nums[i] in hash:
                return [hash[target - nums[i]], i]
            hash[nums[i]] = i
        #无解的情况
        return [-1, -1]
