902. Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Example
Given root = {1,#,2}, k = 2, return 2.

Challenge
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Notice
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

////////////////////////////////////////////////////////////////////////

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the given BST
    @param k: the given k
    @return: the kth smallest element in BST
    """
    def kthSmallest(self, root, k):
        # write your code here
        if root == None:
            return None
        if k == 0:
            return None
            
        self.tmp = []
        self.helper(root)
        
        import heapq
        return heapq.nsmallest(k, self.tmp)[-1]
        
    
    def helper(self, root):
        if root == None:
            return
        self.tmp.append(root.val)
        self.helper(root.left)
        self.helper(root.right)
        
