1091. Shortest Path in Binary Matrix
Medium
In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if not grid:
            return -1
        if len(grid[0]) == 0:
            return -1
        
        dx = [-1, -1, 0, 1, 1, 1, 0, -1]
        dy = [0, 1, 1, 1, 0, -1, -1, -1]
        x = len(grid)
        y = len(grid[0])
        if grid[0][0] == 1 or grid[x - 1][y - 1] == 1:
            return -1
        if x == 1 and y == 1:
            return 1
        visited = [[False for _ in range(y)] for _ in range(x)]
        from queue import Queue
        q = Queue()
        q.put((0, 0))
        visited[0][0] = True
        res = 1
        while not q.empty():
            res += 1
            for i in range(q.qsize()):
                tmp_x, tmp_y = q.get()
                for i in range(8):
                    _x = tmp_x + dx[i]
                    _y = tmp_y + dy[i]
                    if 0 <= _x < x and 0 <= _y < y:
                        if _x == x - 1 and _y == y - 1:
                            return res
                        elif grid[_x][_y] == 0 and visited[_x][_y] == False:
                            q.put((_x, _y))
                            visited[_x][_y] = True
        return -1
        
        
