453. Flatten Binary Tree to Linked List
Flatten a binary tree to a fake "linked list" in pre-order traversal.

Here we use the right pointer in TreeNode as the next pointer in ListNode.

Example
              1
               \
     1          2
    / \          \
   2   5    =>    3
  / \   \          \
 3   4   6          4
                     \
                      5
                       \
                        6
                        
                        
                        
                        """
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: a TreeNode, the root of the binary tree
    @return: nothing
    """
    newnode = None
    def flatten(self, root):
        # write your code here
        if root == None:
            return
        
        if self.newnode != None:
            self.newnode.left = None
            self.newnode.right = root 
        
        self.newnode = root
        # root has changed, so can not use self.flatten(root.right) but right = root.right
        right = root.right
        
        self.flatten(root.left)
        self.flatten(right)
        
        
        
             
        //////////////////////////////Divided Conquer////////////////////////////////////
        """
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: a TreeNode, the root of the binary tree
    @return: nothing
    """
    def flatten(self, root):
        # write your code here
        self.helper(root)
        
     #Return the lastNode of the tree
    def helper(self, root):
        if root == None:
            return None
        
        left = self.helper(root.left)
        right = self.helper(root.right)
        
        
        if left != None:
        # Append root.right to left tree's lastNode
            left.right = root.right
        # Append root's left tree to root's right node
            root.right = root.left
        # Change the left Node to None
            root.left = None
            
        # the lastNode of either left tree or right tree should not be None
        if right != None:
            return right
            
        if left != None:
            return left
        
        return root
        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param: root: a TreeNode, the root of the binary tree
    @return: 
    """
    x = []
    def flatten(self, root):
        # write your code here
        if root is None:
            return
        self.helper(root)
        for i in range(len(self.x) - 1):
            self.x[i].left = None
            self.x[i].right = self.x[i + 1]
        self.x[-1].left = self.x[-1].right = None
        
    def helper(self, root):
        if root is None:
            return
        self.x.append(root)
        self.helper(root.left)
        self.helper(root.right)
