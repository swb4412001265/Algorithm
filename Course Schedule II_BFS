616. Course Schedule II
中文English
There are a total of n courses you have to take, labeled from 0 to n - 1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.

Example
Example 1:

Input: n = 2, prerequisites = [[1,0]] 
Output: [0,1]
Example 2:

Input: n = 4, prerequisites = [1,0],[2,0],[3,1],[3,2]] 
Output: [0,1,2,3] or [0,2,1,3]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param numCourses a total of n courses
     * @param prerequisites a list of prerequisite pairs
     * @return the course order
     */
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        // Write your code here
        vector<int> result;
        if(numCourses == 0) {
            return result;
        }
        unordered_map<int, int> inCount = inDegree(numCourses, prerequisites);
        queue<int> Q;
        for(auto& n : inCount) {
            if(n.second == 0) {
                Q.push(n.first);
            }
        }
        while(!Q.empty()) {
            int head = Q.front();
            Q.pop();
            result.push_back(head);
            for(auto& n : prerequisites) {
                if(n.second == head) {
                    inCount[n.first] = inCount[n.first] - 1;
                }
                if(inCount[n.first] == 0) {
                    Q.push(n.first);
                }
            }        
        }
        if(result.size() == numCourses) {
            return result;
        } else {
            vector<int> emptyArray;
            return emptyArray;
        }
        
    }    
    unordered_map<int, int> inDegree(int numCourses, vector<pair<int, int>> prerequisites) {
        unordered_map<int, int> result;
        for(int i = 0; i < numCourses; ++i) {
            result[i] = 0;
        }
        for(auto& n : prerequisites) {
            result[n.first] = result[n.first] + 1;
        }
        return result;
    }    
};


////////////////////////////////////////////solution 2/////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    /**
     * @param numCourses a total of n courses
     * @param prerequisites a list of prerequisite pairs
     * @return the course order
     */
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        // Write your code here
        vector<int> result;
        vector<vector<int> > graph(numCourses, vector<int>(0));
        vector<int> inDegree(numCourses, 0);
        int m = prerequisites.size();
        if( numCourses <= 0) {
            return result;
        }
        /*
        if(m == 0) {
            for(int i = 0; i < numCourses; ++i) {
                result.push_back(i);
            }
            return result;
        }
        */
        for(int i = 0; i < m; ++i) {
            graph[prerequisites[i].second].push_back(prerequisites[i].first);
            ++inDegree[prerequisites[i].first];
        }
        queue<int> q;
        for(int i = 0; i < numCourses; ++i) {
            if(inDegree[i] == 0) {
                q.push(i);
            }
        }
        while(!q.empty()) {
            int tmp = q.front();
            q.pop();
            result.push_back(tmp);
            for(auto &x : graph[tmp]) {
                --inDegree[x];
                if(inDegree[x] == 0) {
                    q.push(x);
                }
            }
        }    
        for(int i = 0; i < numCourses; ++i) {
            if(inDegree[i] != 0) {
                return {};
            }
        }
        return result;
    }
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: numCourses: a total of n courses
    @param: prerequisites: a list of prerequisite pairs
    @return: the course order
    """
    def findOrder(self, numCourses, prerequisites):
        # write your code here
        if numCourses == 0:
            return []
        if not prerequisites:
            return [x for x in range(numCourses)]
        preGraph, inDegree = self.preGraph(numCourses, prerequisites)
        from queue import Queue
        q = Queue()
        res = []
        for i, j in inDegree.items():
            if j == 0:
                q.put(i)
        while not q.empty():
            tmp = q.get()
            res.append(tmp)
            for i in preGraph[tmp]:
                inDegree[i] -= 1
                if inDegree[i] == 0:
                    q.put(i)
        if len(res) == numCourses:
            return res
        return []
        
    def preGraph(self, numCourses, prerequisites):
        courseMapping = {x:[] for x in range(numCourses)}
        inDegree = {x:0 for x in range(numCourses)}
        for i in prerequisites:
            courseMapping[i[1]].append(i[0])
            inDegree[i[0]] += 1
        return courseMapping, inDegree
    
