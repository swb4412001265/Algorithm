200. Longest Palindromic Substring
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

Example
Given the string = "abcdzdcab", return "cdzdc".

Challenge
O(n2) time is acceptable. Can you do it in O(n) time.

////////////////////////////////////////////////////////////////O(n3)///////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: input string
    @return: the longest palindromic substring
    """
    def longestPalindrome(self, s):
        # write your code here
        if s == None:
        # it is the same as if if not s:
            return None
        if len(s) == 0:
            return None
        maxsize = 0
        res = ""
        for i in range(len(s)):
            for j in range(i + 1):
                if self.isPalindrome(s[j:i + 1]):
                    if maxsize < i - j + 1:
                        maxsize = i - j + 1
                        res = s[j:i + 1]
        return res
                    
        
        
    def isPalindrome(self, s):
        i = 0
        j = len(s) - 1
        while i <= j:
            if s[i] != s[j]:
                return False
            i += 1
            j -= 1
        return True

////////////////////////////////////////////////////////////////////////////////////////
