110 · Minimum Path Sum

Description
Given a m * nm∗n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

The robot can only move either down or right at any point in time.

Example
Example 1:

Input:

grid = [[1,3,1],[1,5,1],[4,2,1]]
Output:

7
Explanation:

Path is: 1 -> 3 -> 1 -> 1 -> 1

Example 2:

Input:

grid = [[1,3,2]]
Output:

6
Explanation:

Path is: 1 -> 3 -> 2

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param grid: a list of lists of integers
    @return: An integer, minimizes the sum of all numbers along its path
    """
    def minPathSum(self, grid):
        # write your code here
        if not grid:
            return 0 
        if not grid[0]:
            return 0
            
        row = len(grid)
        col = len(grid[0])
     
        f = [[sys.maxsize] * col] * row

        f[0][0] = grid[0][0]

        for i in range(1, col):
            f[0][i] = f[0][i -1] + grid[0][i]
        for i in range(1, row):
            f[i][0] = f[i - 1][0] + grid[i][0]
        
        for i in range(1, row):
            for j in range(1, col):
                f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j]
        return f[row - 1][col - 1]
