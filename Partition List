96. Partition List
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example
Given 1->4->3->2->5->2->null and x = 3,
return 1->2->2->4->3->5->null.

/////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: The first node of linked list
    @param x: An integer
    @return: A ListNode
    """
    def partition(self, head, x):
        # write your code here
        if head == None:
            return None
        dummyPre = ListNode(-1)
        headPre = dummyPre
        dummyAfter = ListNode(-1)
        headAfter = dummyAfter
        # Create two lists one called dummyPre which is for storing linkedList which value smaller than x
        # another linkedList is for storing value greater and equal than x
        # after iterate head list, merge these two linkedList
        # Need to create two dummy nodes for two linkedList
        while head != None:
            if head.val < x:
                headPre.next = head
                headPre = headPre.next
            else:
                headAfter.next = head
                headAfter = headAfter.next
            head = head.next
        headPre.next = dummyAfter.next
        headAfter.next = None
        return dummyPre.next

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of singly-linked-list:
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *        this->val = val;
 *        this->next = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param head: The first node of linked list
     * @param x: An integer
     * @return: A ListNode
     */
    ListNode * partition(ListNode * head, int x) {
        // write your code here
        if (head == NULL) {
            return 0;
        }
        
        ListNode *head1 = new ListNode(-1);
        ListNode *dummmy1 = head1;
        ListNode *head2 = new ListNode(-1);
        ListNode *dummmy2 = head2;
        
        while (head != NULL) {
            if (head->val >= x) {
                head2->next = head;
                head2 = head2->next;
            } else {
                head1->next = head;
                head1 = head1->next;
            }
            head = head->next;
        }
        head1->next = dummmy2->next;
        head2->next = NULL;
        return dummmy1->next;
    }
};
