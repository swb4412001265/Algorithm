380. Intersection of Two Linked Lists
中文English
Write a program to find the node at which the intersection of two singly linked lists begins.

Example
Example 1:

Input:
	A:          a1 → a2
	                   ↘
	                     c1 → c2 → c3
	                   ↗            
	B:     b1 → b2 → b3
Output: c1
Explanation ：begin to intersect at node c1.
Example 2:

Input:
Intersected at 6
1->2->3->4->5->6->7->8->9->10->11->12->13->null
6->7->8->9->10->11->12->13->null
Output: Intersected at 6
Explanation：begin to intersect at node 6.
Challenge
Your code should preferably run in O(n) time and use only O(1) memory.

Notice
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.


/////////////////////////////////////////////////////To be continue/////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param headA: the first list
    @param headB: the second list
    @return: a ListNode
    """
    def getIntersectionNode(self, headA, headB):
        # write your code here
        dictA = []
        dictB = []
        if not headA or not headB:
            return None
        while not headA:
            dictA.append(headA)
            headA = headA.next
        print(headA)
        
        while not headB:
            dictB.append(headB)
            headB = headB.next
        print(headB)
            
        keysA = dictA[::-1]
        keysB = dictB[::-1]
        
        # print(keysA)
        # print(keysB)
        
        i = 0
        while i < len(keysA) and i < len(keysB):
            if keysA[i] != keysB[i]:
                return keysB[i].next
            i += 1
        if len(keysA) > len(keysB):
            return keysA[i].next
        else:
            return keysB[i].next
            
