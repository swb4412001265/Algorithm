/**
 * Definition for a point.
 * struct Point {
 *     int x, y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    /**
     * @param grid a chessboard included 0 (false) and 1 (true)
     * @param source, destination a point
     * @return the shortest path 
     */
    int shortestPath(vector<vector<bool>>& grid, Point& source, Point& destination) {
        // Write your code here
        int m = grid.size();
        int n = grid[0].size();
        if (grid[source.x][source.y] == true || grid[destination.x][destination.y] == true
            || m == 0 || n ==0) {
            return -1;
        }
        
        vector<Point> layer;
        vector<vector<Point>> tmp;
        queue<Point> Queue;
        int movement[8][2] = {{1,2},{1,-2},{-1,2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};
        Queue.push(source);
        
        while (!Queue.empty()) {
            Point head = Queue.front();
            Queue.pop();
            for (int i = 0; i < 8; ++i) {
                int x = head.x + movement[i][0];
                int y = head.y + movement[i][1];
                if (x == destination.x && y ==destination.y) {
                    grid[x][y] = true;
                    layer.push_back(head);
                    return tmp.size() + 1;
                    //break;
                }
                if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == false) {
                    grid[x][y] = true;
                    Queue.push(Point(x,y));
                    layer.push_back(head);
                }
            }
            tmp.push_back(layer);
        }
            return -1;
    }
};
