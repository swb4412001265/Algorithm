class position {
public :
    int x;
    int y;
    position(int x, int y){
        this->x = x;
        this->y = y;
    }
};
class Solution {
public:
    /**
     * @param grid  a 2D integer grid
     * @return an integer
     */
    int zombie(vector<vector<int>>& grid) {
        // Write your code here
        queue<position> Q;
        int m = grid.size();
        int n = grid[0].size();
        
        //consider cornor case
        if(m == 0 || n == 0){
            return 0;
        }
        
        // find all the zombie and put into Q
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] == 1){
                    Q.push(position(i,j));
                }
            }
        }
        
        //define movement
        
        int move[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
        int day = 0;
        //process queue
        while(!Q.empty()){
            day++;
            int size = Q.size();
            for(int i = 0; i < size; ++i){
                position head = Q.front();
                Q.pop();
                // move zombie to all directions
                for(int k = 0; k < 4; ++k){
                    int x = head.x + move[k][0];
                    int y = head.y + move[k][1];
                    //check if zombie affects people 
                    if(x>=0 && x<m && y>=0 && y<n && grid[x][y]==0){
                        grid[x][y] = 1;
                        Q.push(position(x, y));
                    }
                    
                }
            }
            
            
        }
        //check if there is still people existing(which 0), if yes, return -1
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] == 0){
                    return -1;
                }
            }
        }
        return day - 1;
    }
};
