LintCode-Logo
Home
Algorithms
AI
CATnew
VIP
Language
avatarswb441200165
Back
71. Binary Tree Zigzag Level Order Traversal
Description
中文
English
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

Have you met this question in a real interview?  
Example
Example 1:

Input:
{1,2,3}
Output:
[[1],[3,2]]
Explanation:
    1
   / \
  2   3
Example 2:

Input:
{3,9,20,#,#,15,7}
Output:
[
  [3],
  [20,9],
  [15,7]
]
Explanation:
    3
   / \
  9  20
    /  \
   15   7

DifficultyMedium
Total Accepted14884
Total Submitted46208
Accepted Rate32%
 Show Tags
 Company
Leaderboard - Python3

982140351
61ms

andy_0212
61ms

sally76
61ms

zhongft
63ms

cmolify
64ms
Note
""" Definition of TreeNode: class TreeNode: def __init__(self, val): self.val = val self.left, self.right = None, None """ class Solution: """ @param root: A Tree @return: A list of lists of integer include the zigzag level order traversal of its nodes' values. """ def zigzagLevelOrder(self, root): # Fun DFS way to solve it # def findDepth(root, depth): # if root is None: # return depth-1 # return max(findDepth(root.left, depth+1), findDepth(root.right, depth+1)) # depth = findDepth(root, 1) # ans = [ [] for _ in range(depth) ] # def dfs(root, level): # if not root: # return # ans[level].append(root.val) # dfs(root.left, level+1) # dfs(root.right, level+1) # dfs(root, 0) # for i in range(len(ans)): # if i % 2 == 1: # ans[i].reverse() # return ans # traditional BFS 分層遍歷, remember always pop then append. if not root: return [] ans = [] from collections import deque q = deque() q.append(root) level = 0 while q: qsize = len(q) level += 1 lst = [] for i in range(qsize): node = q.popleft() lst.append(node.val) if node.left: q.append(node.left) if node.right: q.append(node.right) if level % 2 == 0: lst.reverse() ans.append(lst) return ans
avatarandy15
Created at 9 hours ago
public List<List<Integer>> zigzagLevelOrder(TreeNode root) { // write your code here List<List<Integer>> res=new ArrayList<>(); if(root==null) return res; Stack<TreeNode> s1=new Stack<>(); Stack<TreeNode> s2=new Stack<>(); s1.push(root); boolean f=true; while(!s1.isEmpty()){ // top level List<Integer> l=new ArrayList<>(); while(!s1.isEmpty()){ TreeNode n=s1.pop(); l.add(n.val); if(f){ if(n.left!=null){ s2.push(n.left); } if(n.right!=null){ s2.push(n.right); } }else{ if(n.right!=null){ s2.push(n.right); } if(n.left!=null){ s2.push(n.left); } } } f=!f; Stack<TreeNode> temp=s1; s1=s2; s2=temp; res.add(l); } return res; }
avatarshawn_sg
Created at 3 days ago
1.数据结构：节点+level, Level start 0, 偶数->，奇数<- 2.队列层次遍历，缓存队列前一个节点preLevel, preValue 3.curLevel if cur.level==1 && cur.level>preLevel: queue->stack 出栈
avatarmelon72
Created at 17 days ago
Discuss
No topic
  
71. Binary Tree Zigzag Level Order Traversal
中文English
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

Example
Example 1:

Input:
{1,2,3}
Output:
[[1],[3,2]]
Explanation:
    1
   / \
  2   3
Example 2:

Input:
{3,9,20,#,#,15,7}
Output:
[
  [3],
  [20,9],
  [15,7]
]
Explanation:
    3
   / \
  9  20
    /  \
   15   7

{1,2,3}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
    """
    def zigzagLevelOrder(self, root):
        # write your code here
        if root == None:
            return []
        from queue import Queue
        q = Queue()
        q.put(root)
        res = []
        levelcount = 0
        while not q.empty():
            leveltmp = []
            for i in range(q.qsize()):
                tmp = q.get()
                if levelcount % 2 == 0:
                    leveltmp.append(tmp.val)
                else:
                    leveltmp.insert(0, tmp.val)
                if tmp.left != None:
                    q.put(tmp.left)
                if tmp.right != None:
                    q.put(tmp.right)
            res.append(leveltmp[:])
            levelcount += 1
        return res
                
                    
