71. Binary Tree Zigzag Level Order Traversal
中文English
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

Example
Example 1:

Input:
{1,2,3}
Output:
[[1],[3,2]]
Explanation:
    1
   / \
  2   3
Example 2:

Input:
{3,9,20,#,#,15,7}
Output:
[
  [3],
  [20,9],
  [15,7]
]
Explanation:
    3
   / \
  9  20
    /  \
   15   7

{1,2,3}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
    """
    def zigzagLevelOrder(self, root):
        # write your code here
        if root == None:
            return []
        from queue import Queue
        q = Queue()
        q.put(root)
        res = []
        levelcount = 0
        while not q.empty():
            leveltmp = []
            for i in range(q.qsize()):
                tmp = q.get()
                if levelcount % 2 == 0:
                    leveltmp.append(tmp.val)
                else:
                    leveltmp.insert(0, tmp.val)
                if tmp.left != None:
                    q.put(tmp.left)
                if tmp.right != None:
                    q.put(tmp.right)
            res.append(leveltmp[:])
            levelcount += 1
        return res
                
                    
