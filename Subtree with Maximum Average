597. Subtree with Maximum Average

Given a binary tree, find the subtree with maximum average. Return the root of the subtree.

Example
Example 1

Input：
{1,-5,11,1,2,4,-2}
Output：11
Explanation:
The tree is look like this:
     1
   /   \
 -5     11
 / \   /  \
1   2 4    -2 
The average of subtree of 11 is 4.3333, is the maximun.
Example 2

Input：
{1,-5,11}
Output：11
Explanation:
     1
   /   \
 -5     11
The average of subtree of 1,-5,11 is 2.333,-5,11. So the subtree of 11 is the maximun.
Notice
LintCode will print the subtree which root is your return node.
It's guaranteed that there is only one subtree with maximum average.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right>;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right> = NULL;
 *     }
 * }
 */
 
class resultType {
public:    
    int sum;
    int size;
    resultType():sum(0), size(0) {}
    resultType(int _sum, int _size){
        this->sum = _sum;
        this->size = _size;
    }
};

class Solution {
public:
    /**
     * @param root the root of binary tree
     * @return the root of the maximum average of subtree 
     */
    resultType average;
    TreeNode *node = new TreeNode;
    //node = NULL;
    
    resultType help(TreeNode* root) {
        if(root == NULL){
            return resultType();
        }
        resultType left = help(root->left);
        resultType right = help(root->right);
        
        resultType result = resultType(left.sum + right.sum + root->val, left.size + right.size + 1);
        
        
        if(node == NULL || result.sum * average.size >= average.sum * result.size){
            average = result;
            node = root;
        }
        return result;
        
    }    
    TreeNode* findSubtree2(TreeNode* root) {
        // Write your code here
       if(root == NULL){
           return NULL;
       }
        help(root);
        return node;
        
    }
};



///////////////////////////////////////////////Add Python Version////////////////////////////////////////////////////////////

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        this.val = val
        this.left, this.right = None, None
"""


class Solution:
    """
    @param: root: the root of binary tree
    @return: the root of the maximum average of subtree
    """
    node = None
    average = 0
    def findSubtree2(self, root):
        # write your code here
        self.helper(root)
        return self.node
        
        
    def helper(self, root):
        if root is None:
            return 0, 0
        left_sum, left_size = self.helper(root.left)
        right_sum, right_size = self.helper(root.right)
        
        tmp_sum = left_sum + right_sum + root.val
        tmp_size = left_size + right_size + 1     
        tmp_average = tmp_sum * 1.0 / tmp_size
        
        if tmp_average > self.average or self.node is None:
            self.average = tmp_average
            self.node = root
        return tmp_sum, tmp_size
