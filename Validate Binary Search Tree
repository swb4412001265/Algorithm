95. Validate Binary Search Tree
中文English
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
A single node tree is a BST
Example
Example 1:
	Input:  For the following binary tree（only one node）:
	-1
	Output：true
	
Example 2:
	Input:  For the following binary tree:
	
	
	  2
	 / \
	1   4
	   / \
	  3   5
		
	Output: true

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
  """
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: The root of binary tree.
    @return: True if the binary tree is BST, or false
    """
    def isValidBST(self, root):
        # write your code here
        if not root:
            return True
        if root.left == None and root.right == None:
            return True
        res, x, y = self.helper(root)    
        return res
            
    def helper(self, root):
        if not root:
            return True, None, None 
            
        leftBST, leftMin, leftMax = self.helper(root.left)
        rightBST, rightMin, rightMax = self.helper(root.right)
        
        if leftBST == False or rightBST == False:
            return False, None, None
        if leftMax != None and leftMax >= root.val: 
            return False, None, None
        if rightMin != None and rightMin <= root.val:
            return False, None, None
        # # is BST
        # minNode = leftMin if leftMin is not None else root.val
        # maxNode = rightMax if rightMax is not None else root.val
        
        if leftMin != None:
            minNode = leftMin
        else:
            minNode = root.val
        if rightMax != None:
            maxNode = rightMax
        else:
            maxNode = root.val
        
        return True, minNode, maxNode
