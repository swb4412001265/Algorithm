442. Implement Trie (Prefix Tree)
中文English
Implement a Trie with insert, search, and startsWith methods.

Example
Example 1:

Input:
  insert("lintcode")
  search("lint")
  startsWith("lint")
Output:
  false
  true
Example 2:

Input:
  insert("lintcode")
  search("code")
  startsWith("lint")
  startsWith("linterror")
  insert("linterror")
  search("lintcode“)
  startsWith("linterror")
Output:
  false
  true
  false
  true
  true
Notice
You may assume that all inputs are consist of lowercase letters a-z.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TrieNode:
    
    def __init__(self):
        self.children = {}
        self.is_word = False
    
    
class Trie:
    
    def __init__(self):
        self.root = TrieNode()

    """
    @param: word: a word
    @return: nothing
    """
    def insert(self, word):
        node = self.root
        for c in word:
            if c not in node.children:
                node.children[c] = TrieNode()
            # It has to be equal node here since need to make Trie move down    
            node = node.children[c]
        
        node.is_word = True

    """
    return the last node in the trie if exists 
    """
    def find(self, word):
        node = self.root
        for c in word:
            # It has to be equal node since need to replace trienode with children node so for move down
            node = node.children.get(c)
            if node is None:
                return None
        return node
        
    """
    @param: word: A string
    @return: if the word is in the trie.
    """
    def search(self, word):
        node = self.find(word)
        return node is not None and node.is_word

    """
    @param: prefix: A string
    @return: if there is any word in the trie that starts with the given prefix.
    """
    def startsWith(self, prefix):
        return self.find(prefix) is not None
