LintCode-Logo
Home
Algorithms
AI
CATnew
VIP
Language
avatarswb441200165
Back
33. N-Queens
Description
中文
English
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Have you met this question in a real interview?  
Example
Example 1:

Input:1
Output:
   [["Q"]]


Example 2:

Input:4
Output:
[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]

Challenge
Can you do it without recursion?

Related Problems
Video Solution
All video solutions
播放
33. N皇后问题
DifficultyMedium
Total Accepted15692
Total Submitted50110
Accepted Rate31%
 Show Tags
Leaderboard - Python3

Avoidnull
858ms

wyp70627768
899ms

xixian
899ms

raytychu
911ms

cjsha
1008ms
Note
1. idx -> row, value -> col 2. find all permutations for [1,2,3, ... ,n] -> [col0, col1, col2, ... ,coln-1] 3. extra isValid check before add element to permutation, for each x,y pair in perm, check whether the new x,y pair will fit. 4. draw chess board func
avatarmiumiu_ooo
Created at 19 hours ago
def solveNQueens(self, n): # write your code here results = [] self.dfs(n, [], results) return results def dfs(self, n, cols, results): row = len(cols) if row == n: results.append(self.draw_chessboard(cols)) return for col in range(n): if not self.is_valid(row, col, cols): continue cols.append(col) self.dfs(n, cols, results) cols.pop() def draw_chessboard(self, cols): board = [] for col in cols: row = ['Q' if i == col else '.' for i in range(len(cols))] board.append(''.join(row)) return board def is_valid(self, row, col, cols): for r, c in enumerate(cols): if col == c: return False if row + col == r + c or row - col == r - c: return False return True
avatarwei1987
Created at 5 days ago
class Solution: """ @param: n: The number of queens @return: All distinct solutions """ def solveNQueens(self, n): # write your code here if n == 0: return [[]] solutions = [] self.dfs(n, [], solutions) return solutions def dfs(self, n, cols, solutions): #一個row一個row來擺Q row = len(cols) if n == row: solutions.append(self.draw_board(n, cols)) return for col in range(n): if not self.isValid(n, cols, row, col): continue #cols 是一個list，cols[i] ＝value，(i,value) 分別為(row,col)，row就是cols的index cols.append(col) self.dfs(n, cols, solutions) #backtracking cols.pop() def draw_board(self, n, cols): return_list = [] for i in range(n): original_row = ["." for i in range(n)] original_row[cols[i]] = "Q" return_list.append("".join(original_row)) return return_list def isValid(self, n, cols, row, col): #row, col 是當前要放入的(row,col) for prev_row, prev_col in enumerate(cols): if prev_col == col: return False # delta row / delta col = +1 or -1 ->都在斜線上 if abs((prev_row - row)/(prev_col - col)) == 1: return False return True
avatarglen39
Created at 7 days ago
Discuss
austin_zhao · Last reply by · austin_zhao · 10 months ago
  
33. N-Queens
中文English
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example
Example 1:

Input:1
Output:
   [["Q"]]


Example 2:

Input:4
Output:
[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]

Challenge
Can you do it without recursion?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: n: The number of queens
    @return: All distinct solutions
    """
    def solveNQueens(self, n):
        # write your code here
    
    
    def dfs(self, )
    def isValid(self, tmpList):
        list1 = []
        list2 = []
        for i in range(len(tmpList)):
            if tmpList[i] - i not in list1:
                list1.append(tmpList[i] - i)
            else:
                return False
            if tmpList[i] + i not in list2:
                list2.append(tmpList[i] + i)
            else:
                return False
        return True
            
            


