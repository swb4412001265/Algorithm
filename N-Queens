33. N-Queens
中文English
The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

Example
Example 1:

Input:1
Output:
   [["Q"]]


Example 2:

Input:4
Output:
[
  // Solution 1
  [".Q..",
   "...Q",
   "Q...",
   "..Q."
  ],
  // Solution 2
  ["..Q.",
   "Q...",
   "...Q",
   ".Q.."
  ]
]

Challenge
Can you do it without recursion?

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param: n: The number of queens
    @return: All distinct solutions
    """
    def solveNQueens(self, n):
        # write your code here
        if n == 0:
            return [[]]
        qArray = [i for i in range(n)]
        visited = [False for _ in range(n)]
        self.res = []
        self.result = []
        self.dfs(qArray, visited, [])
        self.buildSolution(self.res)
        print(self.res)
        return self.result
        
    def dfs(self, qArray, visited, tmpList):
        if len(qArray) == len(tmpList) and self.isValid(tmpList):
            self.res.append(tmpList[:])
        
        for i in range(len(qArray)):
            if visited[i]:
                continue
            else:
                visited[i] = True
                tmpList.append(qArray[i])
                self.dfs(qArray, visited, tmpList)
                visited[i] = False
                tmpList.pop()
                
    def isValid(self, tmpList):
        list1 = []
        list2 = []
        for i in range(len(tmpList)):
            if tmpList[i] - i not in list1:
                list1.append(tmpList[i] - i)
            else:
                return False
            if tmpList[i] + i not in list2:
                list2.append(tmpList[i] + i)
            else:
                return False
        return True
        
    def buildSolution(self, Solutions):
        for Solution in Solutions:
            tmpList = []
            for i in Solution:
                tmpString = ""
                for j in range(len(Solution)):
                    if i == j:
                        tmpString += "Q"
                    else:
                        tmpString += "."
                tmpList.append(tmpString[:])        
            self.result.append(tmpList[:])
                   
            
        
        
            


