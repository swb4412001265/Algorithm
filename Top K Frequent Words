471. Top K Frequent Words
Given a list of words and an integer k, return the top k frequent words in the list.

Example
Example 1:

Input:
  [
    "yes", "lint", "code",
    "yes", "code", "baby",
    "you", "baby", "chrome",
    "safari", "lint", "code",
    "body", "lint", "code"
  ]
  k = 3
Output: ["code", "lint", "baby"]
Example 2:

Input:
  [
    "yes", "lint", "code",
    "yes", "code", "baby",
    "you", "baby", "chrome",
    "safari", "lint", "code",
    "body", "lint", "code"
  ]
  k = 4
Output: ["code", "lint", "baby", "yes"]
Challenge
Do it in O(nlogk) time and O(n) extra space.

Notice
You should order the words by the frequency of them in the return list, the most frequent one comes first.
If two words has the same frequency, the one with lower alphabetical order come first.

////////////////////////////////////////////////////////Heap//////////////////////////////////////////////////////////////////////////////
# Heap can sort number also it can sort words based on alphabetical order when first element is the same
class Solution:
    """
    @param words: an array of string
    @param k: An integer
    @return: an array of string
    """
    def topKFrequentWords(self, words, k):
        # write your code here
        if not words or not k:
            return []
            
        from heapq import heappush, heappop
        
        dict = {}
        for word in words:
            if word in dict:
                dict[word] += 1 
            else:
                dict[word] = 1 
        
        heap = []
        for word in dict:
            heappush(heap, (-dict[word], word))
        
        ans = []
        for i in range(k):
            num, word = heappop(heap)
            ans.append(word)
            
        return ans

///////////////////////////////////////////////////////////sort//////////////////////////////////////////////////////////////////////////////
import collections
class Solution:
    def topKFrequentWords(self, words, k):
        d = collections.Counter(words).items()
        return [k for k, v in sorted(d, key=lambda x: (-x[1], x[0]))[:k]]
