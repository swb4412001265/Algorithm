433. Number of Islands
中文English
Given a boolean 2D matrix, 0 is represented as the sea, 1 is represented as the island. If two 1 is adjacent, we consider them in the same island. We only consider up/down/left/right adjacent.

Find the number of islands.

Example
Example 1:

Input:
[
  [1,1,0,0,0],
  [0,1,0,0,1],
  [0,0,0,1,1],
  [0,0,0,0,0],
  [0,0,0,0,1]
]
Output:
3
Example 2:

Input:
[
  [1,1]
]
Output:
1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    void dfs(vector<vector<bool>> &grid, int x, int y) {
        if (x < 0 || x >= grid.size()) return;
        if (y < 0 || y >= grid[0].size()) return;
        if (grid[x][y] != true) return;
        grid[x][y] = false;
        dfs(grid, x + 1, y);
        dfs(grid, x - 1, y);
        dfs(grid, x, y + 1);
        dfs(grid, x, y - 1);
    }
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        if (grid.empty() || grid[0].empty()) return 0;
        int N = grid.size(), M = grid[0].size();
        int cnt = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (grid[i][j] == true) {
                    dfs(grid, i, j);
                    ++cnt;
                }
            }
        }
        return cnt;
    }
};


///////////////////////////////////////////////////////////Python//////////////////////////////////////////////////////////////////

class Solution:
    # @param {boolean[][]} grid a boolean 2D matrix
    # @return {int} an integer
    def numIslands(self, grid):
        # Write your code here
        result = 0
        if len(grid) is 0:
            return result
        if grid is None:
            return result
        row = len(grid)
        column = len(grid[0])
        for i in range(row):
            for j in range(column):
                if grid[i][j] is 1:
                    self.DFS(grid, i, j)
                    result += 1
        return result
        
    def BFS(self, grid, x, y):
        grid[x][y] = 0
        q= Queue()
        a = [-1, 0, 0, 1]
        b = [0, 1, -1, 0]
        q.put(x, y)
        while q.empty() is False:
            new_row, new_column = q.get()
            for i in range(4):
                tmp_row = new_row + a[i]
                tmp_column = new_column + b[i]
                if tmp_row < 0 or tmp_row > len(grid) - 1 or tmp_column < 0 \
                or tmp_column > len(grid[0]) - 1:
                    continue
                if grid[tmp_row][tmp_column] is 1:
                    grid[tmp_row][tmp_column] = 0
                    q.put(tmp_row, tmp_column)
                    
                    
                    
///////////////////////////////////////////////Python with list + tuple/////////////////////////////////////////////////////////////

class Solution:
    # @param {boolean[][]} grid a boolean 2D matrix
    # @return {int} an integer
    def numIslands(self, grid):
        # Write your code here
        result = 0
        if len(grid) is 0:
            return result
        if grid is None:
            return result
        row = len(grid)
        column = len(grid[0])
        for i in range(row):
            for j in range(column):
                if grid[i][j] is True:
                    self.DFS(grid, i, j)
                    result += 1
        return result
        
    def DFS(self, grid, x, y):
        grid[x][y] = False
        q= [(x,y)]
        a = [-1, 0, 0, 1]
        b = [0, 1, -1, 0]
        while len(q) > 0:
            (new_row, new_column) = q.pop(0)
            for i in range(4):
                tmp_row = new_row + a[i]
                tmp_column = new_column + b[i]
                if tmp_row < 0 or tmp_row > len(grid) - 1 or tmp_column < 0 \
                or tmp_column > len(grid[0]) - 1:
                    continue
                if grid[tmp_row][tmp_column] is True:
                    grid[tmp_row][tmp_column] = False
                    q.append((tmp_row, tmp_column))

///////////////////////////////////////////Union find//////////////////////////////////////////////////////////////////////
class UnionFind:
    def __init__(self, num):
        self.father = {i: i for i in range(num)}
        self.numbOfIsland = 0
    def find(self, x):
        if self.father[x] == x:
            return x
        self.father[x] = self.find(self.father[x])
        return self.father[x]
        
    def connect(self, a, b):
        a_root = self.find(a)
        b_root = self.find(b)
        if a_root != b_root:
            self.father[b_root] = a_root
            self.numbOfIsland -= 1
    
    def set_numOfIsland(self, x):
        self.numbOfIsland = x
        
    def get_numOfIsland(self):
        return self.numbOfIsland


class Solution:
    """
    @param grid: a boolean 2D matrix
    @return: an integer
    """
    def numIslands(self, grid):
        # write your code here
        if not grid:
            return 0
        tmp = []
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j]:
                    tmp.append((i, j))
                                
        uf = UnionFind(m * n)
        uf.set_numOfIsland(len(tmp))
        dx = [0, 0, -1, 1]
        dy = [1, -1, 0, 0]
        for x, y in tmp:    
            for i in range(4):
                tmp_x = x + dx[i]
                tmp_y = y + dy[i]
                if tmp_x >= 0 and tmp_x < m and tmp_y >= 0 and tmp_y < n and \
                grid[tmp_x][tmp_y]:
                    uf.connect(x * n + y, tmp_x * n + tmp_y)
        return uf.get_numOfIsland()
                
                
                
