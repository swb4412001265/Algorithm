
39. Recover Rotated Sorted Array
中文English
Given a rotated sorted array, recover it to sorted array in-place.

Example
Example1:
[4, 5, 1, 2, 3] -> [1, 2, 3, 4, 5]
Example2:
[6,8,9,1,2] -> [1,2,6,8,9]

Challenge
In-place, O(1) extra space and O(n) time.

Clarification
What is rotated array?

For example, the orginal array is [1,2,3,4], The rotated array of it can be [1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]

////////////////////////////////////////////////[1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]  can not pass////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: An integer array
    @return: nothing
    """
    def recoverRotatedSortedArray(self, nums):
        # write your code here
        if not nums:
            return nums
        i = 0
        j = len(nums) - 1
        topIndex = 0
        if nums[-1] > nums[0]:
            return nums
        while i + 1 < j:
            mid = int((i + j) / 2)
            if nums[mid] > nums[-1]:
                i = mid
            elif nums[mid] < nums[-1]:
                j = mid
            else:
                j = mid
        if nums[j] < nums[-1]:
            topIndex = i
        elif nums[j] > nums[-1]:
            topIndex = j
        else:
            topIndex = i
        tmp1 = nums[topIndex + 1:]
        tmp2 = nums[:topIndex + 1]
        print(topIndex)
        tmp = tmp1 + tmp2
      
        for i in range(len(tmp)):
            nums[i] = tmp[i]
            
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  class Solution:
    """
    @param nums: An integer array
    @return: nothing
    """
    def recoverRotatedSortedArray(self, nums):
        # write your code here
        if not nums:
            return nums
        i = 0
        topIndex = len(nums) - 1
        while i + 1 < len(nums):
            if nums[i] > nums[i + 1]:
                topIndex = i
                break
            i += 1
        tmp = nums[topIndex + 1:] + nums[:topIndex + 1]
        for i in range(len(tmp)):
            nums[i] = tmp[i]
            
            
    
