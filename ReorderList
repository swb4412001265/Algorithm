/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: void
     */
    ListNode *reverse(ListNode *head){
        ListNode *pre = NULL;
        while(head != NULL){
            ListNode *tmp = head->next;
            head->next = pre;
            pre = head;
            head = tmp;
        }
        return pre;
    }
    
    ListNode *findMid(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode *merge(ListNode *head1, ListNode *head2){
        ListNode *dummy = new ListNode(0);
        ListNode *tmp = dummy;
        int index = 0;
        while(head1 != NULL && head2 != NULL){
           if(index % 2 == 0){
               tmp->next = head1;
               head1 = head1->next;
           }else{
               tmp->next = head2;
               head2 = head2->next;
           }
           index++;
           tmp = tmp->next;
        }
        if(head1 != NULL){
            tmp->next = head1;
        } else {
            tmp->next = head2;
        }
        return dummy->next;
    }
    void reorderList(ListNode *head) {
        // write your code here
        if(head == NULL || head->next == NULL){
            return;
        }
        ListNode *mid = findMid(head);
        ListNode *newRight = reverse(mid->next);
        mid->next = NULL;
        merge(head, newRight);
    }
};


