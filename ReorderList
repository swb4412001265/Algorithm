99. Reorder List

Given a singly linked list L: L0 → L1 → … → Ln-1 → Ln

reorder it to: L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …

Example
Example 1:
	Input:  1->2->3->4->null
	Output: 1->4->2->3->null

Example 2:
	Input: 1->2->3->4->5->null
	Output: 1->5->2->4->3->null
	
Challenge
Can you do this in-place without altering the nodes' values?
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: void
     */
    ListNode *reverse(ListNode *head){
        ListNode *pre = NULL;
        while(head != NULL){
            ListNode *tmp = head->next;
            head->next = pre;
            pre = head;
            head = tmp;
        }
        return pre;
    }
    
    ListNode *findMid(ListNode *head){
        ListNode *slow = head;
        ListNode *fast = head->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
    
    ListNode *merge(ListNode *head1, ListNode *head2){
        ListNode *dummy = new ListNode(0);
        ListNode *tmp = dummy;
        int index = 0;
        while(head1 != NULL && head2 != NULL){
           if(index % 2 == 0){
               tmp->next = head1;
               head1 = head1->next;
           }else{
               tmp->next = head2;
               head2 = head2->next;
           }
           index++;
           tmp = tmp->next;
        }
        if(head1 != NULL){
            tmp->next = head1;
        } else {
            tmp->next = head2;
        }
        return dummy->next;
    }
    void reorderList(ListNode *head) {
        // write your code here
        if(head == NULL || head->next == NULL){
            return;
        }
        ListNode *mid = findMid(head);
        ListNode *newRight = reverse(mid->next);
        mid->next = NULL;
        merge(head, newRight);
    }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""

class Solution:
    """
    @param head: The head of linked list.
    @return: nothing
    """
    def reorderList(self, head):
        # write your code here
        if not head:
            return head
        
        midNode = self.findMid(head)
        reversedNode = self.reverse(midNode.next)
        midNode.next = None
        self.merge(head, reversedNode)
        
        
    def merge(self, head1, head2):
        dummy = ListNode(-1)
        tmpNode = ListNode(-2)
        dummy.next = tmpNode
        tmpNode = dummy
        index = 0
        while head1 != None and head2 != None:
            if index % 2 == 0:
                tmpNode.next = head1
                head1 = head1.next
            else:
                tmpNode.next = head2
                head2 = head2.next
            tmpNode = tmpNode.next
            index += 1
            
        if head1 == None:
            tmpNode.next = head2
        if head2 == None:
            tmpNode.next = head1
        return dummy.next
            
            
    def reverse(self, head):
        prev = None
        curt = head
        while curt != None:
            tmp = curt.next
            curt.next = prev
            prev = curt
            curt = tmp
        return prev
    
    def findMid(self, head):
        slow  = head
        fast = slow.next
        
        while fast != None and fast.next != None:
            slow = slow.next
            fast = fast.next.next
        return slow
