class Solution {
public:
    /**
     * @param s: A string s
     * @param dict: A dictionary of words dict
     */
    bool wordBreak(string s, unordered_set<string> &dict) {
        // write your code here
        int m = s.length();
        if(m==0){
            return true;
        }
        
        //f[i] defines from 0 to i if can break into dictionary word
        
        vector<bool> f(m+1);
       
        f[0] = true;
        for(int i = 1; i < m+1; ++i){
            for(int j = 0;j < i; ++j){
                if(f[j] == false){
                    continue;
                }
                else {
                    string temp;
                    temp.assign(s.begin()+j,s.begin()+i);
                    unordered_set<string>::const_iterator x = dict.find(temp);
                    if(x == dict.end()){
                        continue;
                    } else {
                        f[i] = true;
                        break;
                    }
                    
                }
            }
        }
        return f[m];
    }
};
