106. Convert Sorted List to Binary Search Tree
中文English
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

Example
Example 1:
	Input: array = [1,2,3]
	Output:
		 2  
		/ \
		1  3
		
Example 2:
	Input: [2,3,6,7]
	Output:
		 3
		/ \
	       2   6
		     \
		      7

	Explanation:
	There may be multi answers, and you could return any of them.
  
  ////////////////////////////////////////My version///////////////////////////////////////////////////////////////////////////
  """
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next

Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: head: The first node of linked list.
    @return: a tree node
    """
    def sortedListToBST(self, head):
        # write your code here
        if not head:
            return None
        if head.next == None:
            return TreeNode(head.val)
        tmpList = []
        while head != None:
            tmpList.append(head.val)
            head = head.next
        print(tmpList)
        
        midIndex = int(len(tmpList) / 2)
        print(tmpList[midIndex])
        res = TreeNode(tmpList[midIndex])
        dummyLeft = res
        dummyRight = res
        for listIndex in range(midIndex - 1, -1, -1):
            dummyLeft.left = TreeNode(tmpList[listIndex])
            dummyLeft = dummyLeft.left
        
        for listIndex in range(midIndex + 1, len(tmpList)):
            dummyRight.right = TreeNode(tmpList[listIndex])
            dummyRight = dummyRight.right
        return res
            
        
///////////////////////////////////////////////////////////////answer////////////////////////////////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next

Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:
    """
    @param head: The first node of linked list.
    @return: a tree node
    """
    def sortedListToBST(self, head):
        # write your code here
        res = self.dfs(head)
        
        return res
        
    def dfs(self, head):
        
        if head == None:
            return None
        
        if head.next == None:
            return TreeNode(head.val)
        
        dummy = ListNode(0)
        dummy.next = head
        fast = head
        slow = dummy
        
        while fast != None and fast.next != None:
            fast = fast.next.next
            slow = slow.next
        
        temp = slow.next
        slow.next = None
        parent = TreeNode(temp.val)
        
        parent.left = self.dfs(head)
        parent.right = self.dfs(temp.next)
        
        return parent
	
        
