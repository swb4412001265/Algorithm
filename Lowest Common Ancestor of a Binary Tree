88. Lowest Common Ancestor of a Binary Tree
Given the root and two nodes in a Binary Tree. Find the lowest common ancestor(LCA) of the two nodes.

The lowest common ancestor is the node with largest depth which is the ancestor of both nodes.

Example
For the following binary tree:

  4
 / \
3   7
   / \
  5   6
LCA(3, 5) = 4

LCA(5, 6) = 7

LCA(6, 7) = 7

Notice
Assume two nodes are exist in tree.



///////////////////////////////////////////////////////////////////////////////////

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: The root of the binary search tree.
    @param: A: A TreeNode in a Binary.
    @param: B: A TreeNode in a Binary.
    @return: Return the least common ancestor(LCA) of the two nodes.
    """
    def lowestCommonAncestor(self, root, A, B):
        # write your code here
        if root == None or A == None or B == None:
            return root
        return self.helper(root, A, B)
    def helper(self, root, A, B):
    # If there is a LCA then return LCA
    # If there is only A then return A
    # If there is only B then return B
    # If there is no A or B then return None
    
        if root == None:
            return None         
        left = self.helper(root.left, A, B)
        right = self.helper(root.right, A, B)
        if A == root or B == root:
            return root
        if right != None and left != None:
            return root
        if right != None:
            return right
        if left != None:
            return left
        return None

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""


class Solution:
    """
    @param: root: The root of the binary search tree.
    @param: A: A TreeNode in a Binary.
    @param: B: A TreeNode in a Binary.
    @return: Return the least common ancestor(LCA) of the two nodes.
    """
    def lowestCommonAncestor(self, root, A, B):
        # write your code here
        
        if not root:
            return root
            
        if root == A or root == B:
            return root
        
        left = self.lowestCommonAncestor(root.left, A, B)
        
        right = self.lowestCommonAncestor(root.right, A, B)
        
       
        if left and right:
            return root
        if left:
            return left
        if right:
            return right
        # return None 
        
