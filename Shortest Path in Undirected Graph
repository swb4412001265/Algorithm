814. Shortest Path in Undirected Graph
中文English
Given an undirected graph in which each edge's length is 1, and two nodes from the graph. Return the length of the shortest path between two given nodes.

Example
Example 1:

Input: graph = {1,2,4#2,1,4#3,5#4,1,2#5,3}, node1 = 3, node2 = 5
Output: 1
Explanation:
  1------2  3
   \     |  | 
    \    |  |
     \   |  |
      \  |  |
        4   5
Example 2:

Input: graph = {1,2,3,4#2,1,3#3,1#4,1,5#5,4}, node1 = 1, node2 = 5
Output: 2
Clarification
About the representation of graph

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param graph: a list of Undirected graph node
    @param A: nodeA
    @param B: nodeB
    @return:  the length of the shortest path
    """
# Definition for a undirected graph node
# class UndirectedGraphNode:
#     def __init__(self, x):
#         self.label = x
#         self.neighbors = []
    
    def shortestPath(self, graph, A, B):
        if A == B:
            return 0
        if not graph:
            return 0
        step = 0
        from queue import Queue
        q = Queue()
        q.put(A)
        s = set()
        s.add(A)
        while not q.empty():
            step += 1
            for i in range(q.qsize()):
                tmpNode = q.get()
                for i in tmpNode.neighbors:
                    if i == B:
                        return step
                    else:
                        if i not in s:
                            s.add(i)
                            q.put(i)
        return -1
        
