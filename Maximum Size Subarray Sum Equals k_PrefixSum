911. Maximum Size Subarray Sum Equals k
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Example
Given nums = [1, -1, 5, -2, 3], k = 3, return 4.

Explanation:
because the subarray [1, -1, 5, -2] sums to 3 and is the longest.
Given nums = [-2, -1, 2, 1], k = 1, return 2.

Explanation:
because the subarray [-1, 2] sums to 1 and is the longest.
Challenge
Can you do it in O(n) time?

Notice
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

///////////////////////////////////////////////////Need More debug/////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an array
    @param k: a target value
    @return: the maximum length of a subarray that sums to k
    """
    def maxSubArrayLen(self, nums, k):
        # Write your code here
        if nums == None or len(nums) == 0:
            return -1
        
        prefixSum = 0
        tmpList = [(0, -1)]
        
        res = -sys.maxsize
        
        for i in range(len(nums)):
            prefixSum += nums[i]
            tmpList.append((prefixSum, i))
            if prefixSum - k in tmpList[:][0]:
                res = max(res, i - tmpList[tmpList[:][0].index(prefixSum - k)][1])
        return res


////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an array
    @param k: a target value
    @return: the maximum length of a subarray that sums to k
    """
    def maxSubArrayLen(self, nums, k):
        # Write your code here
        if nums == None:
            return 0
        if len(nums) == 0:
            return 0
        tmpDict = {0:-1}
        res = -sys.maxsize
        prefix_sum = 0
        for i in range(len(nums)):
            prefix_sum += nums[i]
            if prefix_sum - k in tmpDict:
                res = max(res, i - tmpDict[prefix_sum - k])
            # This condition is necessary, we only keep the first prefix_sum number
            # and ignore the latter one since we are trying to get the maxium length
            if prefix_sum not in tmpDict:
                tmpDict[prefix_sum] = i
        return res
