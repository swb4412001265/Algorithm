539. Move Zeroes
中文English
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example
Example 1:

Input: nums = [0, 1, 0, 3, 12],
Output: [1, 3, 12, 0, 0].
Example 2:

Input: nums = [0, 0, 0, 3, 1],
Output: [3, 1, 0, 0, 0].
Notice
You must do this in-place without making a copy of the array.
Minimize the total number of operations.



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Using two pointers and do swap of non-zero and zero num.

class Solution {
public:
    /**
     * @param nums an integer array
     * @return nothing, do this in-place
     */
    void moveZeroes(vector<int>& nums) {
        // Write your code here
        int sizeNum = nums.size();
        if(sizeNum == 0) {
            return;
        }
        int start = 0; 
        int end = sizeNum - 1;
        while(start <= end) {
            while(start <= end && nums[start] != 0) {
                start++;
            }
            while(start <= end && nums[end] == 0) {
                end--;
            }
            if(start <= end) {
                int tmp = nums[start];
                nums[start] = nums[end];
                nums[end] = tmp;
                start++;
                end--;
            }
        }
    }
};

//Move zeros to the end but swap which means keeping the original order
class Solution {
public:
    /**
     * @param nums an integer array
     * @return nothing, do this in-place
     */
    void moveZeroes(vector<int>& nums) {
        // Write your code here
        int sizeNum = nums.size();
        if(sizeNum == 0) {
            return;
        }
        int start = 0; 
        int end = sizeNum - 1;
        int count = 0;
        int i = 0;
        while(count <= sizeNum) {
            if(nums[i] == 0) {
                nums.push_back(nums[i]);
                nums.erase(nums.begin() + i);
            }else {
                i++;
            }
            count++;
        }
    }
};

class Solution:
    """
    @param nums: an integer array
    @return: nothing
    """
    def moveZeroes(self, nums):
        # write your code here
        if nums == []:
            return []
        if len(nums) == 1:
            return nums
        # start = 0
        # end = len(nums) - 1
        # while start <= end:
        #     while start <= end and nums[start] != 0:
        #         start += 1
        #     while start <= end and nums[end] == 0:
        #         end -= 1
        #     if start <= end:
        #         nums[start], nums[end] = nums[end], nums[start]
        #         start += 1
        #         end -= 1
        # return nums
        # index = 0
        # size = len(nums)
        # while index < size:
        #     if nums[index] == 0:
        #         nums.pop(index)
        #         nums.append(0)
        #     else:
        #         index += 1
        # return nums
        
        i = 0
        j = 0
        
        while j < len(nums):
            if nums[i] == 0 and nums[j] != 0:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j += 1
            elif nums[i] == 0 and nums[j] == 0:
                j += 1   
            else:
                i += 1
                j += 1 
        return nums
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an integer array
    @return: nothing
    """
    def moveZeroes(self, nums):
        # write your code here
        if not nums:
            return nums
        i = 0
        j = 0
        while i < len(nums) and nums[i] != 0:
            i += 1
        j = i
        
        while i < len(nums) and j < len(nums):
            while i < len(nums) and nums[i] != 0:
                i += 1
            while j < len(nums) and nums[j] == 0:
                j += 1
            if i < len(nums) and j < len(nums):
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j += 1
            
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an integer array
    @return: nothing
    """
    def moveZeroes(self, nums):
        # write your code here
        i = 0
        count = 0
        while count < len(nums):
            if nums[i] == 0:
                nums.append(nums[i])
                nums.pop(i)
            else:
                i += 1
            count += 1
        return nums
