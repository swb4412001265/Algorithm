class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */ 
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // write your code here
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        
        //define that from (0,0) to (m-1,n-1), there are how many unique ways.
        int p[m][n];
        if( m <= 0 || n <= 0 ) {
            return 0;
        }
        for(int i = 0; i < m; ++i) {
            if(obstacleGrid[i][0] == 1) {
                p[i][0] = 0;
                break;
            } else {
                p[i][0] = 1;
            }
        }
        for(int i = 0; i < n; ++i) {
            if(obstacleGrid[0][i] == 1) {
                p[0][i] = 0;
                break;
            } else {
                p[0][i] = 1;
            }
        }
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                if(obstacleGrid[i][j] == 1) {
                    p[i][j] = 0;
                } else {
                p[i][j] = p[i-1][j] + p[i][j-1];
                }
            }
        }
        return p[m-1][n-1];
    }
};
