115. Unique Paths II

Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

Example
Example 1:
	Input: [[0]]
	Output: 1


Example 2:
	Input:  [[0,0,0],[0,1,0],[0,0,0]]
	Output: 2
	
	Explanation:
	Only 2 different path.
	

Notice
m and n will be at most 100.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */ 
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // write your code here
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        
        //define that from (0,0) to (m-1,n-1), there are how many unique ways.
        int p[m][n];
        if( m <= 0 || n <= 0 ) {
            return 0;
        }
        for(int i = 0; i < m; ++i) {
            if(obstacleGrid[i][0] == 1) {
                p[i][0] = 0;
                break;
            } else {
                p[i][0] = 1;
            }
        }
        for(int i = 0; i < n; ++i) {
            if(obstacleGrid[0][i] == 1) {
                p[0][i] = 0;
                break;
            } else {
                p[0][i] = 1;
            }
        }
        for(int i = 1; i < m; ++i) {
            for(int j = 1; j < n; ++j) {
                if(obstacleGrid[i][j] == 1) {
                    p[i][j] = 0;
                } else {
                p[i][j] = p[i-1][j] + p[i][j-1];
                }
            }
        }
        return p[m-1][n-1];
    }
};


////////////////////////////////////////////////////////////////python///////////////////////////////////////////////////////////////////
class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        if not obstacleGrid:
            return 0
        if len(obstacleGrid[0]) == 0:
            return 0
            
        n = len(obstacleGrid[0])
        m = len(obstacleGrid)
        f = [[0 for _ in range(n)] for _ in range(m)]
    
        for i in range(n):
        # Need to use break since when meet obstacle, robot can not continue 
            if obstacleGrid[0][i] == 1:
                break
            else:
                f[0][i] = 1
        for i in range(m):
            if obstacleGrid[i][0] == 1:
                break
            else:
                f[i][0] = 1
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 1:
                    f[i][j] = 0
                else:    
                    f[i][j] = f[i - 1][j] + f[i][j - 1]
                
        return f[m - 1][n - 1]
