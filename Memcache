class Memcache:
    def __init__(self):
        # do intialization if necessary
        self.result = {}
        
    """
    @param: curtTime: An integer
    @param: key: An integer
    @return: An integer
    """
    def get(self, curtTime, key):
        # write your code here
        if self.result.get(key) == None:
            return 2147483647
        if self.result[key][1] == -1:
            return self.result[key][0]
        if curtTime > self.result[key][1]:
            return 2147483647 
        
          
        return self.result[key][0]
        
    """
    @param: curtTime: An integer
    @param: key: An integer
    @param: value: An integer
    @param: ttl: An integer
    @return: nothing
    """
    def set(self, curtTime, key, value, ttl):
        # write your code here
        if ttl > 0:
            self.result[key] = [value, curtTime + ttl -1]
        else:
            self.result[key] = [value, -1]
    """
    @param: curtTime: An integer
    @param: key: An integer
    @return: nothing
    """
    def delete(self, curtTime, key):
        # write your code here
        self.result.pop(key)

    """
    @param: curtTime: An integer
    @param: key: An integer
    @param: delta: An integer
    @return: An integer
    """
    def incr(self, curtTime, key, delta):
        # write your code here
        if self.get(curtTime, key) == 2147483647:
            return 2147483647
        self.result[key][0] += delta
        return self.result[key][0]
    """
    @param: curtTime: An integer
    @param: key: An integer
    @param: delta: An integer
    @return: An integer
    """
    def decr(self, curtTime, key, delta):
        # write your code here
        if self.get(curtTime, key) == 2147483647:
            return 2147483647
        self.result[key][0] -= delta
        return self.result[key][0]
        
        
