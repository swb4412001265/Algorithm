12. Min Stack
中文English
Implement a stack with following functions:

push(val) push val into the stack
pop() pop the top element and return it
min() return the smallest number in the stack
All above should be in O(1) cost.

Example
Example 1:

Input:
  push(1)
  pop()
  push(2)
  push(3)
  min()
  push(1)
  min()
Output:
  1
  2
  1
Example 2:

Input:
  push(1)
  min()
  push(2)
  min()
  push(3)
  min()
Output:
  1
  1
  1
Notice
min() will never be called when there is no number in the stack.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MinStack:
    
    def __init__(self):
        self.stack = []
        self.tmpMin = sys.maxsize
        
    def push(self, num):
        if len(self.stack) == 0:
            self.tmpMin = num
        else:
        # should use minium of num and last item of stack
            self.tmpMin = min(num, self.stack[-1][1])
        self.stack.append((num, self.tmpMin))
        print(self.stack)
        
    def pop(self):
        val, min_val = self.stack.pop()
        return val
        
    def min(self):
        _, min_val = self.stack[-1]
        return min_val
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MinStack(object):

    def __init__(self):
        # do some intialize if necessary
        self.stack = []
        self.minstack = []

    def push(self, number):
        # write yout code here
        self.stack.append(number)
        if len(self.minstack) == 0 or number <= self.minstack[-1]:
            self.minstack.append(number)

    def pop(self):
        # pop and return the top item in stack
        if self.stack[-1] == self.minstack[-1]:
            self.minstack.pop()
        return self.stack.pop()

    def min(self):
        # return the minimum number in stack
        return self.minstack[-1]
