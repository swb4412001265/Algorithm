//////////////////////////////////////////////////Quick Sort////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A an integer array
     * @return void
     */
    void sortIntegers(vector<int>& A) {
        // Write your code here
        if(A.size() == 0) {
            return;
        }
        quickSort(A, 0, A.size() - 1);
    }
    //General in order then subarry in order
    //nlogn average worst situation is n2
    //space complext is O(1)
    //not stable
    void quickSort(vector<int> &A, int start, int end) {
        if(start >= end) {
            return;
        }
        int left = start;
        int right = end;
        int pivot = A[(start + end) / 2];
        //left <= right not < since we do not want to any overlap after partition
        //should use A[left] < pivot but <= since we want split number equally
        while(left <= right) {
            while(left <= right && A[left] < pivot) {
                left++;
            }
            while(left <= right && A[right] > pivot) {
                right--;
            }
            if(left <= right) {
                int tmp = A[left];
                A[left] = A[right];
                A[right] = tmp;
                left++;
                right--;
            }
        }
        quickSort(A, start, right);
        quickSort(A, left, end);
    }
};



////////////////////////////////////////merge sort/////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A an integer array
     * @return void
     */
     //Split the array first and sorted the subarray
     //time:nlogn   space:O(n)
     //stable
    void sortIntegers(vector<int>& A) {
        // Write your code here
        if(A.size() == 0) {
            return;
        }
        //has to assign tmp'size since not using push_back()
        vector<int> tmp(A.size());
        mergeSort(A, 0, A.size() - 1, tmp);
    }
    
    void mergeSort(vector<int> &A, int start, int end, vector<int> tmp) {
        if(start >= end) {
            return;
        }
        int mid = (start + end) / 2;
        mergeSort(A, start, mid, tmp);
        mergeSort(A, mid + 1, end, tmp);
        merge(A, start, mid, end, tmp);
    }
    
    void merge(vector<int> &A, int start, int mid, int end, vector<int> tmp) {
        int leftIndex = start;
        int midIndex = mid + 1;
        int endIndex = end;
        int index = start;
        
        while(leftIndex <= mid && midIndex <= endIndex) {
            if(A[leftIndex] < A[midIndex]) {
                tmp[index++] = A[leftIndex++];
            } else {
                tmp[index++] = A[midIndex++];
            }
        }
        while(leftIndex <= mid) {
            tmp[index++] = A[leftIndex++];
        }
        while(midIndex <= endIndex) {
            tmp[index++] = A[midIndex++];
        }
        # Give tmp array to A and index should be from start to end but 0 to sizeof tmp
        for(int i = start; i <= end; ++i) {
            A[i] = tmp[i];
        }
    }
};

////////////////////////////////////////Quick Select//////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /*
     * param k : description of k
     * param nums : description of array and index 0 ~ n-1
     * return: description of return
     */
    int kthLargestElement(int k, vector<int> nums) {
        // write your code here
        if(nums.size() == 0) {
            return -1;
        }
        return quickSelect(nums, 0, nums.size() - 1, k);
    }
    
    int quickSelect(vector<int> &nums, int start, int end, int k) {
        if(start >= end) {
            return nums[start];
        }
        int left = start;
        int right = end;
        int pivot = nums[(start + end) / 2];
        
        while(left <= right) {
            while(left <= right && nums[left] > pivot) {
                left++;
            }
            while(left<=right && nums[right] < pivot) {
                right--;
            }
            if(left <= right) {
                int tmp = nums[left];
                nums[left] = nums[right];
                nums[right] = tmp;
                left++;
                right--;
            }
        }
        if(start + k - 1 <= right) {
            return quickSelect(nums, start, right, k);
        }
        if(start + k - 1 >= left) {
            return quickSelect(nums, left, end, k - (left - start));
        }
        return nums[right + 1];
    }
};


////////////////////////////////////////////////////////Heap Sort///////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A an integer array
     * @return void
     */
    void sortIntegers2(vector<int>& A) {
        // Write your code here
        if(A.size() == 0) {
            return;
        }
        //priority_queue<int> heap;
        //sort(A.begin(), A.end(), greater<int>())
        priority_queue<int, vector<int>, greater<int>> heap;
        for(int i = 0; i < A.size(); ++i) {
            heap.push(A[i]);
        }
        
        int index = 0;
        while(!heap.empty()) {
            int tmp = heap.top();
            heap.pop();
            A[index++] = tmp;
        }
    }
    
};


//////////////////////////////Quick Sort Python//////////////////////////////////////
class Solution:
    """
    @param A: an integer array
    @return: nothing
    """
    def sortIntegers2(self, A):
        # write your code here
        if A == None:
            return None
        if len(A) == 0 or len(A) == 1:
            return A
        self.quickSort(A, 0, len(A) - 1)
        
    
    def quickSort(self, A, start, end):
        if start >= end:
            return 
        left = start
        right = end
        pivot = A[int((start + end) / 2)]
        
        while left <= right:
            while left <= right and A[left] < pivot:
                left += 1
                
            while left <= right and A[right] > pivot:
                right -= 1
                
            if left <= right:
                A[left], A[right] = A[right], A[left]
                left += 1
                right -= 1
                
        self.quickSort(A, start, right)
        self.quickSort(A, left, end)
                


///////////////////////////////////Merge Sort python//////////////////////////////////////
class Solution:
    """
    @param A: an integer array
    @return: nothing
    """
    def sortIntegers2(self, A):
        # write your code here
        if A == None:
            return None
        if len(A) == 0 or len(A) == 1:
            return A
        tmp = [0] * len(A)
        self.mergeSort(A, 0, len(A) - 1, tmp)
        
        
    def mergeSort(self, A, start, end, tmp):
        if start >= end:
            return
        mid = int((start + end) / 2)
        self.mergeSort(A, start, mid, tmp)
        self.mergeSort(A, mid + 1, end, tmp)
        self.merge(A, start, mid, end, tmp)

    def merge(self, A, start, mid, end, tmp):
        leftStart = start
        rightStart = mid + 1
        newStart = start
        
        while leftStart <= mid and rightStart <= end:
            if A[leftStart] < A[rightStart]:
                tmp[newStart] = A[leftStart]
                newStart += 1
                leftStart += 1
            else:
                tmp[newStart] = A[rightStart]
                newStart += 1
                rightStart += 1
                
        while leftStart <= mid:
            tmp[newStart] = A[leftStart]
            newStart += 1
            leftStart += 1
            
        while rightStart <= end:
            tmp[newStart] = A[rightStart]
            newStart += 1
            rightStart += 1
            
        for i in range(start, end + 1):
            A[i] = tmp[i]
