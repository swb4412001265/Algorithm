127. Topological Sorting
中文English
Given an directed graph, a topological order of the graph nodes is defined as follow:

For each directed edge A -> B in graph, A must before B in the order list.
The first node in the order can be any node in the graph with no nodes direct to it.
Find any topological order for the given graph.

Example
For graph as follow:

picture

The topological order can be:

[0, 1, 2, 3, 4, 5]
[0, 2, 3, 1, 5, 4]
...
Challenge
Can you do it in both BFS and DFS?

Clarification
Learn more about representation of graphs

Notice
You can assume that there is at least one topological order in the graph.

{0,1,2,3,4#1,3,4#2,1,4#3,4#4}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*> graph) {
        // write your code here
        queue <DirectedGraphNode *> Q;
        vector <DirectedGraphNode *> V;
        unordered_map<DirectedGraphNode *, int> inCount = inDegree(graph);
        //unordered_set<DirectedGraphNode *> S;
        for(auto& n : graph) {
            if(inCount[n] == 0) {
                Q.push(n);        
            }
        }    
            while (!Q.empty()) {
                DirectedGraphNode * head = Q.front();
                Q.pop();
                V.push_back(head);
                //S.insert(head);
                for (auto& n : head->neighbors) {
                    inCount[n] = inCount[n] - 1;
                    if(inCount[n] == 0) {
                        Q.push(n);
                    }
                }
            }
        if(V.size() == graph.size()) {    
            return V;
        }

        vector <DirectedGraphNode *> NullV;
        return NullV; 
    }
    
    unordered_map<DirectedGraphNode*, int> inDegree(vector<DirectedGraphNode*> graph) {
        unordered_map<DirectedGraphNode*, int> result;
        for(auto& n : graph) {
            result.insert({n, 0});
        }
        for(auto& n : graph) {
            for(auto& m : n->neighbors){
                result[m] = result[m] + 1;
            }
        }
        return result;
        
    }
    
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        # write your code here
        from queue import Queue
        q = Queue()
        visit = {}
        res = []
        tmp = self.inDegree(graph)
        # print(tmp)
        for i, j in tmp.items():
            if j == 0:
                q.put(i)
                visit[i] = True
                # print(q.qsize())
        while not q.empty():
            node = q.get()
            for i in node.neighbors:
                if i in visit:
                    continue
                tmp[i] -= 1
                if tmp[i] == 0:
                    q.put(i)
                    visit[i] = True
        return visit.keys()
        
    def inDegree(self,graph):
        tmp = {n:0 for n in graph}
        for i in graph:
            for j in i.neighbors:
                tmp[j] += 1
        return tmp
            
         
///////////////////////////////////////////////remove visit dictionary since inDegree can make sure there is no loop/////////////////
"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        # write your code here
        from queue import Queue
        q = Queue()
        # visit = {}
        res = []
        tmp = self.inDegree(graph)
        # print(tmp)
        for i, j in tmp.items():
            if j == 0:
                q.put(i)
                # visit[i] = True
                # print(q.qsize())
        while not q.empty():
            node = q.get()
            res.append(node)
            for i in node.neighbors:
                # if i in visit:
                #     continue
                tmp[i] -= 1
                if tmp[i] == 0:
                    q.put(i)
                    # visit[i] = True
        return res
        
    def inDegree(self,graph):
        tmp = {n:0 for n in graph}
        for i in graph:
            for j in i.neighbors:
                tmp[j] += 1
        return tmp
            
            
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\
"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""


class Solution:
    """
    @param: graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        # write your code here
        if not graph:
            return []
        res = []
        hash = self.inDegree(graph)
        from queue import Queue
        q = Queue()
        for i in hash.keys():
            if not hash[i]:
                q.put(i)
        while not q.empty():
            tmp = q.get()
            res.append(tmp)
            if len(res) == len(graph):
                return res
            for i in tmp.neighbors:
                hash[i] -= 1
                if not hash[i]:
                    q.put(i)
                    
    
    def inDegree(self, graph):
        nodeMap = {i: 0 for i in graph}
        for i in graph:
            for j in i.neighbors:
                nodeMap[j] += 1
        return nodeMap
        
        
