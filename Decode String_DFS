575. Decode String
中文English
Given an expression s contains numbers, letters and brackets. Number represents the number of repetitions inside the brackets(can be a string or another expression)．Please expand expression to be a string.

Example
Example1

Input: S = abc3[a]
Output: "abcaaa"
Example2

Input: S = 3[2[ad]3[pf]]xyz
Output: "adadpfpfpfadadpfpfpfadadpfpfpfxyz"
Challenge
Can you do it without recursion?

Notice
Numbers can only appear in front of “[]”.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: an expression includes numbers, letters and brackets
    @return: a string
    """
    def expressionExpand(self, s):
        # write your code here
        stack = []
        if not s or len(s) == 0:
            return s

        word = []
        i = 0
        while i < len(s):
        # there are total 4 situations.
            if s[i].isdigit():
                rep = 0
                while s[i].isdigit():
                    rep = rep * 10 + int(s[i])
                    i += 1
                stack.append(str(rep))

            elif s[i] == "[":
                i += 1
                continue

            elif s[i] == "]":
                while not stack[-1].isdigit():
                    word.append(stack.pop())

                s_prime = ""
                while word:
                    s_prime += word.pop()

                s_prime = int(stack[-1]) * s_prime
                stack.pop()
                stack.append(s_prime)
                
                i += 1

            else:
                stack.append(s[i])
                i += 1
            # print(stack)
        return "".join(stack)
        
        //////////////////////////////////////////////////////////////DFS///////////////////////////////////////////////////////////////////////////////////////////////
        class Solution:
    """
    @param s: an expression includes numbers, letters and brackets
    @return: a string
    """
    def expressionExpand(self, s):
        # write your code here
        if not s:
            return ""
        res, pos = self.helper(0, s)
        return res
        
    def helper(self, pos, s):
        res = ""
        number = 0
        while pos <len(s):
            if s[pos].isdigit():
                number = number * 10 + int(s[pos])
            elif s[pos] == "[":
                substring, pos = self.helper(pos + 1, s)
                res += substring * number
                number = 0
            elif s[pos] == "]":
                return res, pos
            else:
                res += s[pos]
            pos += 1
        return res, pos
