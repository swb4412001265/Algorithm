108. Palindrome Partitioning II
中文English
Given a string s, cut s into some substrings such that every substring is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example
Example 1:

Input: "a"
Output: 0
Explanation: "a" is already a palindrome, no need to split.
Example 2:

Input: "aab"
Output: 1
Explanation: Split "aab" once, into "aa" and "b", both palindrome.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param s a string
     * @return an integer
     */
    bool isPalindrome(string x){
        int m = x.length();
        for(int a = 0,b = m-1;a<b;a++,b--){
            if(x.at(a)!=x.at(b)){
                return false;
            }
        }
        return true;
    }
    
    int minCut(string s) {
        // write your code here
        
        
        //define f[i] from 0 to i, means minimum cut can create how many palindrome.
        
        int m = s.length();
        vector<int> f(m+1);
        //int f[m+1];
        for(int i = 0; i<m+1;++i){
            f[i] = i;
        }
        
        for(int i = 1; i<m+1;++i){
            for(int j = 0;j<i;j++){
                string temp;
                temp.assign(s.begin()+j,s.begin()+i);
                if(isPalindrome(temp)){
                    f[i] = min(f[i],f[j] + 1);
                }
            }
        }
        return f[m] - 1;
    }
};

