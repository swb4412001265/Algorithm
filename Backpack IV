Given n items with size nums[i] which an integer array and all positive numbers, no duplicates. An integer target denotes the size of a backpack. Find the number of possible fill the backpack.

Each item may be chosen unlimited number of times.
Example
Given candidate items [2,3,6,7] and target 7,
A solution set is:
[7]

[2, 2, 3]
return 2
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param coins: a list of integer
    @param amount: a total amount of money amount
    @return: the way that you need to make up
    """
    def coinChange(self, coins, amount):
        # write your code here
        if not coins:
            return -1
        #define f[i][j] as the number of ways can make up of amount
        #i is the length of coin and j is the amount
        n = len(coins)
        m = amount
        f = [[0 for i in range(m+1)] for i in range(n+1)]
        #initialization
        #f[0][m] = 0; f[n][0] = 1
        #if the last add or not 
        #add:
        for i in range(n+1):
            f[i][0] = 1
        for i in range(1 , n + 1):
            for j in range(1, m + 1):
                f[i][j] = f[i-1][j]
                if j >= coins[i-1]:
                    f[i][j] = f[i - 1][j] + f[i - 1][j - coins[i-1]]
        return f[n][m] 


///////////////////////////////////////////////////////////////////DFS//////////////////////////////////////////////////////////////////
class Solution:
    """
    @param nums: an integer array and all positive numbers
    @param target: An integer
    @return: An integer
    """
    def backPackV(self, nums, target):
        # write your code here
        self.count = 0
        nums.sort()
        self.DFS(nums, target, 0)
        return self.count
    def DFS(self, nums, target, index):
        if target == 0:
            self.count += 1
        for i in range(index, len(nums)):
            if nums[i] > target:
                break
            self.DFS(nums, target - nums[i], i + 1)
