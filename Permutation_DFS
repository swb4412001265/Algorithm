class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
   
    vector<vector<int> > permute(vector<int> nums) {
        // write your code here
        vector<vector<int> > result;
        vector<int> tmp;
        if(nums.size() == 0) {
            result.push_back(tmp);
            return result;
        }
         vector<bool> visit(nums.size(), false);

        helper(result, nums, tmp, visit);
        
        return result;
        
    }
    void helper(vector<vector<int> > &result,
                vector<int> nums,
                vector<int> &tmp,
                vector<bool> visit) {
        if(tmp.size() == nums.size()) {
            result.push_back(tmp);
        }
        for(int i = 0; i < nums.size(); ++i) {
            if(visit[i] == true) {
                continue;
            }
            tmp.push_back(nums[i]);
            visit[i] = true;
            helper(result, nums, tmp, visit);
            visit[i] = false;
            tmp.pop_back();
        }
    }
};

////////////////////////////////////////////////Version 2///////////////////////////////////////////////////////////

class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
   
    vector<vector<int> > permute(vector<int> nums) {
        // write your code here
        vector<vector<int> > result;
        vector<int> tmp;
        if(nums.size() == 0) {
            result.push_back(tmp);
            return result;
        }
         //vector<bool> visit(nums.size(), false);

        helper(result, nums, tmp);
        
        return result;
        
    }
    void helper(vector<vector<int> > &result,
                vector<int> nums,
                vector<int> &tmp) {
        if(tmp.size() == nums.size()) {
            result.push_back(tmp);
        }
        for(int i = 0; i < nums.size(); ++i) {
            if(isVisited(tmp, nums[i]) == true) {
                continue;
            }
            tmp.push_back(nums[i]);
            //visit[i] = true;
            helper(result, nums, tmp);
            //visit[i] = false;
            tmp.pop_back();
        }
    }
    bool isVisited(vector<int> nums, int inNum) {
        bool tmp = false;
        for(int i = 0; i < nums.size(); ++i) {
            if(nums[i] == inNum) {
                tmp = true;
                break;
            }
        }
        return tmp;
    }
};
