6. Merge Two Sorted Arrays
中文English
Merge two given sorted ascending integer array A and B into a new sorted integer array.

Example
Example 1:

Input:  A=[1], B=[1]
Output: [1,1]	
Explanation:  return array merged.
Example 2:

Input:  A=[1,2,3,4], B=[2,4,5,6]
Output: [1,2,2,3,4,4,5,6]	
Explanation: return array merged.
Challenge
How can you optimize your algorithm if one array is very large and the other is very small?

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution {
public:
    /**
     * @param A and B: sorted integer array A and B.
     * @return: A new sorted integer array
     */
    vector<int> mergeSortedArray(vector<int> &A, vector<int> &B) {
        // write your code here
        vector<int> result;
        vector<int>::iterator it;
        it = result.begin();
        
        int i = 0;
        int j = 0;
        int sizeA = A.size();
        int sizeB = B.size();
        if(sizeA == 0){
            return B;
        }
        if(sizeB == 0){
            return A;
        }
        while(i < sizeA && j < sizeB){
            if(A[i] < B[j]){
                result.push_back(A[i]);
                i++;
            }else {
                result.push_back(B[j]);
                j++;
            }
        }    
        if(i == sizeA){
            //result.insert(result.end(), it+j, B.end());
            while(j < sizeB){
                result.push_back(B[j]);
                j++;
            }
        }else {
            //result.insert(result.end(), it+i, A.end());
            while(i<sizeA){
                result.push_back(A[i]);
                i++;
            }
        }    
        return result;
        
    }
};



///////////////////////////////////////////Python/////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""


class Solution:
    """
    @param: l1: ListNode l1 is the head of the linked list
    @param: l2: ListNode l2 is the head of the linked list
    @return: ListNode head of linked list
    """
    def mergeTwoLists(self, l1, l2):
        # write your code here
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        
        dummy = ListNode(0)
        head = dummy 
        while l1 is not None and l2 is not None:
            if l1.val >= l2.val:
                head.next = l2
                head = head.next
                l2 = l2.next
            else:
                head.next = l1
                head = head.next
                l1 = l1.next
        
        if l1 is None:
            head.next = l2
        else:
            head.next = l1
        return dummy.next
        
  ////////////////////////Merge B into A///////////////////////////////////////
  64. Merge Sorted Array
中文English
Given two sorted integer arrays A and B, merge B into A as one sorted array.

Example
Example 1:

Input：[1, 2, 3] 3  [4,5]  2
Output：[1,2,3,4,5]
Explanation:
After merge, A will be filled as [1, 2, 3, 4, 5]
Example 2:

Input：[1,2,5] 3 [3,4] 2
Output：[1,2,3,4,5]
Explanation:
After merge, A will be filled as [1, 2, 3, 4, 5]
Notice
You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. The number of elements initialized in A and B are m and n respectively.

/////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  class Solution:
    """
    @param: A: sorted integer array A which has m elements, but size of A is m+n
    @param: m: An integer
    @param: B: sorted integer array B which has n elements
    @param: n: An integer
    @return: nothing
    """
    def mergeSortedArray(self, A, m, B, n):
        # write your code here
        i = m - 1
        j = n - 1
        z = m + n - 1
        while i >= 0 and j >= 0:
            if A[i] <= B[j]:
                A[z] = B[j]
                j -= 1
                z -= 1
            else:
                A[z] = A[i]
                i -= 1
                z -= 1
        while i >= 0:
            A[z] = A[i]
            z -= 1
            i -= 1
        while j >= 0:
            A[z] = B[j]
            z -= 1
            j -= 1
