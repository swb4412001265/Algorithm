class Solution {
public:
    /**
     * @param A and B: sorted integer array A and B.
     * @return: A new sorted integer array
     */
    vector<int> mergeSortedArray(vector<int> &A, vector<int> &B) {
        // write your code here
        vector<int> result;
        vector<int>::iterator it;
        it = result.begin();
        
        int i = 0;
        int j = 0;
        int sizeA = A.size();
        int sizeB = B.size();
        if(sizeA == 0){
            return B;
        }
        if(sizeB == 0){
            return A;
        }
        while(i < sizeA && j < sizeB){
            if(A[i] < B[j]){
                result.push_back(A[i]);
                i++;
            }else {
                result.push_back(B[j]);
                j++;
            }
        }    
        if(i == sizeA){
            //result.insert(result.end(), it+j, B.end());
            while(j < sizeB){
                result.push_back(B[j]);
                j++;
            }
        }else {
            //result.insert(result.end(), it+i, A.end());
            while(i<sizeA){
                result.push_back(A[i]);
                i++;
            }
        }    
        return result;
        
    }
};



///////////////////////////////////////////Python/////////////////////////////////////////
"""
Definition of ListNode
class ListNode(object):
    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""


class Solution:
    """
    @param: l1: ListNode l1 is the head of the linked list
    @param: l2: ListNode l2 is the head of the linked list
    @return: ListNode head of linked list
    """
    def mergeTwoLists(self, l1, l2):
        # write your code here
        if l1 is None:
            return l2
        if l2 is None:
            return l1
        
        dummy = ListNode(0)
        head = dummy 
        while l1 is not None and l2 is not None:
            if l1.val >= l2.val:
                head.next = l2
                head = head.next
                l2 = l2.next
            else:
                head.next = l1
                head = head.next
                l1 = l1.next
        
        if l1 is None:
            head.next = l2
        else:
            head.next = l1
        return dummy.next
