647. Find All Anagrams in a String

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 40,000.

The order of output does not matter.

Example
Example 1:

Input : s =  "cbaebabacd", p = "abc"
Output : [0, 6]
Explanation : 
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

////////////////////////////////////////Time Limit Exceeded///////////////////////////////////////////

class Solution:
    """
    @param: s: a string
    @param: p: a string
    @return: a list of index
    """
    def findAnagrams(self, s, p):
        # write your code here
        lenP = len(p)
        result = []
        for i in range(len(s) - lenP + 1):
            if s[i] in p:
                if self.equals(s[i:i + lenP], p) == 1:
                    result.append(i)
        return result            
    
    def equals(self, a, b):
        tmpA = list(a)
        tmpB = list(b)
        for i in range(len(tmpA) - 1, -1, -1):
            if tmpA[i] in tmpB:
                tmp = tmpA.pop(i)
                tmpB.remove(tmp)
        if tmpA == [] and tmpB == []:
            return 1
        else:
            return -1
/////////////////////////////////////////////////////Time Limit Exceeded///////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: a string
    @param p: a string
    @return: a list of index
    """
    def findAnagrams(self, s, p):
        # write your code here
        if not s:
            return []
        p = sorted(list(p))
        res = []
        for i in range(len(s) - len(p) + 1):
            if s[i] in p:
                tmpA = s[i: i + len(p)]
                if sorted(list(tmpA)) == p:
                    res.append(i)
        return res    
/////////////////////////////////////////////Use slide window and hashtable//////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: a string
    @param p: a string
    @return: a list of index
    """
    def findAnagrams(self, s, p):
        if len(p) > len(s):
            return []
        if p == s:
            return [0]
            
        p_hash = {}
        s_hash = {}
        
        ans = [] 
        for i in range(len(p)):
            p_hash[p[i]] = p_hash.get(p[i],0) + 1 
            s_hash[s[i]] = s_hash.get(s[i],0) + 1 
            
        if s_hash == p_hash:
            ans.append(0)    
           
        for window_start in range(1,len(s) - len(p) + 1):
            window_end = window_start + len(p) - 1 
            s_hash[s[window_end]] = s_hash.get(s[window_end], 0) + 1 
            
            s_hash[s[window_start -1]] -= 1 
            if s_hash[s[window_start -1]] == 0:
                del s_hash[s[window_start -1]]
            
            if s_hash == p_hash:
                ans.append(window_start)
                
        return ans
