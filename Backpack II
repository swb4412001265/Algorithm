Problem 单次选择+最大价值
Given n items with size A[i] and value V[i], and a backpack with size m. What's the maximum value can you put into the backpack?

Notice
You cannot divide item into small pieces and the total size of items you choose should smaller or equal to m.

Example
Given 4 items with size [2, 3, 5, 7] and value [1, 5, 2, 4], and a backpack with size 10. The maximum value is 9.

Challenge
O(n x m) memory is acceptable, can you do it in O(m) memory?

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param m: An integer m denotes the size of a backpack
    @param A: Given n items with size A[i]
    @param V: Given n items with value V[i]
    @return: The maximum value
    """
    def backPackII(self, m, A, V):
        # write your code here
        if not A:
            return 0
        n = len(A)
        bp = [[0 for i in range(m+1)] for i in range(n+1)]
        for i in range(1, n+1):
            for j in range(1, m+1):
                bp[i][j] = bp[i-1][j]
                if (j >= A[i-1]):
                    bp[i][j] = max(bp[i-1][j], bp[i-1][j-A[i-1]] + V[i-1])
        return bp[n][m]
