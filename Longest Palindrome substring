class Solution:
    """
    @param s: a string which consists of lowercase or uppercase letters
    @return: the length of the longest palindromes that can be built
    """
    def longestPalindrome(self, s):
        # write your code here
        if s is None:
            return 0
        if len(s) is 0:
            return 0
        tmp = {}
        count = 0
        for i in s:
            tmp.update({i:s.count(i)})
            x = tmp.values()
        for i in x:
            if i % 2 == 0:
                count += i
            else:
                count = count + i - 1
        if len(s) == count:
            return count 
        else:
            return count + 1

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution:
    """
    @param s: a string which consists of lowercase or uppercase letters
    @return: the length of the longest palindromes that can be built
    """
    def longestPalindrome(self, s):
        # write your code here
        if not s:
            return 0
        tmp = {}
        res = 0
        tmpOdd = 0
        flag = False
        for i in s:
            if i not in tmp:
                tmp[i] = 1
            else:
                tmp[i] += 1
        # print(tmp)        
        for i in tmp.values():
            # When values is odd number, we will keep the even part and minus 1
            if i > 1:
                if i % 2 == 0:
                    res += i
                else:
                    res += i - 1
                    flag = True
            else:
                flag = True
        if flag:
            return res + 1
        return res
            

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: input string
    @return: the longest palindromic substring
    """
    def longestPalindrome(self, s):
        # write your code here
           # write your code here
        self.start = 0
        self.longest = 0
        if s is None:
            return ""
        for i in range(len(s)):
            self.if_string_is_palindrome_from_middle(s, i, i)
            self.if_string_is_palindrome_from_middle(s, i, i + 1)
        return s[self.start:self.start + self.longest - 1]
    
    def if_string_is_palindrome_from_middle(self, s, left, right):
        while left >=0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        if self.longest < right - left :
            self.longest = right - left
            self.start = left + 1
    # def isPalindrome(self, tmpStr):
    #     start = 0
    #     end = len(tmpStr)
    #     while start < end:
    #         if lower(tmpStr[start]) != lower(tmpStr[end])
    #             return False
    #         start += 1
    #         end -= 1
    #     return True



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Solution:
    """
    @param s: input string
    @return: the longest palindromic substring
    """
    def longestPalindrome(self, s):
        # write your code here
           # write your code here
        longest = []
        if s is None:
            return ""
        for i in range(len(s)):
            sub = self.if_string_is_palindrome_from_middle(s, i, i)
            if len(sub) > len(longest):
                longest = sub
            sub = self.if_string_is_palindrome_from_middle(s, i, i + 1)
            if len(sub) > len(longest):
                longest = sub
        return longest
    
    def if_string_is_palindrome_from_middle(self, s, left, right):
        while left >=0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]
